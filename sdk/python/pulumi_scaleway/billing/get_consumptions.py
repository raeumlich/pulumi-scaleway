# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetConsumptionsResult',
    'AwaitableGetConsumptionsResult',
    'get_consumptions',
    'get_consumptions_output',
]

@pulumi.output_type
class GetConsumptionsResult:
    """
    A collection of values returned by getConsumptions.
    """
    def __init__(__self__, consumptions=None, id=None, organization_id=None, updated_at=None):
        if consumptions and not isinstance(consumptions, list):
            raise TypeError("Expected argument 'consumptions' to be a list")
        pulumi.set(__self__, "consumptions", consumptions)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        pulumi.set(__self__, "organization_id", organization_id)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def consumptions(self) -> Sequence['outputs.GetConsumptionsConsumptionResult']:
        """
        List of found consumptions
        """
        return pulumi.get(self, "consumptions")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> str:
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        The last consumption update date.
        """
        return pulumi.get(self, "updated_at")


class AwaitableGetConsumptionsResult(GetConsumptionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConsumptionsResult(
            consumptions=self.consumptions,
            id=self.id,
            organization_id=self.organization_id,
            updated_at=self.updated_at)


def get_consumptions(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConsumptionsResult:
    """
    Gets information about your Consumptions.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('scaleway:billing/getConsumptions:getConsumptions', __args__, opts=opts, typ=GetConsumptionsResult).value

    return AwaitableGetConsumptionsResult(
        consumptions=pulumi.get(__ret__, 'consumptions'),
        id=pulumi.get(__ret__, 'id'),
        organization_id=pulumi.get(__ret__, 'organization_id'),
        updated_at=pulumi.get(__ret__, 'updated_at'))


@_utilities.lift_output_func(get_consumptions)
def get_consumptions_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetConsumptionsResult]:
    """
    Gets information about your Consumptions.
    """
    ...
