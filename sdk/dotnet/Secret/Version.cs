// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scaleway.Secret
{
    /// <summary>
    /// Creates and manages Scaleway Secret Versions.
    /// For more information, see [the documentation](https://developers.scaleway.com/en/products/secret_manager/api/v1alpha1/#secret-versions-079501).
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumi.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Scaleway.Secret.Secret("main", new()
    ///     {
    ///         Description = "barr",
    ///         Tags = new[]
    ///         {
    ///             "foo",
    ///             "terraform",
    ///         },
    ///     });
    /// 
    ///     var v1 = new Scaleway.Secret.Version("v1", new()
    ///     {
    ///         Description = "version1",
    ///         SecretId = main.Id,
    ///         Data = "my_new_secret",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// The Secret Version can be imported using the `{region}/{id}/{revision}`, e.g.
    /// 
    /// ~&gt; **Important:** Be aware if you import with revision `latest` you will overwrite the version you used before.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:secret/version:Version main fr-par/11111111-1111-1111-1111-111111111111/2
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:secret/version:Version")]
    public partial class Version : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Date and time of secret version's creation (RFC 3339 format).
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The data payload of the secret version. Must be no larger than 64KiB. (e.g. `my-secret-version-payload`). more on the data section
        /// </summary>
        [Output("data")]
        public Output<string> Data { get; private set; } = null!;

        /// <summary>
        /// Description of the secret version (e.g. `my-new-description`).
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// `region`) The region
        /// in which the resource exists.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The revision for this Secret Version.
        /// </summary>
        [Output("revision")]
        public Output<string> Revision { get; private set; } = null!;

        /// <summary>
        /// The Secret ID associated wit the secret version.
        /// </summary>
        [Output("secretId")]
        public Output<string> SecretId { get; private set; } = null!;

        /// <summary>
        /// The status of the Secret Version.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Date and time of secret version's last update (RFC 3339 format).
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a Version resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Version(string name, VersionArgs args, CustomResourceOptions? options = null)
            : base("scaleway:secret/version:Version", name, args ?? new VersionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Version(string name, Input<string> id, VersionState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:secret/version:Version", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/raeumlich/pulumi-scaleway/releases/",
                AdditionalSecretOutputs =
                {
                    "data",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Version resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Version Get(string name, Input<string> id, VersionState? state = null, CustomResourceOptions? options = null)
        {
            return new Version(name, id, state, options);
        }
    }

    public sealed class VersionArgs : global::Pulumi.ResourceArgs
    {
        [Input("data", required: true)]
        private Input<string>? _data;

        /// <summary>
        /// The data payload of the secret version. Must be no larger than 64KiB. (e.g. `my-secret-version-payload`). more on the data section
        /// </summary>
        public Input<string>? Data
        {
            get => _data;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _data = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Description of the secret version (e.g. `my-new-description`).
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// `region`) The region
        /// in which the resource exists.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The Secret ID associated wit the secret version.
        /// </summary>
        [Input("secretId", required: true)]
        public Input<string> SecretId { get; set; } = null!;

        public VersionArgs()
        {
        }
        public static new VersionArgs Empty => new VersionArgs();
    }

    public sealed class VersionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Date and time of secret version's creation (RFC 3339 format).
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("data")]
        private Input<string>? _data;

        /// <summary>
        /// The data payload of the secret version. Must be no larger than 64KiB. (e.g. `my-secret-version-payload`). more on the data section
        /// </summary>
        public Input<string>? Data
        {
            get => _data;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _data = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Description of the secret version (e.g. `my-new-description`).
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// `region`) The region
        /// in which the resource exists.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The revision for this Secret Version.
        /// </summary>
        [Input("revision")]
        public Input<string>? Revision { get; set; }

        /// <summary>
        /// The Secret ID associated wit the secret version.
        /// </summary>
        [Input("secretId")]
        public Input<string>? SecretId { get; set; }

        /// <summary>
        /// The status of the Secret Version.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Date and time of secret version's last update (RFC 3339 format).
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public VersionState()
        {
        }
        public static new VersionState Empty => new VersionState();
    }
}
