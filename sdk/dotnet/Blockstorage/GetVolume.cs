// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scaleway.Blockstorage
{
    public static class GetVolume
    {
        /// <summary>
        /// Gets information about a Block Volume.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myVolume = Scaleway.Blockstorage.GetVolume.Invoke(new()
        ///     {
        ///         VolumeId = "11111111-1111-1111-1111-111111111111",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVolumeResult> InvokeAsync(GetVolumeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVolumeResult>("scaleway:blockstorage/getVolume:getVolume", args ?? new GetVolumeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a Block Volume.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myVolume = Scaleway.Blockstorage.GetVolume.Invoke(new()
        ///     {
        ///         VolumeId = "11111111-1111-1111-1111-111111111111",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetVolumeResult> Invoke(GetVolumeInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVolumeResult>("scaleway:blockstorage/getVolume:getVolume", args ?? new GetVolumeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVolumeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the volume. Only one of `name` and `volume_id` should be specified.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The ID of the project the volume is associated with.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// The ID of the volume. Only one of `name` and `volume_id` should be specified.
        /// </summary>
        [Input("volumeId")]
        public string? VolumeId { get; set; }

        /// <summary>
        /// `zone`) The zone in which the volume exists.
        /// </summary>
        [Input("zone")]
        public string? Zone { get; set; }

        public GetVolumeArgs()
        {
        }
        public static new GetVolumeArgs Empty => new GetVolumeArgs();
    }

    public sealed class GetVolumeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the volume. Only one of `name` and `volume_id` should be specified.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the project the volume is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The ID of the volume. Only one of `name` and `volume_id` should be specified.
        /// </summary>
        [Input("volumeId")]
        public Input<string>? VolumeId { get; set; }

        /// <summary>
        /// `zone`) The zone in which the volume exists.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GetVolumeInvokeArgs()
        {
        }
        public static new GetVolumeInvokeArgs Empty => new GetVolumeInvokeArgs();
    }


    [OutputType]
    public sealed class GetVolumeResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int Iops;
        public readonly string? Name;
        public readonly string? ProjectId;
        public readonly int SizeInGb;
        public readonly string SnapshotId;
        public readonly ImmutableArray<string> Tags;
        public readonly string? VolumeId;
        public readonly string? Zone;

        [OutputConstructor]
        private GetVolumeResult(
            string id,

            int iops,

            string? name,

            string? projectId,

            int sizeInGb,

            string snapshotId,

            ImmutableArray<string> tags,

            string? volumeId,

            string? zone)
        {
            Id = id;
            Iops = iops;
            Name = name;
            ProjectId = projectId;
            SizeInGb = sizeInGb;
            SnapshotId = snapshotId;
            Tags = tags;
            VolumeId = volumeId;
            Zone = zone;
        }
    }
}
