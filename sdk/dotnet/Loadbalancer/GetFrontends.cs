// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scaleway.Loadbalancer
{
    public static class GetFrontends
    {
        /// <summary>
        /// Gets information about multiple Load Balancer Frontends.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byLBID = Scaleway.Loadbalancer.GetFrontends.Invoke(new()
        ///     {
        ///         LbId = scaleway_lb.Lb01.Id,
        ///     });
        /// 
        ///     var byLBIDAndName = Scaleway.Loadbalancer.GetFrontends.Invoke(new()
        ///     {
        ///         LbId = scaleway_lb.Lb01.Id,
        ///         Name = "tf-frontend-datasource",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetFrontendsResult> InvokeAsync(GetFrontendsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFrontendsResult>("scaleway:loadbalancer/getFrontends:getFrontends", args ?? new GetFrontendsArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about multiple Load Balancer Frontends.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byLBID = Scaleway.Loadbalancer.GetFrontends.Invoke(new()
        ///     {
        ///         LbId = scaleway_lb.Lb01.Id,
        ///     });
        /// 
        ///     var byLBIDAndName = Scaleway.Loadbalancer.GetFrontends.Invoke(new()
        ///     {
        ///         LbId = scaleway_lb.Lb01.Id,
        ///         Name = "tf-frontend-datasource",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetFrontendsResult> Invoke(GetFrontendsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFrontendsResult>("scaleway:loadbalancer/getFrontends:getFrontends", args ?? new GetFrontendsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFrontendsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The load-balancer ID this frontend is attached to. frontends with a LB ID like it are listed.
        /// </summary>
        [Input("lbId", required: true)]
        public string LbId { get; set; } = null!;

        /// <summary>
        /// The frontend name used as filter. Frontends with a name like it are listed.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// `zone`) The zone in which frontends exist.
        /// </summary>
        [Input("zone")]
        public string? Zone { get; set; }

        public GetFrontendsArgs()
        {
        }
        public static new GetFrontendsArgs Empty => new GetFrontendsArgs();
    }

    public sealed class GetFrontendsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The load-balancer ID this frontend is attached to. frontends with a LB ID like it are listed.
        /// </summary>
        [Input("lbId", required: true)]
        public Input<string> LbId { get; set; } = null!;

        /// <summary>
        /// The frontend name used as filter. Frontends with a name like it are listed.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// `zone`) The zone in which frontends exist.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GetFrontendsInvokeArgs()
        {
        }
        public static new GetFrontendsInvokeArgs Empty => new GetFrontendsInvokeArgs();
    }


    [OutputType]
    public sealed class GetFrontendsResult
    {
        /// <summary>
        /// List of found frontends
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFrontendsFrontendResult> Frontends;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string LbId;
        public readonly string? Name;
        public readonly string OrganizationId;
        public readonly string ProjectId;
        public readonly string Zone;

        [OutputConstructor]
        private GetFrontendsResult(
            ImmutableArray<Outputs.GetFrontendsFrontendResult> frontends,

            string id,

            string lbId,

            string? name,

            string organizationId,

            string projectId,

            string zone)
        {
            Frontends = frontends;
            Id = id;
            LbId = lbId;
            Name = name;
            OrganizationId = organizationId;
            ProjectId = projectId;
            Zone = zone;
        }
    }
}
