// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scaleway.Loadbalancer
{
    public static class GetBackends
    {
        /// <summary>
        /// Gets information about multiple Load Balancer Backends.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byLBID = Scaleway.Loadbalancer.GetBackends.Invoke(new()
        ///     {
        ///         LbId = scaleway_lb.Lb01.Id,
        ///     });
        /// 
        ///     var byLBIDAndName = Scaleway.Loadbalancer.GetBackends.Invoke(new()
        ///     {
        ///         LbId = scaleway_lb.Lb01.Id,
        ///         Name = "tf-backend-datasource",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetBackendsResult> InvokeAsync(GetBackendsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBackendsResult>("scaleway:loadbalancer/getBackends:getBackends", args ?? new GetBackendsArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about multiple Load Balancer Backends.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byLBID = Scaleway.Loadbalancer.GetBackends.Invoke(new()
        ///     {
        ///         LbId = scaleway_lb.Lb01.Id,
        ///     });
        /// 
        ///     var byLBIDAndName = Scaleway.Loadbalancer.GetBackends.Invoke(new()
        ///     {
        ///         LbId = scaleway_lb.Lb01.Id,
        ///         Name = "tf-backend-datasource",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetBackendsResult> Invoke(GetBackendsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBackendsResult>("scaleway:loadbalancer/getBackends:getBackends", args ?? new GetBackendsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBackendsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The load-balancer ID this backend is attached to. backends with a LB ID like it are listed.
        /// </summary>
        [Input("lbId", required: true)]
        public string LbId { get; set; } = null!;

        /// <summary>
        /// The backend name used as filter. Backends with a name like it are listed.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// `zone`) The zone in which backends exist.
        /// </summary>
        [Input("zone")]
        public string? Zone { get; set; }

        public GetBackendsArgs()
        {
        }
        public static new GetBackendsArgs Empty => new GetBackendsArgs();
    }

    public sealed class GetBackendsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The load-balancer ID this backend is attached to. backends with a LB ID like it are listed.
        /// </summary>
        [Input("lbId", required: true)]
        public Input<string> LbId { get; set; } = null!;

        /// <summary>
        /// The backend name used as filter. Backends with a name like it are listed.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// `zone`) The zone in which backends exist.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GetBackendsInvokeArgs()
        {
        }
        public static new GetBackendsInvokeArgs Empty => new GetBackendsInvokeArgs();
    }


    [OutputType]
    public sealed class GetBackendsResult
    {
        /// <summary>
        /// List of found backends
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBackendsBackendResult> Backends;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string LbId;
        public readonly string? Name;
        public readonly string OrganizationId;
        public readonly string ProjectId;
        public readonly string Zone;

        [OutputConstructor]
        private GetBackendsResult(
            ImmutableArray<Outputs.GetBackendsBackendResult> backends,

            string id,

            string lbId,

            string? name,

            string organizationId,

            string projectId,

            string zone)
        {
            Backends = backends;
            Id = id;
            LbId = lbId;
            Name = name;
            OrganizationId = organizationId;
            ProjectId = projectId;
            Zone = zone;
        }
    }
}
