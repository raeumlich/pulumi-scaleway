// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scaleway.Loadbalancer
{
    /// <summary>
    /// Creates and manages Scaleway Load-Balancer Frontends. For more information, see [the documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-frontends).
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumi.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var frontend01 = new Scaleway.Loadbalancer.Frontend("frontend01", new()
    ///     {
    ///         LbId = scaleway_lb.Lb01.Id,
    ///         BackendId = scaleway_lb_backend.Backend01.Id,
    ///         InboundPort = 80,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## With ACLs
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumi.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var frontend01 = new Scaleway.Loadbalancer.Frontend("frontend01", new()
    ///     {
    ///         LbId = scaleway_lb.Lb01.Id,
    ///         BackendId = scaleway_lb_backend.Backend01.Id,
    ///         InboundPort = 80,
    ///         Acls = new[]
    ///         {
    ///             new Scaleway.Loadbalancer.Inputs.FrontendAclArgs
    ///             {
    ///                 Name = "blacklist wellknwon IPs",
    ///                 Action = new Scaleway.Loadbalancer.Inputs.FrontendAclActionArgs
    ///                 {
    ///                     Type = "allow",
    ///                 },
    ///                 Match = new Scaleway.Loadbalancer.Inputs.FrontendAclMatchArgs
    ///                 {
    ///                     IpSubnets = new[]
    ///                     {
    ///                         "192.168.0.1",
    ///                         "192.168.0.2",
    ///                         "192.168.10.0/24",
    ///                     },
    ///                 },
    ///             },
    ///             new Scaleway.Loadbalancer.Inputs.FrontendAclArgs
    ///             {
    ///                 Action = new Scaleway.Loadbalancer.Inputs.FrontendAclActionArgs
    ///                 {
    ///                     Type = "deny",
    ///                 },
    ///                 Match = new Scaleway.Loadbalancer.Inputs.FrontendAclMatchArgs
    ///                 {
    ///                     IpSubnets = new[]
    ///                     {
    ///                         "51.51.51.51",
    ///                     },
    ///                     HttpFilter = "regex",
    ///                     HttpFilterValues = new[]
    ///                     {
    ///                         "^foo*bar$",
    ///                     },
    ///                 },
    ///             },
    ///             new Scaleway.Loadbalancer.Inputs.FrontendAclArgs
    ///             {
    ///                 Action = new Scaleway.Loadbalancer.Inputs.FrontendAclActionArgs
    ///                 {
    ///                     Type = "allow",
    ///                 },
    ///                 Match = new Scaleway.Loadbalancer.Inputs.FrontendAclMatchArgs
    ///                 {
    ///                     HttpFilter = "path_begin",
    ///                     HttpFilterValues = new[]
    ///                     {
    ///                         "foo",
    ///                         "bar",
    ///                     },
    ///                 },
    ///             },
    ///             new Scaleway.Loadbalancer.Inputs.FrontendAclArgs
    ///             {
    ///                 Action = new Scaleway.Loadbalancer.Inputs.FrontendAclActionArgs
    ///                 {
    ///                     Type = "allow",
    ///                 },
    ///                 Match = new Scaleway.Loadbalancer.Inputs.FrontendAclMatchArgs
    ///                 {
    ///                     HttpFilter = "path_begin",
    ///                     HttpFilterValues = new[]
    ///                     {
    ///                         "hi",
    ///                     },
    ///                     Invert = true,
    ///                 },
    ///             },
    ///             new Scaleway.Loadbalancer.Inputs.FrontendAclArgs
    ///             {
    ///                 Action = new Scaleway.Loadbalancer.Inputs.FrontendAclActionArgs
    ///                 {
    ///                     Type = "allow",
    ///                 },
    ///                 Match = new Scaleway.Loadbalancer.Inputs.FrontendAclMatchArgs
    ///                 {
    ///                     HttpFilter = "http_header_match",
    ///                     HttpFilterValues = "foo",
    ///                     HttpFilterOption = "bar",
    ///                 },
    ///             },
    ///             new Scaleway.Loadbalancer.Inputs.FrontendAclArgs
    ///             {
    ///                 Action = new Scaleway.Loadbalancer.Inputs.FrontendAclActionArgs
    ///                 {
    ///                     Type = "redirect",
    ///                     Redirects = new[]
    ///                     {
    ///                         new Scaleway.Loadbalancer.Inputs.FrontendAclActionRedirectArgs
    ///                         {
    ///                             Type = "location",
    ///                             Target = "https://example.com",
    ///                             Code = 307,
    ///                         },
    ///                     },
    ///                 },
    ///                 Match = new Scaleway.Loadbalancer.Inputs.FrontendAclMatchArgs
    ///                 {
    ///                     IpSubnets = new[]
    ///                     {
    ///                         "10.0.0.10",
    ///                     },
    ///                     HttpFilter = "path_begin",
    ///                     HttpFilterValues = new[]
    ///                     {
    ///                         "foo",
    ///                         "bar",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Load-Balancer frontend can be imported using the `{zone}/{id}`, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import scaleway:loadbalancer/frontend:Frontend frontend01 fr-par-1/11111111-1111-1111-1111-111111111111
    /// ```
    /// </summary>
    [ScalewayResourceType("scaleway:loadbalancer/frontend:Frontend")]
    public partial class Frontend : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of ACL rules to apply to the load-balancer frontend.  Defined below.
        /// </summary>
        [Output("acls")]
        public Output<ImmutableArray<Outputs.FrontendAcl>> Acls { get; private set; } = null!;

        /// <summary>
        /// The load-balancer backend ID this frontend is attached to.
        /// 
        /// &gt; **Important:** Updates to `lb_id` or `backend_id` will recreate the frontend.
        /// </summary>
        [Output("backendId")]
        public Output<string> BackendId { get; private set; } = null!;

        /// <summary>
        /// (Deprecated) first certificate ID used by the frontend.
        /// </summary>
        [Output("certificateId")]
        public Output<string> CertificateId { get; private set; } = null!;

        /// <summary>
        /// List of Certificate IDs that should be used by the frontend.
        /// 
        /// &gt; **Important:** Certificates are not allowed on port 80.
        /// </summary>
        [Output("certificateIds")]
        public Output<ImmutableArray<string>> CertificateIds { get; private set; } = null!;

        /// <summary>
        /// Activates HTTP/3 protocol.
        /// </summary>
        [Output("enableHttp3")]
        public Output<bool?> EnableHttp3 { get; private set; } = null!;

        /// <summary>
        /// A boolean to specify whether to use lb_acl.
        /// If `external_acls` is set to `true`, `acl` can not be set directly in the lb frontend.
        /// </summary>
        [Output("externalAcls")]
        public Output<bool?> ExternalAcls { get; private set; } = null!;

        /// <summary>
        /// TCP port to listen on the front side.
        /// </summary>
        [Output("inboundPort")]
        public Output<int> InboundPort { get; private set; } = null!;

        /// <summary>
        /// The load-balancer ID this frontend is attached to.
        /// </summary>
        [Output("lbId")]
        public Output<string> LbId { get; private set; } = null!;

        /// <summary>
        /// The ACL name. If not provided it will be randomly generated.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Maximum inactivity time on the client side. (e.g.: `1s`)
        /// </summary>
        [Output("timeoutClient")]
        public Output<string?> TimeoutClient { get; private set; } = null!;


        /// <summary>
        /// Create a Frontend resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Frontend(string name, FrontendArgs args, CustomResourceOptions? options = null)
            : base("scaleway:loadbalancer/frontend:Frontend", name, args ?? new FrontendArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Frontend(string name, Input<string> id, FrontendState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:loadbalancer/frontend:Frontend", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/raeumlich/pulumi-scaleway/releases/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Frontend resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Frontend Get(string name, Input<string> id, FrontendState? state = null, CustomResourceOptions? options = null)
        {
            return new Frontend(name, id, state, options);
        }
    }

    public sealed class FrontendArgs : global::Pulumi.ResourceArgs
    {
        [Input("acls")]
        private InputList<Inputs.FrontendAclArgs>? _acls;

        /// <summary>
        /// A list of ACL rules to apply to the load-balancer frontend.  Defined below.
        /// </summary>
        public InputList<Inputs.FrontendAclArgs> Acls
        {
            get => _acls ?? (_acls = new InputList<Inputs.FrontendAclArgs>());
            set => _acls = value;
        }

        /// <summary>
        /// The load-balancer backend ID this frontend is attached to.
        /// 
        /// &gt; **Important:** Updates to `lb_id` or `backend_id` will recreate the frontend.
        /// </summary>
        [Input("backendId", required: true)]
        public Input<string> BackendId { get; set; } = null!;

        [Input("certificateIds")]
        private InputList<string>? _certificateIds;

        /// <summary>
        /// List of Certificate IDs that should be used by the frontend.
        /// 
        /// &gt; **Important:** Certificates are not allowed on port 80.
        /// </summary>
        public InputList<string> CertificateIds
        {
            get => _certificateIds ?? (_certificateIds = new InputList<string>());
            set => _certificateIds = value;
        }

        /// <summary>
        /// Activates HTTP/3 protocol.
        /// </summary>
        [Input("enableHttp3")]
        public Input<bool>? EnableHttp3 { get; set; }

        /// <summary>
        /// A boolean to specify whether to use lb_acl.
        /// If `external_acls` is set to `true`, `acl` can not be set directly in the lb frontend.
        /// </summary>
        [Input("externalAcls")]
        public Input<bool>? ExternalAcls { get; set; }

        /// <summary>
        /// TCP port to listen on the front side.
        /// </summary>
        [Input("inboundPort", required: true)]
        public Input<int> InboundPort { get; set; } = null!;

        /// <summary>
        /// The load-balancer ID this frontend is attached to.
        /// </summary>
        [Input("lbId", required: true)]
        public Input<string> LbId { get; set; } = null!;

        /// <summary>
        /// The ACL name. If not provided it will be randomly generated.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Maximum inactivity time on the client side. (e.g.: `1s`)
        /// </summary>
        [Input("timeoutClient")]
        public Input<string>? TimeoutClient { get; set; }

        public FrontendArgs()
        {
        }
        public static new FrontendArgs Empty => new FrontendArgs();
    }

    public sealed class FrontendState : global::Pulumi.ResourceArgs
    {
        [Input("acls")]
        private InputList<Inputs.FrontendAclGetArgs>? _acls;

        /// <summary>
        /// A list of ACL rules to apply to the load-balancer frontend.  Defined below.
        /// </summary>
        public InputList<Inputs.FrontendAclGetArgs> Acls
        {
            get => _acls ?? (_acls = new InputList<Inputs.FrontendAclGetArgs>());
            set => _acls = value;
        }

        /// <summary>
        /// The load-balancer backend ID this frontend is attached to.
        /// 
        /// &gt; **Important:** Updates to `lb_id` or `backend_id` will recreate the frontend.
        /// </summary>
        [Input("backendId")]
        public Input<string>? BackendId { get; set; }

        /// <summary>
        /// (Deprecated) first certificate ID used by the frontend.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        [Input("certificateIds")]
        private InputList<string>? _certificateIds;

        /// <summary>
        /// List of Certificate IDs that should be used by the frontend.
        /// 
        /// &gt; **Important:** Certificates are not allowed on port 80.
        /// </summary>
        public InputList<string> CertificateIds
        {
            get => _certificateIds ?? (_certificateIds = new InputList<string>());
            set => _certificateIds = value;
        }

        /// <summary>
        /// Activates HTTP/3 protocol.
        /// </summary>
        [Input("enableHttp3")]
        public Input<bool>? EnableHttp3 { get; set; }

        /// <summary>
        /// A boolean to specify whether to use lb_acl.
        /// If `external_acls` is set to `true`, `acl` can not be set directly in the lb frontend.
        /// </summary>
        [Input("externalAcls")]
        public Input<bool>? ExternalAcls { get; set; }

        /// <summary>
        /// TCP port to listen on the front side.
        /// </summary>
        [Input("inboundPort")]
        public Input<int>? InboundPort { get; set; }

        /// <summary>
        /// The load-balancer ID this frontend is attached to.
        /// </summary>
        [Input("lbId")]
        public Input<string>? LbId { get; set; }

        /// <summary>
        /// The ACL name. If not provided it will be randomly generated.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Maximum inactivity time on the client side. (e.g.: `1s`)
        /// </summary>
        [Input("timeoutClient")]
        public Input<string>? TimeoutClient { get; set; }

        public FrontendState()
        {
        }
        public static new FrontendState Empty => new FrontendState();
    }
}
