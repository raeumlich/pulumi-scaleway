// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scaleway.Loadbalancer
{
    public static class GetACLs
    {
        /// <summary>
        /// Gets information about multiple Load Balancer ACLs.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byFrontID = Scaleway.Loadbalancer.GetACLs.Invoke(new()
        ///     {
        ///         FrontendId = scaleway_lb_frontend.Frt01.Id,
        ///     });
        /// 
        ///     var byFrontIDAndName = Scaleway.Loadbalancer.GetACLs.Invoke(new()
        ///     {
        ///         FrontendId = scaleway_lb_frontend.Frt01.Id,
        ///         Name = "tf-acls-datasource",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetACLsResult> InvokeAsync(GetACLsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetACLsResult>("scaleway:loadbalancer/getACLs:getACLs", args ?? new GetACLsArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about multiple Load Balancer ACLs.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byFrontID = Scaleway.Loadbalancer.GetACLs.Invoke(new()
        ///     {
        ///         FrontendId = scaleway_lb_frontend.Frt01.Id,
        ///     });
        /// 
        ///     var byFrontIDAndName = Scaleway.Loadbalancer.GetACLs.Invoke(new()
        ///     {
        ///         FrontendId = scaleway_lb_frontend.Frt01.Id,
        ///         Name = "tf-acls-datasource",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetACLsResult> Invoke(GetACLsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetACLsResult>("scaleway:loadbalancer/getACLs:getACLs", args ?? new GetACLsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetACLsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The frontend ID this ACL is attached to. ACLs with a frontend ID like it are listed.
        /// &gt; **Important:** LB Frontends' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
        /// </summary>
        [Input("frontendId", required: true)]
        public string FrontendId { get; set; } = null!;

        /// <summary>
        /// The ACL name used as filter. ACLs with a name like it are listed.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// `zone`) The zone in which ACLs exist.
        /// </summary>
        [Input("zone")]
        public string? Zone { get; set; }

        public GetACLsArgs()
        {
        }
        public static new GetACLsArgs Empty => new GetACLsArgs();
    }

    public sealed class GetACLsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The frontend ID this ACL is attached to. ACLs with a frontend ID like it are listed.
        /// &gt; **Important:** LB Frontends' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
        /// </summary>
        [Input("frontendId", required: true)]
        public Input<string> FrontendId { get; set; } = null!;

        /// <summary>
        /// The ACL name used as filter. ACLs with a name like it are listed.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// `zone`) The zone in which ACLs exist.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GetACLsInvokeArgs()
        {
        }
        public static new GetACLsInvokeArgs Empty => new GetACLsInvokeArgs();
    }


    [OutputType]
    public sealed class GetACLsResult
    {
        /// <summary>
        /// List of found ACLs
        /// </summary>
        public readonly ImmutableArray<Outputs.GetACLsAclResult> Acls;
        public readonly string FrontendId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Name;
        public readonly string OrganizationId;
        public readonly string ProjectId;
        public readonly string Zone;

        [OutputConstructor]
        private GetACLsResult(
            ImmutableArray<Outputs.GetACLsAclResult> acls,

            string frontendId,

            string id,

            string? name,

            string organizationId,

            string projectId,

            string zone)
        {
            Acls = acls;
            FrontendId = frontendId;
            Id = id;
            Name = name;
            OrganizationId = organizationId;
            ProjectId = projectId;
            Zone = zone;
        }
    }
}
