// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scaleway.Mnq
{
    public static class GetSQS
    {
        /// <summary>
        /// Gets information about SQS for a project
        /// 
        /// ## Examples
        /// 
        /// ### Basic
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = Scaleway.Mnq.GetSQS.Invoke();
        /// 
        ///     var forProject = Scaleway.Mnq.GetSQS.Invoke(new()
        ///     {
        ///         ProjectId = scaleway_account_project.Main.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSQSResult> InvokeAsync(GetSQSArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSQSResult>("scaleway:mnq/getSQS:getSQS", args ?? new GetSQSArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about SQS for a project
        /// 
        /// ## Examples
        /// 
        /// ### Basic
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var main = Scaleway.Mnq.GetSQS.Invoke();
        /// 
        ///     var forProject = Scaleway.Mnq.GetSQS.Invoke(new()
        ///     {
        ///         ProjectId = scaleway_account_project.Main.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSQSResult> Invoke(GetSQSInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSQSResult>("scaleway:mnq/getSQS:getSQS", args ?? new GetSQSInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSQSArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// `project_id`) The ID of the project for which sqs is enabled.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// `region`). The region in which sqs is enabled.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetSQSArgs()
        {
        }
        public static new GetSQSArgs Empty => new GetSQSArgs();
    }

    public sealed class GetSQSInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// `project_id`) The ID of the project for which sqs is enabled.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// `region`). The region in which sqs is enabled.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetSQSInvokeArgs()
        {
        }
        public static new GetSQSInvokeArgs Empty => new GetSQSInvokeArgs();
    }


    [OutputType]
    public sealed class GetSQSResult
    {
        /// <summary>
        /// The endpoint of the SQS service for this project.
        /// </summary>
        public readonly string Endpoint;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? ProjectId;
        public readonly string? Region;

        [OutputConstructor]
        private GetSQSResult(
            string endpoint,

            string id,

            string? projectId,

            string? region)
        {
            Endpoint = endpoint;
            Id = id;
            ProjectId = projectId;
            Region = region;
        }
    }
}
