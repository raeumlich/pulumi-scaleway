// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scaleway.Mnq
{
    /// <summary>
    /// Creates and manages Scaleway Messaging and queuing SQS Queues.
    /// For further information please check
    /// our [documentation](https://www.scaleway.com/en/docs/serverless/messaging/how-to/create-manage-queues/)
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scaleway = Pulumi.Scaleway;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var mainSQS = new Scaleway.Mnq.SQS("mainSQS");
    /// 
    ///     var mainSQSCredentials = new Scaleway.Mnq.SQSCredentials("mainSQSCredentials", new()
    ///     {
    ///         ProjectId = mainSQS.ProjectId,
    ///         Permissions = new Scaleway.Mnq.Inputs.SQSCredentialsPermissionsArgs
    ///         {
    ///             CanManage = true,
    ///             CanReceive = false,
    ///             CanPublish = false,
    ///         },
    ///     });
    /// 
    ///     var mainSQSQueue = new Scaleway.Mnq.SQSQueue("mainSQSQueue", new()
    ///     {
    ///         ProjectId = mainSQS.ProjectId,
    ///         SqsEndpoint = mainSQS.Endpoint,
    ///         AccessKey = mainSQSCredentials.AccessKey,
    ///         SecretKey = mainSQSCredentials.SecretKey,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// </summary>
    [ScalewayResourceType("scaleway:mnq/sQSQueue:SQSQueue")]
    public partial class SQSQueue : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The access key of the SQS queue.
        /// </summary>
        [Output("accessKey")]
        public Output<string> AccessKey { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to enable content-based deduplication. Defaults to `false`.
        /// </summary>
        [Output("contentBasedDeduplication")]
        public Output<bool> ContentBasedDeduplication { get; private set; } = null!;

        /// <summary>
        /// Whether the queue is a FIFO queue. If true, the queue name must end with .fifo. Defaults to `false`.
        /// </summary>
        [Output("fifoQueue")]
        public Output<bool> FifoQueue { get; private set; } = null!;

        /// <summary>
        /// The number of seconds the queue retains a message. Must be between 60 and 1_209_600. Defaults to 345_600.
        /// </summary>
        [Output("messageMaxAge")]
        public Output<int?> MessageMaxAge { get; private set; } = null!;

        /// <summary>
        /// The maximum size of a message. Should be in bytes. Must be between 1024 and 262_144. Defaults to 262_144.
        /// </summary>
        [Output("messageMaxSize")]
        public Output<int?> MessageMaxSize { get; private set; } = null!;

        /// <summary>
        /// The unique name of the sqs queue. Either `name` or `name_prefix` is required. Conflicts with `name_prefix`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
        /// </summary>
        [Output("namePrefix")]
        public Output<string> NamePrefix { get; private set; } = null!;

        /// <summary>
        /// `project_id`) The ID of the project the sqs is enabled for.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The number of seconds to wait for a message to arrive in the queue before returning. Must be between 0 and 20. Defaults to 0.
        /// </summary>
        [Output("receiveWaitTimeSeconds")]
        public Output<int?> ReceiveWaitTimeSeconds { get; private set; } = null!;

        /// <summary>
        /// `region`). The region in which sqs is enabled.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The secret key of the SQS queue.
        /// </summary>
        [Output("secretKey")]
        public Output<string> SecretKey { get; private set; } = null!;

        /// <summary>
        /// The endpoint of the SQS queue. Can contain a {region} placeholder. Defaults to `https://sqs.mnq.{region}.scaleway.com`.
        /// </summary>
        [Output("sqsEndpoint")]
        public Output<string?> SqsEndpoint { get; private set; } = null!;

        /// <summary>
        /// The URL of the queue.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        /// <summary>
        /// The number of seconds a message is hidden from other consumers. Must be between 0 and 43_200. Defaults to 30.
        /// </summary>
        [Output("visibilityTimeoutSeconds")]
        public Output<int?> VisibilityTimeoutSeconds { get; private set; } = null!;


        /// <summary>
        /// Create a SQSQueue resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SQSQueue(string name, SQSQueueArgs args, CustomResourceOptions? options = null)
            : base("scaleway:mnq/sQSQueue:SQSQueue", name, args ?? new SQSQueueArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SQSQueue(string name, Input<string> id, SQSQueueState? state = null, CustomResourceOptions? options = null)
            : base("scaleway:mnq/sQSQueue:SQSQueue", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/raeumlich/pulumi-scaleway/releases/",
                AdditionalSecretOutputs =
                {
                    "accessKey",
                    "secretKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SQSQueue resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SQSQueue Get(string name, Input<string> id, SQSQueueState? state = null, CustomResourceOptions? options = null)
        {
            return new SQSQueue(name, id, state, options);
        }
    }

    public sealed class SQSQueueArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessKey", required: true)]
        private Input<string>? _accessKey;

        /// <summary>
        /// The access key of the SQS queue.
        /// </summary>
        public Input<string>? AccessKey
        {
            get => _accessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies whether to enable content-based deduplication. Defaults to `false`.
        /// </summary>
        [Input("contentBasedDeduplication")]
        public Input<bool>? ContentBasedDeduplication { get; set; }

        /// <summary>
        /// Whether the queue is a FIFO queue. If true, the queue name must end with .fifo. Defaults to `false`.
        /// </summary>
        [Input("fifoQueue")]
        public Input<bool>? FifoQueue { get; set; }

        /// <summary>
        /// The number of seconds the queue retains a message. Must be between 60 and 1_209_600. Defaults to 345_600.
        /// </summary>
        [Input("messageMaxAge")]
        public Input<int>? MessageMaxAge { get; set; }

        /// <summary>
        /// The maximum size of a message. Should be in bytes. Must be between 1024 and 262_144. Defaults to 262_144.
        /// </summary>
        [Input("messageMaxSize")]
        public Input<int>? MessageMaxSize { get; set; }

        /// <summary>
        /// The unique name of the sqs queue. Either `name` or `name_prefix` is required. Conflicts with `name_prefix`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
        /// </summary>
        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        /// <summary>
        /// `project_id`) The ID of the project the sqs is enabled for.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The number of seconds to wait for a message to arrive in the queue before returning. Must be between 0 and 20. Defaults to 0.
        /// </summary>
        [Input("receiveWaitTimeSeconds")]
        public Input<int>? ReceiveWaitTimeSeconds { get; set; }

        /// <summary>
        /// `region`). The region in which sqs is enabled.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("secretKey", required: true)]
        private Input<string>? _secretKey;

        /// <summary>
        /// The secret key of the SQS queue.
        /// </summary>
        public Input<string>? SecretKey
        {
            get => _secretKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The endpoint of the SQS queue. Can contain a {region} placeholder. Defaults to `https://sqs.mnq.{region}.scaleway.com`.
        /// </summary>
        [Input("sqsEndpoint")]
        public Input<string>? SqsEndpoint { get; set; }

        /// <summary>
        /// The number of seconds a message is hidden from other consumers. Must be between 0 and 43_200. Defaults to 30.
        /// </summary>
        [Input("visibilityTimeoutSeconds")]
        public Input<int>? VisibilityTimeoutSeconds { get; set; }

        public SQSQueueArgs()
        {
        }
        public static new SQSQueueArgs Empty => new SQSQueueArgs();
    }

    public sealed class SQSQueueState : global::Pulumi.ResourceArgs
    {
        [Input("accessKey")]
        private Input<string>? _accessKey;

        /// <summary>
        /// The access key of the SQS queue.
        /// </summary>
        public Input<string>? AccessKey
        {
            get => _accessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies whether to enable content-based deduplication. Defaults to `false`.
        /// </summary>
        [Input("contentBasedDeduplication")]
        public Input<bool>? ContentBasedDeduplication { get; set; }

        /// <summary>
        /// Whether the queue is a FIFO queue. If true, the queue name must end with .fifo. Defaults to `false`.
        /// </summary>
        [Input("fifoQueue")]
        public Input<bool>? FifoQueue { get; set; }

        /// <summary>
        /// The number of seconds the queue retains a message. Must be between 60 and 1_209_600. Defaults to 345_600.
        /// </summary>
        [Input("messageMaxAge")]
        public Input<int>? MessageMaxAge { get; set; }

        /// <summary>
        /// The maximum size of a message. Should be in bytes. Must be between 1024 and 262_144. Defaults to 262_144.
        /// </summary>
        [Input("messageMaxSize")]
        public Input<int>? MessageMaxSize { get; set; }

        /// <summary>
        /// The unique name of the sqs queue. Either `name` or `name_prefix` is required. Conflicts with `name_prefix`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
        /// </summary>
        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        /// <summary>
        /// `project_id`) The ID of the project the sqs is enabled for.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The number of seconds to wait for a message to arrive in the queue before returning. Must be between 0 and 20. Defaults to 0.
        /// </summary>
        [Input("receiveWaitTimeSeconds")]
        public Input<int>? ReceiveWaitTimeSeconds { get; set; }

        /// <summary>
        /// `region`). The region in which sqs is enabled.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("secretKey")]
        private Input<string>? _secretKey;

        /// <summary>
        /// The secret key of the SQS queue.
        /// </summary>
        public Input<string>? SecretKey
        {
            get => _secretKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The endpoint of the SQS queue. Can contain a {region} placeholder. Defaults to `https://sqs.mnq.{region}.scaleway.com`.
        /// </summary>
        [Input("sqsEndpoint")]
        public Input<string>? SqsEndpoint { get; set; }

        /// <summary>
        /// The URL of the queue.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// The number of seconds a message is hidden from other consumers. Must be between 0 and 43_200. Defaults to 30.
        /// </summary>
        [Input("visibilityTimeoutSeconds")]
        public Input<int>? VisibilityTimeoutSeconds { get; set; }

        public SQSQueueState()
        {
        }
        public static new SQSQueueState Empty => new SQSQueueState();
    }
}
