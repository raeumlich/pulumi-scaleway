// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scaleway.Dns
{
    public static class GetRecord
    {
        /// <summary>
        /// Gets information about a domain record.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byContent = Scaleway.Dns.GetRecord.Invoke(new()
        ///     {
        ///         Data = "1.2.3.4",
        ///         DnsZone = "domain.tld",
        ///         Name = "www",
        ///         Type = "A",
        ///     });
        /// 
        ///     var byId = Scaleway.Dns.GetRecord.Invoke(new()
        ///     {
        ///         DnsZone = "domain.tld",
        ///         RecordId = "11111111-1111-1111-1111-111111111111",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetRecordResult> InvokeAsync(GetRecordArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRecordResult>("scaleway:dns/getRecord:getRecord", args ?? new GetRecordArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a domain record.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scaleway = Pulumi.Scaleway;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byContent = Scaleway.Dns.GetRecord.Invoke(new()
        ///     {
        ///         Data = "1.2.3.4",
        ///         DnsZone = "domain.tld",
        ///         Name = "www",
        ///         Type = "A",
        ///     });
        /// 
        ///     var byId = Scaleway.Dns.GetRecord.Invoke(new()
        ///     {
        ///         DnsZone = "domain.tld",
        ///         RecordId = "11111111-1111-1111-1111-111111111111",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetRecordResult> Invoke(GetRecordInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRecordResult>("scaleway:dns/getRecord:getRecord", args ?? new GetRecordInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRecordArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
        /// Cannot be used with `record_id`.
        /// </summary>
        [Input("data")]
        public string? Data { get; set; }

        /// <summary>
        /// The IP address.
        /// </summary>
        [Input("dnsZone")]
        public string? DnsZone { get; set; }

        /// <summary>
        /// The name of the record (can be an empty string for a root record).
        /// Cannot be used with `record_id`.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// `project_id`) The ID of the project the domain is associated with.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// The record ID.
        /// Cannot be used with `name`, `type` and `data`.
        /// </summary>
        [Input("recordId")]
        public string? RecordId { get; set; }

        /// <summary>
        /// The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).
        /// Cannot be used with `record_id`.
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        public GetRecordArgs()
        {
        }
        public static new GetRecordArgs Empty => new GetRecordArgs();
    }

    public sealed class GetRecordInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
        /// Cannot be used with `record_id`.
        /// </summary>
        [Input("data")]
        public Input<string>? Data { get; set; }

        /// <summary>
        /// The IP address.
        /// </summary>
        [Input("dnsZone")]
        public Input<string>? DnsZone { get; set; }

        /// <summary>
        /// The name of the record (can be an empty string for a root record).
        /// Cannot be used with `record_id`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// `project_id`) The ID of the project the domain is associated with.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The record ID.
        /// Cannot be used with `name`, `type` and `data`.
        /// </summary>
        [Input("recordId")]
        public Input<string>? RecordId { get; set; }

        /// <summary>
        /// The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).
        /// Cannot be used with `record_id`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetRecordInvokeArgs()
        {
        }
        public static new GetRecordInvokeArgs Empty => new GetRecordInvokeArgs();
    }


    [OutputType]
    public sealed class GetRecordResult
    {
        public readonly string? Data;
        public readonly string? DnsZone;
        public readonly string Fqdn;
        /// <summary>
        /// Dynamic record base on user geolocalisation (More information about dynamic records)
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRecordGeoIpResult> GeoIps;
        /// <summary>
        /// Dynamic record base on URL resolve (More information about dynamic records)
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRecordHttpServiceResult> HttpServices;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool KeepEmptyZone;
        public readonly string? Name;
        /// <summary>
        /// The priority of the record (mostly used with an `MX` record)
        /// </summary>
        public readonly int Priority;
        public readonly string? ProjectId;
        public readonly string? RecordId;
        public readonly bool RootZone;
        /// <summary>
        /// Time To Live of the record in seconds.
        /// </summary>
        public readonly int Ttl;
        public readonly string? Type;
        /// <summary>
        /// Dynamic record based on the clientâ€™s (resolver) subnet (More information about dynamic records)
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRecordViewResult> Views;
        /// <summary>
        /// Dynamic record base on IP weights (More information about dynamic records)
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRecordWeightedResult> Weighteds;

        [OutputConstructor]
        private GetRecordResult(
            string? data,

            string? dnsZone,

            string fqdn,

            ImmutableArray<Outputs.GetRecordGeoIpResult> geoIps,

            ImmutableArray<Outputs.GetRecordHttpServiceResult> httpServices,

            string id,

            bool keepEmptyZone,

            string? name,

            int priority,

            string? projectId,

            string? recordId,

            bool rootZone,

            int ttl,

            string? type,

            ImmutableArray<Outputs.GetRecordViewResult> views,

            ImmutableArray<Outputs.GetRecordWeightedResult> weighteds)
        {
            Data = data;
            DnsZone = dnsZone;
            Fqdn = fqdn;
            GeoIps = geoIps;
            HttpServices = httpServices;
            Id = id;
            KeepEmptyZone = keepEmptyZone;
            Name = name;
            Priority = priority;
            ProjectId = projectId;
            RecordId = recordId;
            RootZone = rootZone;
            Ttl = ttl;
            Type = type;
            Views = views;
            Weighteds = weighteds;
        }
    }
}
