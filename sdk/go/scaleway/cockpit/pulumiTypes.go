// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cockpit

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

var _ = internal.GetEnvOrDefault

type CockpitEndpoint struct {
	// The alertmanager URL.
	AlertmanagerUrl *string `pulumi:"alertmanagerUrl"`
	// The grafana URL.
	GrafanaUrl *string `pulumi:"grafanaUrl"`
	// The logs URL.
	LogsUrl *string `pulumi:"logsUrl"`
	// The metrics URL.
	MetricsUrl *string `pulumi:"metricsUrl"`
	// The traces URL.
	TracesUrl *string `pulumi:"tracesUrl"`
}

// CockpitEndpointInput is an input type that accepts CockpitEndpointArgs and CockpitEndpointOutput values.
// You can construct a concrete instance of `CockpitEndpointInput` via:
//
//	CockpitEndpointArgs{...}
type CockpitEndpointInput interface {
	pulumi.Input

	ToCockpitEndpointOutput() CockpitEndpointOutput
	ToCockpitEndpointOutputWithContext(context.Context) CockpitEndpointOutput
}

type CockpitEndpointArgs struct {
	// The alertmanager URL.
	AlertmanagerUrl pulumi.StringPtrInput `pulumi:"alertmanagerUrl"`
	// The grafana URL.
	GrafanaUrl pulumi.StringPtrInput `pulumi:"grafanaUrl"`
	// The logs URL.
	LogsUrl pulumi.StringPtrInput `pulumi:"logsUrl"`
	// The metrics URL.
	MetricsUrl pulumi.StringPtrInput `pulumi:"metricsUrl"`
	// The traces URL.
	TracesUrl pulumi.StringPtrInput `pulumi:"tracesUrl"`
}

func (CockpitEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CockpitEndpoint)(nil)).Elem()
}

func (i CockpitEndpointArgs) ToCockpitEndpointOutput() CockpitEndpointOutput {
	return i.ToCockpitEndpointOutputWithContext(context.Background())
}

func (i CockpitEndpointArgs) ToCockpitEndpointOutputWithContext(ctx context.Context) CockpitEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CockpitEndpointOutput)
}

// CockpitEndpointArrayInput is an input type that accepts CockpitEndpointArray and CockpitEndpointArrayOutput values.
// You can construct a concrete instance of `CockpitEndpointArrayInput` via:
//
//	CockpitEndpointArray{ CockpitEndpointArgs{...} }
type CockpitEndpointArrayInput interface {
	pulumi.Input

	ToCockpitEndpointArrayOutput() CockpitEndpointArrayOutput
	ToCockpitEndpointArrayOutputWithContext(context.Context) CockpitEndpointArrayOutput
}

type CockpitEndpointArray []CockpitEndpointInput

func (CockpitEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CockpitEndpoint)(nil)).Elem()
}

func (i CockpitEndpointArray) ToCockpitEndpointArrayOutput() CockpitEndpointArrayOutput {
	return i.ToCockpitEndpointArrayOutputWithContext(context.Background())
}

func (i CockpitEndpointArray) ToCockpitEndpointArrayOutputWithContext(ctx context.Context) CockpitEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CockpitEndpointArrayOutput)
}

type CockpitEndpointOutput struct{ *pulumi.OutputState }

func (CockpitEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CockpitEndpoint)(nil)).Elem()
}

func (o CockpitEndpointOutput) ToCockpitEndpointOutput() CockpitEndpointOutput {
	return o
}

func (o CockpitEndpointOutput) ToCockpitEndpointOutputWithContext(ctx context.Context) CockpitEndpointOutput {
	return o
}

// The alertmanager URL.
func (o CockpitEndpointOutput) AlertmanagerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CockpitEndpoint) *string { return v.AlertmanagerUrl }).(pulumi.StringPtrOutput)
}

// The grafana URL.
func (o CockpitEndpointOutput) GrafanaUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CockpitEndpoint) *string { return v.GrafanaUrl }).(pulumi.StringPtrOutput)
}

// The logs URL.
func (o CockpitEndpointOutput) LogsUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CockpitEndpoint) *string { return v.LogsUrl }).(pulumi.StringPtrOutput)
}

// The metrics URL.
func (o CockpitEndpointOutput) MetricsUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CockpitEndpoint) *string { return v.MetricsUrl }).(pulumi.StringPtrOutput)
}

// The traces URL.
func (o CockpitEndpointOutput) TracesUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CockpitEndpoint) *string { return v.TracesUrl }).(pulumi.StringPtrOutput)
}

type CockpitEndpointArrayOutput struct{ *pulumi.OutputState }

func (CockpitEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CockpitEndpoint)(nil)).Elem()
}

func (o CockpitEndpointArrayOutput) ToCockpitEndpointArrayOutput() CockpitEndpointArrayOutput {
	return o
}

func (o CockpitEndpointArrayOutput) ToCockpitEndpointArrayOutputWithContext(ctx context.Context) CockpitEndpointArrayOutput {
	return o
}

func (o CockpitEndpointArrayOutput) Index(i pulumi.IntInput) CockpitEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CockpitEndpoint {
		return vs[0].([]CockpitEndpoint)[vs[1].(int)]
	}).(CockpitEndpointOutput)
}

type TokenScopes struct {
	// Query logs.
	QueryLogs *bool `pulumi:"queryLogs"`
	// Query metrics.
	QueryMetrics *bool `pulumi:"queryMetrics"`
	// Query traces.
	QueryTraces *bool `pulumi:"queryTraces"`
	// Setup alerts.
	SetupAlerts *bool `pulumi:"setupAlerts"`
	// Setup logs rules.
	SetupLogsRules *bool `pulumi:"setupLogsRules"`
	// Setup metrics rules.
	SetupMetricsRules *bool `pulumi:"setupMetricsRules"`
	// Write logs.
	WriteLogs *bool `pulumi:"writeLogs"`
	// Write metrics.
	WriteMetrics *bool `pulumi:"writeMetrics"`
	// Write traces.
	WriteTraces *bool `pulumi:"writeTraces"`
}

// TokenScopesInput is an input type that accepts TokenScopesArgs and TokenScopesOutput values.
// You can construct a concrete instance of `TokenScopesInput` via:
//
//	TokenScopesArgs{...}
type TokenScopesInput interface {
	pulumi.Input

	ToTokenScopesOutput() TokenScopesOutput
	ToTokenScopesOutputWithContext(context.Context) TokenScopesOutput
}

type TokenScopesArgs struct {
	// Query logs.
	QueryLogs pulumi.BoolPtrInput `pulumi:"queryLogs"`
	// Query metrics.
	QueryMetrics pulumi.BoolPtrInput `pulumi:"queryMetrics"`
	// Query traces.
	QueryTraces pulumi.BoolPtrInput `pulumi:"queryTraces"`
	// Setup alerts.
	SetupAlerts pulumi.BoolPtrInput `pulumi:"setupAlerts"`
	// Setup logs rules.
	SetupLogsRules pulumi.BoolPtrInput `pulumi:"setupLogsRules"`
	// Setup metrics rules.
	SetupMetricsRules pulumi.BoolPtrInput `pulumi:"setupMetricsRules"`
	// Write logs.
	WriteLogs pulumi.BoolPtrInput `pulumi:"writeLogs"`
	// Write metrics.
	WriteMetrics pulumi.BoolPtrInput `pulumi:"writeMetrics"`
	// Write traces.
	WriteTraces pulumi.BoolPtrInput `pulumi:"writeTraces"`
}

func (TokenScopesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenScopes)(nil)).Elem()
}

func (i TokenScopesArgs) ToTokenScopesOutput() TokenScopesOutput {
	return i.ToTokenScopesOutputWithContext(context.Background())
}

func (i TokenScopesArgs) ToTokenScopesOutputWithContext(ctx context.Context) TokenScopesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenScopesOutput)
}

func (i TokenScopesArgs) ToTokenScopesPtrOutput() TokenScopesPtrOutput {
	return i.ToTokenScopesPtrOutputWithContext(context.Background())
}

func (i TokenScopesArgs) ToTokenScopesPtrOutputWithContext(ctx context.Context) TokenScopesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenScopesOutput).ToTokenScopesPtrOutputWithContext(ctx)
}

// TokenScopesPtrInput is an input type that accepts TokenScopesArgs, TokenScopesPtr and TokenScopesPtrOutput values.
// You can construct a concrete instance of `TokenScopesPtrInput` via:
//
//	        TokenScopesArgs{...}
//
//	or:
//
//	        nil
type TokenScopesPtrInput interface {
	pulumi.Input

	ToTokenScopesPtrOutput() TokenScopesPtrOutput
	ToTokenScopesPtrOutputWithContext(context.Context) TokenScopesPtrOutput
}

type tokenScopesPtrType TokenScopesArgs

func TokenScopesPtr(v *TokenScopesArgs) TokenScopesPtrInput {
	return (*tokenScopesPtrType)(v)
}

func (*tokenScopesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenScopes)(nil)).Elem()
}

func (i *tokenScopesPtrType) ToTokenScopesPtrOutput() TokenScopesPtrOutput {
	return i.ToTokenScopesPtrOutputWithContext(context.Background())
}

func (i *tokenScopesPtrType) ToTokenScopesPtrOutputWithContext(ctx context.Context) TokenScopesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenScopesPtrOutput)
}

type TokenScopesOutput struct{ *pulumi.OutputState }

func (TokenScopesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenScopes)(nil)).Elem()
}

func (o TokenScopesOutput) ToTokenScopesOutput() TokenScopesOutput {
	return o
}

func (o TokenScopesOutput) ToTokenScopesOutputWithContext(ctx context.Context) TokenScopesOutput {
	return o
}

func (o TokenScopesOutput) ToTokenScopesPtrOutput() TokenScopesPtrOutput {
	return o.ToTokenScopesPtrOutputWithContext(context.Background())
}

func (o TokenScopesOutput) ToTokenScopesPtrOutputWithContext(ctx context.Context) TokenScopesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TokenScopes) *TokenScopes {
		return &v
	}).(TokenScopesPtrOutput)
}

// Query logs.
func (o TokenScopesOutput) QueryLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TokenScopes) *bool { return v.QueryLogs }).(pulumi.BoolPtrOutput)
}

// Query metrics.
func (o TokenScopesOutput) QueryMetrics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TokenScopes) *bool { return v.QueryMetrics }).(pulumi.BoolPtrOutput)
}

// Query traces.
func (o TokenScopesOutput) QueryTraces() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TokenScopes) *bool { return v.QueryTraces }).(pulumi.BoolPtrOutput)
}

// Setup alerts.
func (o TokenScopesOutput) SetupAlerts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TokenScopes) *bool { return v.SetupAlerts }).(pulumi.BoolPtrOutput)
}

// Setup logs rules.
func (o TokenScopesOutput) SetupLogsRules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TokenScopes) *bool { return v.SetupLogsRules }).(pulumi.BoolPtrOutput)
}

// Setup metrics rules.
func (o TokenScopesOutput) SetupMetricsRules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TokenScopes) *bool { return v.SetupMetricsRules }).(pulumi.BoolPtrOutput)
}

// Write logs.
func (o TokenScopesOutput) WriteLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TokenScopes) *bool { return v.WriteLogs }).(pulumi.BoolPtrOutput)
}

// Write metrics.
func (o TokenScopesOutput) WriteMetrics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TokenScopes) *bool { return v.WriteMetrics }).(pulumi.BoolPtrOutput)
}

// Write traces.
func (o TokenScopesOutput) WriteTraces() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TokenScopes) *bool { return v.WriteTraces }).(pulumi.BoolPtrOutput)
}

type TokenScopesPtrOutput struct{ *pulumi.OutputState }

func (TokenScopesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenScopes)(nil)).Elem()
}

func (o TokenScopesPtrOutput) ToTokenScopesPtrOutput() TokenScopesPtrOutput {
	return o
}

func (o TokenScopesPtrOutput) ToTokenScopesPtrOutputWithContext(ctx context.Context) TokenScopesPtrOutput {
	return o
}

func (o TokenScopesPtrOutput) Elem() TokenScopesOutput {
	return o.ApplyT(func(v *TokenScopes) TokenScopes {
		if v != nil {
			return *v
		}
		var ret TokenScopes
		return ret
	}).(TokenScopesOutput)
}

// Query logs.
func (o TokenScopesPtrOutput) QueryLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TokenScopes) *bool {
		if v == nil {
			return nil
		}
		return v.QueryLogs
	}).(pulumi.BoolPtrOutput)
}

// Query metrics.
func (o TokenScopesPtrOutput) QueryMetrics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TokenScopes) *bool {
		if v == nil {
			return nil
		}
		return v.QueryMetrics
	}).(pulumi.BoolPtrOutput)
}

// Query traces.
func (o TokenScopesPtrOutput) QueryTraces() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TokenScopes) *bool {
		if v == nil {
			return nil
		}
		return v.QueryTraces
	}).(pulumi.BoolPtrOutput)
}

// Setup alerts.
func (o TokenScopesPtrOutput) SetupAlerts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TokenScopes) *bool {
		if v == nil {
			return nil
		}
		return v.SetupAlerts
	}).(pulumi.BoolPtrOutput)
}

// Setup logs rules.
func (o TokenScopesPtrOutput) SetupLogsRules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TokenScopes) *bool {
		if v == nil {
			return nil
		}
		return v.SetupLogsRules
	}).(pulumi.BoolPtrOutput)
}

// Setup metrics rules.
func (o TokenScopesPtrOutput) SetupMetricsRules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TokenScopes) *bool {
		if v == nil {
			return nil
		}
		return v.SetupMetricsRules
	}).(pulumi.BoolPtrOutput)
}

// Write logs.
func (o TokenScopesPtrOutput) WriteLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TokenScopes) *bool {
		if v == nil {
			return nil
		}
		return v.WriteLogs
	}).(pulumi.BoolPtrOutput)
}

// Write metrics.
func (o TokenScopesPtrOutput) WriteMetrics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TokenScopes) *bool {
		if v == nil {
			return nil
		}
		return v.WriteMetrics
	}).(pulumi.BoolPtrOutput)
}

// Write traces.
func (o TokenScopesPtrOutput) WriteTraces() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TokenScopes) *bool {
		if v == nil {
			return nil
		}
		return v.WriteTraces
	}).(pulumi.BoolPtrOutput)
}

type GetCockpitEndpoint struct {
	// The alertmanager URL
	AlertmanagerUrl string `pulumi:"alertmanagerUrl"`
	// The grafana URL
	GrafanaUrl string `pulumi:"grafanaUrl"`
	// The logs URL
	LogsUrl string `pulumi:"logsUrl"`
	// The metrics URL
	MetricsUrl string `pulumi:"metricsUrl"`
	TracesUrl  string `pulumi:"tracesUrl"`
}

// GetCockpitEndpointInput is an input type that accepts GetCockpitEndpointArgs and GetCockpitEndpointOutput values.
// You can construct a concrete instance of `GetCockpitEndpointInput` via:
//
//	GetCockpitEndpointArgs{...}
type GetCockpitEndpointInput interface {
	pulumi.Input

	ToGetCockpitEndpointOutput() GetCockpitEndpointOutput
	ToGetCockpitEndpointOutputWithContext(context.Context) GetCockpitEndpointOutput
}

type GetCockpitEndpointArgs struct {
	// The alertmanager URL
	AlertmanagerUrl pulumi.StringInput `pulumi:"alertmanagerUrl"`
	// The grafana URL
	GrafanaUrl pulumi.StringInput `pulumi:"grafanaUrl"`
	// The logs URL
	LogsUrl pulumi.StringInput `pulumi:"logsUrl"`
	// The metrics URL
	MetricsUrl pulumi.StringInput `pulumi:"metricsUrl"`
	TracesUrl  pulumi.StringInput `pulumi:"tracesUrl"`
}

func (GetCockpitEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCockpitEndpoint)(nil)).Elem()
}

func (i GetCockpitEndpointArgs) ToGetCockpitEndpointOutput() GetCockpitEndpointOutput {
	return i.ToGetCockpitEndpointOutputWithContext(context.Background())
}

func (i GetCockpitEndpointArgs) ToGetCockpitEndpointOutputWithContext(ctx context.Context) GetCockpitEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCockpitEndpointOutput)
}

// GetCockpitEndpointArrayInput is an input type that accepts GetCockpitEndpointArray and GetCockpitEndpointArrayOutput values.
// You can construct a concrete instance of `GetCockpitEndpointArrayInput` via:
//
//	GetCockpitEndpointArray{ GetCockpitEndpointArgs{...} }
type GetCockpitEndpointArrayInput interface {
	pulumi.Input

	ToGetCockpitEndpointArrayOutput() GetCockpitEndpointArrayOutput
	ToGetCockpitEndpointArrayOutputWithContext(context.Context) GetCockpitEndpointArrayOutput
}

type GetCockpitEndpointArray []GetCockpitEndpointInput

func (GetCockpitEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCockpitEndpoint)(nil)).Elem()
}

func (i GetCockpitEndpointArray) ToGetCockpitEndpointArrayOutput() GetCockpitEndpointArrayOutput {
	return i.ToGetCockpitEndpointArrayOutputWithContext(context.Background())
}

func (i GetCockpitEndpointArray) ToGetCockpitEndpointArrayOutputWithContext(ctx context.Context) GetCockpitEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCockpitEndpointArrayOutput)
}

type GetCockpitEndpointOutput struct{ *pulumi.OutputState }

func (GetCockpitEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCockpitEndpoint)(nil)).Elem()
}

func (o GetCockpitEndpointOutput) ToGetCockpitEndpointOutput() GetCockpitEndpointOutput {
	return o
}

func (o GetCockpitEndpointOutput) ToGetCockpitEndpointOutputWithContext(ctx context.Context) GetCockpitEndpointOutput {
	return o
}

// The alertmanager URL
func (o GetCockpitEndpointOutput) AlertmanagerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetCockpitEndpoint) string { return v.AlertmanagerUrl }).(pulumi.StringOutput)
}

// The grafana URL
func (o GetCockpitEndpointOutput) GrafanaUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetCockpitEndpoint) string { return v.GrafanaUrl }).(pulumi.StringOutput)
}

// The logs URL
func (o GetCockpitEndpointOutput) LogsUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetCockpitEndpoint) string { return v.LogsUrl }).(pulumi.StringOutput)
}

// The metrics URL
func (o GetCockpitEndpointOutput) MetricsUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetCockpitEndpoint) string { return v.MetricsUrl }).(pulumi.StringOutput)
}

func (o GetCockpitEndpointOutput) TracesUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetCockpitEndpoint) string { return v.TracesUrl }).(pulumi.StringOutput)
}

type GetCockpitEndpointArrayOutput struct{ *pulumi.OutputState }

func (GetCockpitEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCockpitEndpoint)(nil)).Elem()
}

func (o GetCockpitEndpointArrayOutput) ToGetCockpitEndpointArrayOutput() GetCockpitEndpointArrayOutput {
	return o
}

func (o GetCockpitEndpointArrayOutput) ToGetCockpitEndpointArrayOutputWithContext(ctx context.Context) GetCockpitEndpointArrayOutput {
	return o
}

func (o GetCockpitEndpointArrayOutput) Index(i pulumi.IntInput) GetCockpitEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCockpitEndpoint {
		return vs[0].([]GetCockpitEndpoint)[vs[1].(int)]
	}).(GetCockpitEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CockpitEndpointInput)(nil)).Elem(), CockpitEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CockpitEndpointArrayInput)(nil)).Elem(), CockpitEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenScopesInput)(nil)).Elem(), TokenScopesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenScopesPtrInput)(nil)).Elem(), TokenScopesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCockpitEndpointInput)(nil)).Elem(), GetCockpitEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCockpitEndpointArrayInput)(nil)).Elem(), GetCockpitEndpointArray{})
	pulumi.RegisterOutputType(CockpitEndpointOutput{})
	pulumi.RegisterOutputType(CockpitEndpointArrayOutput{})
	pulumi.RegisterOutputType(TokenScopesOutput{})
	pulumi.RegisterOutputType(TokenScopesPtrOutput{})
	pulumi.RegisterOutputType(GetCockpitEndpointOutput{})
	pulumi.RegisterOutputType(GetCockpitEndpointArrayOutput{})
}
