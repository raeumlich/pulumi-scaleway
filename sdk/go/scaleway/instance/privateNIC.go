// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package instance

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Instance Private NICs. For more information, see
// [the documentation](https://developers.scaleway.com/en/products/instance/api/#private-nics-a42eea).
//
// ## Example Usage
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/instance"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := instance.NewPrivateNIC(ctx, "pnic01", &instance.PrivateNICArgs{
//				PrivateNetworkId: pulumi.String("fr-par-1/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
//				ServerId:         pulumi.String("fr-par-1/11111111-1111-1111-1111-111111111111"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### With zone
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/instance"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			pn01, err := vpc.NewPrivateNetwork(ctx, "pn01", &vpc.PrivateNetworkArgs{
//				Zone: pulumi.String("fr-par-2"),
//			})
//			if err != nil {
//				return err
//			}
//			base, err := instance.NewServer(ctx, "base", &instance.ServerArgs{
//				Image: pulumi.String("ubuntu_jammy"),
//				Type:  pulumi.String("DEV1-S"),
//				Zone:  pn01.Zone,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = instance.NewPrivateNIC(ctx, "pnic01", &instance.PrivateNICArgs{
//				ServerId:         base.ID(),
//				PrivateNetworkId: pn01.ID(),
//				Zone:             pn01.Zone,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Private NICs can be imported using the `{zone}/{server_id}/{private_nic_id}`, e.g. bash
//
// ```sh
//
//	$ pulumi import scaleway:instance/privateNIC:PrivateNIC pnic01 fr-par-1/11111111-1111-1111-1111-111111111111/22222222-2222-2222-2222-222222222222
//
// ```
type PrivateNIC struct {
	pulumi.CustomResourceState

	// IPAM ip list, should be for internal use only
	IpIds pulumi.StringArrayOutput `pulumi:"ipIds"`
	// The MAC address of the private NIC.
	MacAddress pulumi.StringOutput `pulumi:"macAddress"`
	// The ID of the private network attached to.
	PrivateNetworkId pulumi.StringOutput `pulumi:"privateNetworkId"`
	// The ID of the server associated with.
	ServerId pulumi.StringOutput `pulumi:"serverId"`
	// The tags associated with the private NIC.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// `zone`) The zone in which the server must be created.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewPrivateNIC registers a new resource with the given unique name, arguments, and options.
func NewPrivateNIC(ctx *pulumi.Context,
	name string, args *PrivateNICArgs, opts ...pulumi.ResourceOption) (*PrivateNIC, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PrivateNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'PrivateNetworkId'")
	}
	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PrivateNIC
	err := ctx.RegisterResource("scaleway:instance/privateNIC:PrivateNIC", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrivateNIC gets an existing PrivateNIC resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrivateNIC(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrivateNICState, opts ...pulumi.ResourceOption) (*PrivateNIC, error) {
	var resource PrivateNIC
	err := ctx.ReadResource("scaleway:instance/privateNIC:PrivateNIC", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrivateNIC resources.
type privateNICState struct {
	// IPAM ip list, should be for internal use only
	IpIds []string `pulumi:"ipIds"`
	// The MAC address of the private NIC.
	MacAddress *string `pulumi:"macAddress"`
	// The ID of the private network attached to.
	PrivateNetworkId *string `pulumi:"privateNetworkId"`
	// The ID of the server associated with.
	ServerId *string `pulumi:"serverId"`
	// The tags associated with the private NIC.
	Tags []string `pulumi:"tags"`
	// `zone`) The zone in which the server must be created.
	Zone *string `pulumi:"zone"`
}

type PrivateNICState struct {
	// IPAM ip list, should be for internal use only
	IpIds pulumi.StringArrayInput
	// The MAC address of the private NIC.
	MacAddress pulumi.StringPtrInput
	// The ID of the private network attached to.
	PrivateNetworkId pulumi.StringPtrInput
	// The ID of the server associated with.
	ServerId pulumi.StringPtrInput
	// The tags associated with the private NIC.
	Tags pulumi.StringArrayInput
	// `zone`) The zone in which the server must be created.
	Zone pulumi.StringPtrInput
}

func (PrivateNICState) ElementType() reflect.Type {
	return reflect.TypeOf((*privateNICState)(nil)).Elem()
}

type privateNICArgs struct {
	// IPAM ip list, should be for internal use only
	IpIds []string `pulumi:"ipIds"`
	// The ID of the private network attached to.
	PrivateNetworkId string `pulumi:"privateNetworkId"`
	// The ID of the server associated with.
	ServerId string `pulumi:"serverId"`
	// The tags associated with the private NIC.
	Tags []string `pulumi:"tags"`
	// `zone`) The zone in which the server must be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a PrivateNIC resource.
type PrivateNICArgs struct {
	// IPAM ip list, should be for internal use only
	IpIds pulumi.StringArrayInput
	// The ID of the private network attached to.
	PrivateNetworkId pulumi.StringInput
	// The ID of the server associated with.
	ServerId pulumi.StringInput
	// The tags associated with the private NIC.
	Tags pulumi.StringArrayInput
	// `zone`) The zone in which the server must be created.
	Zone pulumi.StringPtrInput
}

func (PrivateNICArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*privateNICArgs)(nil)).Elem()
}

type PrivateNICInput interface {
	pulumi.Input

	ToPrivateNICOutput() PrivateNICOutput
	ToPrivateNICOutputWithContext(ctx context.Context) PrivateNICOutput
}

func (*PrivateNIC) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateNIC)(nil)).Elem()
}

func (i *PrivateNIC) ToPrivateNICOutput() PrivateNICOutput {
	return i.ToPrivateNICOutputWithContext(context.Background())
}

func (i *PrivateNIC) ToPrivateNICOutputWithContext(ctx context.Context) PrivateNICOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateNICOutput)
}

// PrivateNICArrayInput is an input type that accepts PrivateNICArray and PrivateNICArrayOutput values.
// You can construct a concrete instance of `PrivateNICArrayInput` via:
//
//	PrivateNICArray{ PrivateNICArgs{...} }
type PrivateNICArrayInput interface {
	pulumi.Input

	ToPrivateNICArrayOutput() PrivateNICArrayOutput
	ToPrivateNICArrayOutputWithContext(context.Context) PrivateNICArrayOutput
}

type PrivateNICArray []PrivateNICInput

func (PrivateNICArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrivateNIC)(nil)).Elem()
}

func (i PrivateNICArray) ToPrivateNICArrayOutput() PrivateNICArrayOutput {
	return i.ToPrivateNICArrayOutputWithContext(context.Background())
}

func (i PrivateNICArray) ToPrivateNICArrayOutputWithContext(ctx context.Context) PrivateNICArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateNICArrayOutput)
}

// PrivateNICMapInput is an input type that accepts PrivateNICMap and PrivateNICMapOutput values.
// You can construct a concrete instance of `PrivateNICMapInput` via:
//
//	PrivateNICMap{ "key": PrivateNICArgs{...} }
type PrivateNICMapInput interface {
	pulumi.Input

	ToPrivateNICMapOutput() PrivateNICMapOutput
	ToPrivateNICMapOutputWithContext(context.Context) PrivateNICMapOutput
}

type PrivateNICMap map[string]PrivateNICInput

func (PrivateNICMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrivateNIC)(nil)).Elem()
}

func (i PrivateNICMap) ToPrivateNICMapOutput() PrivateNICMapOutput {
	return i.ToPrivateNICMapOutputWithContext(context.Background())
}

func (i PrivateNICMap) ToPrivateNICMapOutputWithContext(ctx context.Context) PrivateNICMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateNICMapOutput)
}

type PrivateNICOutput struct{ *pulumi.OutputState }

func (PrivateNICOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateNIC)(nil)).Elem()
}

func (o PrivateNICOutput) ToPrivateNICOutput() PrivateNICOutput {
	return o
}

func (o PrivateNICOutput) ToPrivateNICOutputWithContext(ctx context.Context) PrivateNICOutput {
	return o
}

// IPAM ip list, should be for internal use only
func (o PrivateNICOutput) IpIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PrivateNIC) pulumi.StringArrayOutput { return v.IpIds }).(pulumi.StringArrayOutput)
}

// The MAC address of the private NIC.
func (o PrivateNICOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateNIC) pulumi.StringOutput { return v.MacAddress }).(pulumi.StringOutput)
}

// The ID of the private network attached to.
func (o PrivateNICOutput) PrivateNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateNIC) pulumi.StringOutput { return v.PrivateNetworkId }).(pulumi.StringOutput)
}

// The ID of the server associated with.
func (o PrivateNICOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateNIC) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

// The tags associated with the private NIC.
func (o PrivateNICOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PrivateNIC) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// `zone`) The zone in which the server must be created.
func (o PrivateNICOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateNIC) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type PrivateNICArrayOutput struct{ *pulumi.OutputState }

func (PrivateNICArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrivateNIC)(nil)).Elem()
}

func (o PrivateNICArrayOutput) ToPrivateNICArrayOutput() PrivateNICArrayOutput {
	return o
}

func (o PrivateNICArrayOutput) ToPrivateNICArrayOutputWithContext(ctx context.Context) PrivateNICArrayOutput {
	return o
}

func (o PrivateNICArrayOutput) Index(i pulumi.IntInput) PrivateNICOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PrivateNIC {
		return vs[0].([]*PrivateNIC)[vs[1].(int)]
	}).(PrivateNICOutput)
}

type PrivateNICMapOutput struct{ *pulumi.OutputState }

func (PrivateNICMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrivateNIC)(nil)).Elem()
}

func (o PrivateNICMapOutput) ToPrivateNICMapOutput() PrivateNICMapOutput {
	return o
}

func (o PrivateNICMapOutput) ToPrivateNICMapOutputWithContext(ctx context.Context) PrivateNICMapOutput {
	return o
}

func (o PrivateNICMapOutput) MapIndex(k pulumi.StringInput) PrivateNICOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PrivateNIC {
		return vs[0].(map[string]*PrivateNIC)[vs[1].(string)]
	}).(PrivateNICOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateNICInput)(nil)).Elem(), &PrivateNIC{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateNICArrayInput)(nil)).Elem(), PrivateNICArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateNICMapInput)(nil)).Elem(), PrivateNICMap{})
	pulumi.RegisterOutputType(PrivateNICOutput{})
	pulumi.RegisterOutputType(PrivateNICArrayOutput{})
	pulumi.RegisterOutputType(PrivateNICMapOutput{})
}
