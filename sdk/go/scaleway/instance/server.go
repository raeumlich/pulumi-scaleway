// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package instance

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Compute Instance servers. For more information, see [the documentation](https://developers.scaleway.com/en/products/instance/api/#servers-8bf7d7).
//
// Please check our [FAQ - Instances](https://www.scaleway.com/en/docs/faq/instances).
//
// ## Example Usage
//
// ### Basic
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/instance"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			publicIp, err := instance.NewIP(ctx, "publicIp", nil)
//			if err != nil {
//				return err
//			}
//			_, err = instance.NewServer(ctx, "web", &instance.ServerArgs{
//				Type:  pulumi.String("DEV1-S"),
//				Image: pulumi.String("ubuntu_jammy"),
//				IpId:  publicIp.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### With additional volumes and tags
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/instance"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			data, err := instance.NewVolume(ctx, "data", &instance.VolumeArgs{
//				SizeInGb: pulumi.Int(100),
//				Type:     pulumi.String("b_ssd"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = instance.NewServer(ctx, "web", &instance.ServerArgs{
//				Type:  pulumi.String("DEV1-S"),
//				Image: pulumi.String("ubuntu_jammy"),
//				Tags: pulumi.StringArray{
//					pulumi.String("hello"),
//					pulumi.String("public"),
//				},
//				RootVolume: &instance.ServerRootVolumeArgs{
//					DeleteOnTermination: pulumi.Bool(false),
//				},
//				AdditionalVolumeIds: pulumi.StringArray{
//					data.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### With a reserved IP
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/instance"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			ip, err := instance.NewIP(ctx, "ip", nil)
//			if err != nil {
//				return err
//			}
//			_, err = instance.NewServer(ctx, "web", &instance.ServerArgs{
//				Type:  pulumi.String("DEV1-S"),
//				Image: pulumi.String("f974feac-abae-4365-b988-8ec7d1cec10d"),
//				Tags: pulumi.StringArray{
//					pulumi.String("hello"),
//					pulumi.String("public"),
//				},
//				IpId: ip.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### With security group
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/instance"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			www, err := instance.NewSecurityGroup(ctx, "www", &instance.SecurityGroupArgs{
//				InboundDefaultPolicy:  pulumi.String("drop"),
//				OutboundDefaultPolicy: pulumi.String("accept"),
//				InboundRules: instance.SecurityGroupInboundRuleArray{
//					&instance.SecurityGroupInboundRuleArgs{
//						Action: pulumi.String("accept"),
//						Port:   pulumi.Int(22),
//						Ip:     pulumi.String("212.47.225.64"),
//					},
//					&instance.SecurityGroupInboundRuleArgs{
//						Action: pulumi.String("accept"),
//						Port:   pulumi.Int(80),
//					},
//					&instance.SecurityGroupInboundRuleArgs{
//						Action: pulumi.String("accept"),
//						Port:   pulumi.Int(443),
//					},
//				},
//				OutboundRules: instance.SecurityGroupOutboundRuleArray{
//					&instance.SecurityGroupOutboundRuleArgs{
//						Action:  pulumi.String("drop"),
//						IpRange: pulumi.String("10.20.0.0/24"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = instance.NewServer(ctx, "web", &instance.ServerArgs{
//				Type:            pulumi.String("DEV1-S"),
//				Image:           pulumi.String("ubuntu_jammy"),
//				SecurityGroupId: www.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### With user data and cloud-init
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"fmt"
//	"os"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/instance"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := os.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := instance.NewServer(ctx, "web", &instance.ServerArgs{
//				Type:  pulumi.String("DEV1-S"),
//				Image: pulumi.String("ubuntu_jammy"),
//				UserData: pulumi.StringMap{
//					"foo":        pulumi.String("bar"),
//					"cloud-init": readFileOrPanic(fmt.Sprintf("%v/cloud-init.yml", path.Module)),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### With private network
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/instance"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			pn01, err := vpc.NewPrivateNetwork(ctx, "pn01", nil)
//			if err != nil {
//				return err
//			}
//			_, err = instance.NewServer(ctx, "base", &instance.ServerArgs{
//				Image: pulumi.String("ubuntu_jammy"),
//				Type:  pulumi.String("DEV1-S"),
//				PrivateNetworks: instance.ServerPrivateNetworkArray{
//					&instance.ServerPrivateNetworkArgs{
//						PnId: pn01.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Root volume configuration
//
// ### Resized block volume with installed image
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/instance"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := instance.NewServer(ctx, "image", &instance.ServerArgs{
//				Image: pulumi.String("ubuntu_jammy"),
//				RootVolume: &instance.ServerRootVolumeArgs{
//					SizeInGb:   pulumi.Int(100),
//					VolumeType: pulumi.String("b_ssd"),
//				},
//				Type: pulumi.String("PRO2-XXS"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### From snapshot
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/instance"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			snapshot, err := instance.LookupSnapshot(ctx, &instance.LookupSnapshotArgs{
//				Name: pulumi.StringRef("my_snapshot"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			fromSnapshotVolume, err := instance.NewVolume(ctx, "fromSnapshotVolume", &instance.VolumeArgs{
//				FromSnapshotId: *pulumi.String(snapshot.Id),
//				Type:           pulumi.String("b_ssd"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = instance.NewServer(ctx, "fromSnapshotServer", &instance.ServerArgs{
//				Type: pulumi.String("PRO2-XXS"),
//				RootVolume: &instance.ServerRootVolumeArgs{
//					VolumeId: fromSnapshotVolume.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Private Network
//
// > **Important:** Updates to `privateNetwork` will recreate a new private network interface.
//
// - `pnId` - (Required) The private network ID where to connect.
// - `macAddress` The private NIC MAC address.
// - `status` The private NIC state.
// - `zone` - (Defaults to provider `zone`) The zone in which the server must be created.
//
// > **Important:**
//
// - You can only attach an instance in the same zone as a private network.
// - Instance supports maximum 8 different private networks.
//
// ## Import
//
// Instance servers can be imported using the `{zone}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:instance/server:Server web fr-par-1/11111111-1111-1111-1111-111111111111
// ```
type Server struct {
	pulumi.CustomResourceState

	// The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)
	// attached to the server. Updates to this field will trigger a stop/start of the server.
	//
	// > **Important:** If this field contains local volumes, the `state` must be set to `stopped`, otherwise it will fail.
	//
	// > **Important:** If this field contains local volumes, you have to first detach them, in one apply, and then delete the volume in another apply.
	AdditionalVolumeIds pulumi.StringArrayOutput `pulumi:"additionalVolumeIds"`
	// The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.
	BootType pulumi.StringPtrOutput `pulumi:"bootType"`
	// The ID of the bootscript to use  (set bootType to `bootscript`).
	BootscriptId pulumi.StringOutput `pulumi:"bootscriptId"`
	// The cloud init script associated with this server
	CloudInit pulumi.StringOutput `pulumi:"cloudInit"`
	// If true a dynamic IP will be attached to the server.
	EnableDynamicIp pulumi.BoolPtrOutput `pulumi:"enableDynamicIp"`
	// Determines if IPv6 is enabled for the server.
	EnableIpv6 pulumi.BoolPtrOutput `pulumi:"enableIpv6"`
	// The UUID or the label of the base image used by the server. You can use [this endpoint](https://api-marketplace.scaleway.com/images?page=1&per_page=100)
	// to find either the right `label` or the right local image `ID` for a given `type`. Optional when creating an instance with an existing root volume.
	//
	// You can check the available labels with our [CLI](https://www.scaleway.com/en/docs/compute/instances/api-cli/creating-managing-instances-with-cliv2/). ```scw marketplace image list```
	//
	// To retrieve more information by label please use: ```scw marketplace image get label=<LABEL>```
	Image pulumi.StringPtrOutput `pulumi:"image"`
	// The ID of the reserved IP that is attached to the server.
	IpId pulumi.StringPtrOutput `pulumi:"ipId"`
	// List of ID of reserved IPs that are attached to the server. Cannot be used with `ipId`.
	//
	// > `ipId` to `ipIds` migration: if moving the ip from the old `ipId` field to the new `ipIds`, it should not detach the ip.
	IpIds pulumi.StringArrayOutput `pulumi:"ipIds"`
	// The default ipv6 address routed to the server. ( Only set when enableIpv6 is set to true )
	Ipv6Address pulumi.StringOutput `pulumi:"ipv6Address"`
	// The ipv6 gateway address. ( Only set when enableIpv6 is set to true )
	Ipv6Gateway pulumi.StringOutput `pulumi:"ipv6Gateway"`
	// The prefix length of the ipv6 subnet routed to the server. ( Only set when enableIpv6 is set to true )
	Ipv6PrefixLength pulumi.IntOutput `pulumi:"ipv6PrefixLength"`
	// The name of the server.
	Name pulumi.StringOutput `pulumi:"name"`
	// The organization ID the server is associated with.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.
	//
	// > **Important:** When updating `placementGroupId` the `state` must be set to `stopped`, otherwise it will fail.
	PlacementGroupId pulumi.StringPtrOutput `pulumi:"placementGroupId"`
	// True when the placement group policy is respected.
	PlacementGroupPolicyRespected pulumi.BoolOutput `pulumi:"placementGroupPolicyRespected"`
	// The Scaleway internal IP address of the server.
	PrivateIp pulumi.StringOutput `pulumi:"privateIp"`
	// The private network associated with the server.
	// Use the `pnId` key to attach a [privateNetwork](https://developers.scaleway.com/en/products/instance/api/#private-nics-a42eea) on your instance.
	PrivateNetworks ServerPrivateNetworkArrayOutput `pulumi:"privateNetworks"`
	// `projectId`) The ID of the project the server is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The public IP address of the server.
	PublicIp pulumi.StringOutput `pulumi:"publicIp"`
	// The list of public IPs of the server.
	PublicIps ServerPublicIpArrayOutput `pulumi:"publicIps"`
	// If true, the server will be replaced if `type` is changed. Otherwise, the server will migrate.
	ReplaceOnTypeChange pulumi.BoolPtrOutput `pulumi:"replaceOnTypeChange"`
	// Root [volume](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39) attached to the server on creation.
	RootVolume ServerRootVolumeOutput `pulumi:"rootVolume"`
	// If true, the server will support routed ips only. Changing it to true will migrate the server and its IP to routed type.
	//
	// > **Important:** Enabling routed ip will restart the server
	RoutedIpEnabled pulumi.BoolOutput `pulumi:"routedIpEnabled"`
	// The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.
	SecurityGroupId pulumi.StringOutput `pulumi:"securityGroupId"`
	// The state of the server. Possible values are: `started`, `stopped` or `standby`.
	State pulumi.StringPtrOutput `pulumi:"state"`
	// The tags associated with the server.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The commercial type of the server.
	// You find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).
	// Updates to this field will migrate the server, local storage constraint must be respected. [More info](https://www.scaleway.com/en/docs/compute/instances/api-cli/migrating-instances/).
	// Use `replaceOnTypeChange` to trigger replacement instead of migration.
	//
	// > **Important:** If `type` change and migration occurs, the server will be stopped and changed backed to its original state. It will be started again if it was running.
	Type pulumi.StringOutput `pulumi:"type"`
	// The user data associated with the server.
	// Use the `cloud-init` key to use [cloud-init](https://cloudinit.readthedocs.io/en/latest/) on your instance.
	// You can define values using:
	// - string
	// - UTF-8 encoded file content using file
	// - Binary files using filebase64.
	UserData pulumi.StringMapOutput `pulumi:"userData"`
	// `zone`) The zone in which the server should be created.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewServer registers a new resource with the given unique name, arguments, and options.
func NewServer(ctx *pulumi.Context,
	name string, args *ServerArgs, opts ...pulumi.ResourceOption) (*Server, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Server
	err := ctx.RegisterResource("scaleway:instance/server:Server", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServer gets an existing Server resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerState, opts ...pulumi.ResourceOption) (*Server, error) {
	var resource Server
	err := ctx.ReadResource("scaleway:instance/server:Server", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Server resources.
type serverState struct {
	// The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)
	// attached to the server. Updates to this field will trigger a stop/start of the server.
	//
	// > **Important:** If this field contains local volumes, the `state` must be set to `stopped`, otherwise it will fail.
	//
	// > **Important:** If this field contains local volumes, you have to first detach them, in one apply, and then delete the volume in another apply.
	AdditionalVolumeIds []string `pulumi:"additionalVolumeIds"`
	// The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.
	BootType *string `pulumi:"bootType"`
	// The ID of the bootscript to use  (set bootType to `bootscript`).
	BootscriptId *string `pulumi:"bootscriptId"`
	// The cloud init script associated with this server
	CloudInit *string `pulumi:"cloudInit"`
	// If true a dynamic IP will be attached to the server.
	EnableDynamicIp *bool `pulumi:"enableDynamicIp"`
	// Determines if IPv6 is enabled for the server.
	EnableIpv6 *bool `pulumi:"enableIpv6"`
	// The UUID or the label of the base image used by the server. You can use [this endpoint](https://api-marketplace.scaleway.com/images?page=1&per_page=100)
	// to find either the right `label` or the right local image `ID` for a given `type`. Optional when creating an instance with an existing root volume.
	//
	// You can check the available labels with our [CLI](https://www.scaleway.com/en/docs/compute/instances/api-cli/creating-managing-instances-with-cliv2/). ```scw marketplace image list```
	//
	// To retrieve more information by label please use: ```scw marketplace image get label=<LABEL>```
	Image *string `pulumi:"image"`
	// The ID of the reserved IP that is attached to the server.
	IpId *string `pulumi:"ipId"`
	// List of ID of reserved IPs that are attached to the server. Cannot be used with `ipId`.
	//
	// > `ipId` to `ipIds` migration: if moving the ip from the old `ipId` field to the new `ipIds`, it should not detach the ip.
	IpIds []string `pulumi:"ipIds"`
	// The default ipv6 address routed to the server. ( Only set when enableIpv6 is set to true )
	Ipv6Address *string `pulumi:"ipv6Address"`
	// The ipv6 gateway address. ( Only set when enableIpv6 is set to true )
	Ipv6Gateway *string `pulumi:"ipv6Gateway"`
	// The prefix length of the ipv6 subnet routed to the server. ( Only set when enableIpv6 is set to true )
	Ipv6PrefixLength *int `pulumi:"ipv6PrefixLength"`
	// The name of the server.
	Name *string `pulumi:"name"`
	// The organization ID the server is associated with.
	OrganizationId *string `pulumi:"organizationId"`
	// The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.
	//
	// > **Important:** When updating `placementGroupId` the `state` must be set to `stopped`, otherwise it will fail.
	PlacementGroupId *string `pulumi:"placementGroupId"`
	// True when the placement group policy is respected.
	PlacementGroupPolicyRespected *bool `pulumi:"placementGroupPolicyRespected"`
	// The Scaleway internal IP address of the server.
	PrivateIp *string `pulumi:"privateIp"`
	// The private network associated with the server.
	// Use the `pnId` key to attach a [privateNetwork](https://developers.scaleway.com/en/products/instance/api/#private-nics-a42eea) on your instance.
	PrivateNetworks []ServerPrivateNetwork `pulumi:"privateNetworks"`
	// `projectId`) The ID of the project the server is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The public IP address of the server.
	PublicIp *string `pulumi:"publicIp"`
	// The list of public IPs of the server.
	PublicIps []ServerPublicIp `pulumi:"publicIps"`
	// If true, the server will be replaced if `type` is changed. Otherwise, the server will migrate.
	ReplaceOnTypeChange *bool `pulumi:"replaceOnTypeChange"`
	// Root [volume](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39) attached to the server on creation.
	RootVolume *ServerRootVolume `pulumi:"rootVolume"`
	// If true, the server will support routed ips only. Changing it to true will migrate the server and its IP to routed type.
	//
	// > **Important:** Enabling routed ip will restart the server
	RoutedIpEnabled *bool `pulumi:"routedIpEnabled"`
	// The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// The state of the server. Possible values are: `started`, `stopped` or `standby`.
	State *string `pulumi:"state"`
	// The tags associated with the server.
	Tags []string `pulumi:"tags"`
	// The commercial type of the server.
	// You find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).
	// Updates to this field will migrate the server, local storage constraint must be respected. [More info](https://www.scaleway.com/en/docs/compute/instances/api-cli/migrating-instances/).
	// Use `replaceOnTypeChange` to trigger replacement instead of migration.
	//
	// > **Important:** If `type` change and migration occurs, the server will be stopped and changed backed to its original state. It will be started again if it was running.
	Type *string `pulumi:"type"`
	// The user data associated with the server.
	// Use the `cloud-init` key to use [cloud-init](https://cloudinit.readthedocs.io/en/latest/) on your instance.
	// You can define values using:
	// - string
	// - UTF-8 encoded file content using file
	// - Binary files using filebase64.
	UserData map[string]string `pulumi:"userData"`
	// `zone`) The zone in which the server should be created.
	Zone *string `pulumi:"zone"`
}

type ServerState struct {
	// The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)
	// attached to the server. Updates to this field will trigger a stop/start of the server.
	//
	// > **Important:** If this field contains local volumes, the `state` must be set to `stopped`, otherwise it will fail.
	//
	// > **Important:** If this field contains local volumes, you have to first detach them, in one apply, and then delete the volume in another apply.
	AdditionalVolumeIds pulumi.StringArrayInput
	// The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.
	BootType pulumi.StringPtrInput
	// The ID of the bootscript to use  (set bootType to `bootscript`).
	BootscriptId pulumi.StringPtrInput
	// The cloud init script associated with this server
	CloudInit pulumi.StringPtrInput
	// If true a dynamic IP will be attached to the server.
	EnableDynamicIp pulumi.BoolPtrInput
	// Determines if IPv6 is enabled for the server.
	EnableIpv6 pulumi.BoolPtrInput
	// The UUID or the label of the base image used by the server. You can use [this endpoint](https://api-marketplace.scaleway.com/images?page=1&per_page=100)
	// to find either the right `label` or the right local image `ID` for a given `type`. Optional when creating an instance with an existing root volume.
	//
	// You can check the available labels with our [CLI](https://www.scaleway.com/en/docs/compute/instances/api-cli/creating-managing-instances-with-cliv2/). ```scw marketplace image list```
	//
	// To retrieve more information by label please use: ```scw marketplace image get label=<LABEL>```
	Image pulumi.StringPtrInput
	// The ID of the reserved IP that is attached to the server.
	IpId pulumi.StringPtrInput
	// List of ID of reserved IPs that are attached to the server. Cannot be used with `ipId`.
	//
	// > `ipId` to `ipIds` migration: if moving the ip from the old `ipId` field to the new `ipIds`, it should not detach the ip.
	IpIds pulumi.StringArrayInput
	// The default ipv6 address routed to the server. ( Only set when enableIpv6 is set to true )
	Ipv6Address pulumi.StringPtrInput
	// The ipv6 gateway address. ( Only set when enableIpv6 is set to true )
	Ipv6Gateway pulumi.StringPtrInput
	// The prefix length of the ipv6 subnet routed to the server. ( Only set when enableIpv6 is set to true )
	Ipv6PrefixLength pulumi.IntPtrInput
	// The name of the server.
	Name pulumi.StringPtrInput
	// The organization ID the server is associated with.
	OrganizationId pulumi.StringPtrInput
	// The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.
	//
	// > **Important:** When updating `placementGroupId` the `state` must be set to `stopped`, otherwise it will fail.
	PlacementGroupId pulumi.StringPtrInput
	// True when the placement group policy is respected.
	PlacementGroupPolicyRespected pulumi.BoolPtrInput
	// The Scaleway internal IP address of the server.
	PrivateIp pulumi.StringPtrInput
	// The private network associated with the server.
	// Use the `pnId` key to attach a [privateNetwork](https://developers.scaleway.com/en/products/instance/api/#private-nics-a42eea) on your instance.
	PrivateNetworks ServerPrivateNetworkArrayInput
	// `projectId`) The ID of the project the server is associated with.
	ProjectId pulumi.StringPtrInput
	// The public IP address of the server.
	PublicIp pulumi.StringPtrInput
	// The list of public IPs of the server.
	PublicIps ServerPublicIpArrayInput
	// If true, the server will be replaced if `type` is changed. Otherwise, the server will migrate.
	ReplaceOnTypeChange pulumi.BoolPtrInput
	// Root [volume](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39) attached to the server on creation.
	RootVolume ServerRootVolumePtrInput
	// If true, the server will support routed ips only. Changing it to true will migrate the server and its IP to routed type.
	//
	// > **Important:** Enabling routed ip will restart the server
	RoutedIpEnabled pulumi.BoolPtrInput
	// The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.
	SecurityGroupId pulumi.StringPtrInput
	// The state of the server. Possible values are: `started`, `stopped` or `standby`.
	State pulumi.StringPtrInput
	// The tags associated with the server.
	Tags pulumi.StringArrayInput
	// The commercial type of the server.
	// You find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).
	// Updates to this field will migrate the server, local storage constraint must be respected. [More info](https://www.scaleway.com/en/docs/compute/instances/api-cli/migrating-instances/).
	// Use `replaceOnTypeChange` to trigger replacement instead of migration.
	//
	// > **Important:** If `type` change and migration occurs, the server will be stopped and changed backed to its original state. It will be started again if it was running.
	Type pulumi.StringPtrInput
	// The user data associated with the server.
	// Use the `cloud-init` key to use [cloud-init](https://cloudinit.readthedocs.io/en/latest/) on your instance.
	// You can define values using:
	// - string
	// - UTF-8 encoded file content using file
	// - Binary files using filebase64.
	UserData pulumi.StringMapInput
	// `zone`) The zone in which the server should be created.
	Zone pulumi.StringPtrInput
}

func (ServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverState)(nil)).Elem()
}

type serverArgs struct {
	// The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)
	// attached to the server. Updates to this field will trigger a stop/start of the server.
	//
	// > **Important:** If this field contains local volumes, the `state` must be set to `stopped`, otherwise it will fail.
	//
	// > **Important:** If this field contains local volumes, you have to first detach them, in one apply, and then delete the volume in another apply.
	AdditionalVolumeIds []string `pulumi:"additionalVolumeIds"`
	// The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.
	BootType *string `pulumi:"bootType"`
	// The ID of the bootscript to use  (set bootType to `bootscript`).
	BootscriptId *string `pulumi:"bootscriptId"`
	// The cloud init script associated with this server
	CloudInit *string `pulumi:"cloudInit"`
	// If true a dynamic IP will be attached to the server.
	EnableDynamicIp *bool `pulumi:"enableDynamicIp"`
	// Determines if IPv6 is enabled for the server.
	EnableIpv6 *bool `pulumi:"enableIpv6"`
	// The UUID or the label of the base image used by the server. You can use [this endpoint](https://api-marketplace.scaleway.com/images?page=1&per_page=100)
	// to find either the right `label` or the right local image `ID` for a given `type`. Optional when creating an instance with an existing root volume.
	//
	// You can check the available labels with our [CLI](https://www.scaleway.com/en/docs/compute/instances/api-cli/creating-managing-instances-with-cliv2/). ```scw marketplace image list```
	//
	// To retrieve more information by label please use: ```scw marketplace image get label=<LABEL>```
	Image *string `pulumi:"image"`
	// The ID of the reserved IP that is attached to the server.
	IpId *string `pulumi:"ipId"`
	// List of ID of reserved IPs that are attached to the server. Cannot be used with `ipId`.
	//
	// > `ipId` to `ipIds` migration: if moving the ip from the old `ipId` field to the new `ipIds`, it should not detach the ip.
	IpIds []string `pulumi:"ipIds"`
	// The name of the server.
	Name *string `pulumi:"name"`
	// The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.
	//
	// > **Important:** When updating `placementGroupId` the `state` must be set to `stopped`, otherwise it will fail.
	PlacementGroupId *string `pulumi:"placementGroupId"`
	// The private network associated with the server.
	// Use the `pnId` key to attach a [privateNetwork](https://developers.scaleway.com/en/products/instance/api/#private-nics-a42eea) on your instance.
	PrivateNetworks []ServerPrivateNetwork `pulumi:"privateNetworks"`
	// `projectId`) The ID of the project the server is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The list of public IPs of the server.
	PublicIps []ServerPublicIp `pulumi:"publicIps"`
	// If true, the server will be replaced if `type` is changed. Otherwise, the server will migrate.
	ReplaceOnTypeChange *bool `pulumi:"replaceOnTypeChange"`
	// Root [volume](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39) attached to the server on creation.
	RootVolume *ServerRootVolume `pulumi:"rootVolume"`
	// If true, the server will support routed ips only. Changing it to true will migrate the server and its IP to routed type.
	//
	// > **Important:** Enabling routed ip will restart the server
	RoutedIpEnabled *bool `pulumi:"routedIpEnabled"`
	// The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// The state of the server. Possible values are: `started`, `stopped` or `standby`.
	State *string `pulumi:"state"`
	// The tags associated with the server.
	Tags []string `pulumi:"tags"`
	// The commercial type of the server.
	// You find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).
	// Updates to this field will migrate the server, local storage constraint must be respected. [More info](https://www.scaleway.com/en/docs/compute/instances/api-cli/migrating-instances/).
	// Use `replaceOnTypeChange` to trigger replacement instead of migration.
	//
	// > **Important:** If `type` change and migration occurs, the server will be stopped and changed backed to its original state. It will be started again if it was running.
	Type string `pulumi:"type"`
	// The user data associated with the server.
	// Use the `cloud-init` key to use [cloud-init](https://cloudinit.readthedocs.io/en/latest/) on your instance.
	// You can define values using:
	// - string
	// - UTF-8 encoded file content using file
	// - Binary files using filebase64.
	UserData map[string]string `pulumi:"userData"`
	// `zone`) The zone in which the server should be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a Server resource.
type ServerArgs struct {
	// The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)
	// attached to the server. Updates to this field will trigger a stop/start of the server.
	//
	// > **Important:** If this field contains local volumes, the `state` must be set to `stopped`, otherwise it will fail.
	//
	// > **Important:** If this field contains local volumes, you have to first detach them, in one apply, and then delete the volume in another apply.
	AdditionalVolumeIds pulumi.StringArrayInput
	// The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.
	BootType pulumi.StringPtrInput
	// The ID of the bootscript to use  (set bootType to `bootscript`).
	BootscriptId pulumi.StringPtrInput
	// The cloud init script associated with this server
	CloudInit pulumi.StringPtrInput
	// If true a dynamic IP will be attached to the server.
	EnableDynamicIp pulumi.BoolPtrInput
	// Determines if IPv6 is enabled for the server.
	EnableIpv6 pulumi.BoolPtrInput
	// The UUID or the label of the base image used by the server. You can use [this endpoint](https://api-marketplace.scaleway.com/images?page=1&per_page=100)
	// to find either the right `label` or the right local image `ID` for a given `type`. Optional when creating an instance with an existing root volume.
	//
	// You can check the available labels with our [CLI](https://www.scaleway.com/en/docs/compute/instances/api-cli/creating-managing-instances-with-cliv2/). ```scw marketplace image list```
	//
	// To retrieve more information by label please use: ```scw marketplace image get label=<LABEL>```
	Image pulumi.StringPtrInput
	// The ID of the reserved IP that is attached to the server.
	IpId pulumi.StringPtrInput
	// List of ID of reserved IPs that are attached to the server. Cannot be used with `ipId`.
	//
	// > `ipId` to `ipIds` migration: if moving the ip from the old `ipId` field to the new `ipIds`, it should not detach the ip.
	IpIds pulumi.StringArrayInput
	// The name of the server.
	Name pulumi.StringPtrInput
	// The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.
	//
	// > **Important:** When updating `placementGroupId` the `state` must be set to `stopped`, otherwise it will fail.
	PlacementGroupId pulumi.StringPtrInput
	// The private network associated with the server.
	// Use the `pnId` key to attach a [privateNetwork](https://developers.scaleway.com/en/products/instance/api/#private-nics-a42eea) on your instance.
	PrivateNetworks ServerPrivateNetworkArrayInput
	// `projectId`) The ID of the project the server is associated with.
	ProjectId pulumi.StringPtrInput
	// The list of public IPs of the server.
	PublicIps ServerPublicIpArrayInput
	// If true, the server will be replaced if `type` is changed. Otherwise, the server will migrate.
	ReplaceOnTypeChange pulumi.BoolPtrInput
	// Root [volume](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39) attached to the server on creation.
	RootVolume ServerRootVolumePtrInput
	// If true, the server will support routed ips only. Changing it to true will migrate the server and its IP to routed type.
	//
	// > **Important:** Enabling routed ip will restart the server
	RoutedIpEnabled pulumi.BoolPtrInput
	// The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.
	SecurityGroupId pulumi.StringPtrInput
	// The state of the server. Possible values are: `started`, `stopped` or `standby`.
	State pulumi.StringPtrInput
	// The tags associated with the server.
	Tags pulumi.StringArrayInput
	// The commercial type of the server.
	// You find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).
	// Updates to this field will migrate the server, local storage constraint must be respected. [More info](https://www.scaleway.com/en/docs/compute/instances/api-cli/migrating-instances/).
	// Use `replaceOnTypeChange` to trigger replacement instead of migration.
	//
	// > **Important:** If `type` change and migration occurs, the server will be stopped and changed backed to its original state. It will be started again if it was running.
	Type pulumi.StringInput
	// The user data associated with the server.
	// Use the `cloud-init` key to use [cloud-init](https://cloudinit.readthedocs.io/en/latest/) on your instance.
	// You can define values using:
	// - string
	// - UTF-8 encoded file content using file
	// - Binary files using filebase64.
	UserData pulumi.StringMapInput
	// `zone`) The zone in which the server should be created.
	Zone pulumi.StringPtrInput
}

func (ServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverArgs)(nil)).Elem()
}

type ServerInput interface {
	pulumi.Input

	ToServerOutput() ServerOutput
	ToServerOutputWithContext(ctx context.Context) ServerOutput
}

func (*Server) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil)).Elem()
}

func (i *Server) ToServerOutput() ServerOutput {
	return i.ToServerOutputWithContext(context.Background())
}

func (i *Server) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerOutput)
}

// ServerArrayInput is an input type that accepts ServerArray and ServerArrayOutput values.
// You can construct a concrete instance of `ServerArrayInput` via:
//
//	ServerArray{ ServerArgs{...} }
type ServerArrayInput interface {
	pulumi.Input

	ToServerArrayOutput() ServerArrayOutput
	ToServerArrayOutputWithContext(context.Context) ServerArrayOutput
}

type ServerArray []ServerInput

func (ServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (i ServerArray) ToServerArrayOutput() ServerArrayOutput {
	return i.ToServerArrayOutputWithContext(context.Background())
}

func (i ServerArray) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerArrayOutput)
}

// ServerMapInput is an input type that accepts ServerMap and ServerMapOutput values.
// You can construct a concrete instance of `ServerMapInput` via:
//
//	ServerMap{ "key": ServerArgs{...} }
type ServerMapInput interface {
	pulumi.Input

	ToServerMapOutput() ServerMapOutput
	ToServerMapOutputWithContext(context.Context) ServerMapOutput
}

type ServerMap map[string]ServerInput

func (ServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (i ServerMap) ToServerMapOutput() ServerMapOutput {
	return i.ToServerMapOutputWithContext(context.Background())
}

func (i ServerMap) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerMapOutput)
}

type ServerOutput struct{ *pulumi.OutputState }

func (ServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil)).Elem()
}

func (o ServerOutput) ToServerOutput() ServerOutput {
	return o
}

func (o ServerOutput) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return o
}

// The [additional volumes](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39)
// attached to the server. Updates to this field will trigger a stop/start of the server.
//
// > **Important:** If this field contains local volumes, the `state` must be set to `stopped`, otherwise it will fail.
//
// > **Important:** If this field contains local volumes, you have to first detach them, in one apply, and then delete the volume in another apply.
func (o ServerOutput) AdditionalVolumeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Server) pulumi.StringArrayOutput { return v.AdditionalVolumeIds }).(pulumi.StringArrayOutput)
}

// The boot Type of the server. Possible values are: `local`, `bootscript` or `rescue`.
func (o ServerOutput) BootType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.BootType }).(pulumi.StringPtrOutput)
}

// The ID of the bootscript to use  (set bootType to `bootscript`).
func (o ServerOutput) BootscriptId() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.BootscriptId }).(pulumi.StringOutput)
}

// The cloud init script associated with this server
func (o ServerOutput) CloudInit() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.CloudInit }).(pulumi.StringOutput)
}

// If true a dynamic IP will be attached to the server.
func (o ServerOutput) EnableDynamicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.BoolPtrOutput { return v.EnableDynamicIp }).(pulumi.BoolPtrOutput)
}

// Determines if IPv6 is enabled for the server.
func (o ServerOutput) EnableIpv6() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.BoolPtrOutput { return v.EnableIpv6 }).(pulumi.BoolPtrOutput)
}

// The UUID or the label of the base image used by the server. You can use [this endpoint](https://api-marketplace.scaleway.com/images?page=1&per_page=100)
// to find either the right `label` or the right local image `ID` for a given `type`. Optional when creating an instance with an existing root volume.
//
// You can check the available labels with our [CLI](https://www.scaleway.com/en/docs/compute/instances/api-cli/creating-managing-instances-with-cliv2/). ```scw marketplace image list```
//
// To retrieve more information by label please use: ```scw marketplace image get label=<LABEL>```
func (o ServerOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.Image }).(pulumi.StringPtrOutput)
}

// The ID of the reserved IP that is attached to the server.
func (o ServerOutput) IpId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.IpId }).(pulumi.StringPtrOutput)
}

// List of ID of reserved IPs that are attached to the server. Cannot be used with `ipId`.
//
// > `ipId` to `ipIds` migration: if moving the ip from the old `ipId` field to the new `ipIds`, it should not detach the ip.
func (o ServerOutput) IpIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Server) pulumi.StringArrayOutput { return v.IpIds }).(pulumi.StringArrayOutput)
}

// The default ipv6 address routed to the server. ( Only set when enableIpv6 is set to true )
func (o ServerOutput) Ipv6Address() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Ipv6Address }).(pulumi.StringOutput)
}

// The ipv6 gateway address. ( Only set when enableIpv6 is set to true )
func (o ServerOutput) Ipv6Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Ipv6Gateway }).(pulumi.StringOutput)
}

// The prefix length of the ipv6 subnet routed to the server. ( Only set when enableIpv6 is set to true )
func (o ServerOutput) Ipv6PrefixLength() pulumi.IntOutput {
	return o.ApplyT(func(v *Server) pulumi.IntOutput { return v.Ipv6PrefixLength }).(pulumi.IntOutput)
}

// The name of the server.
func (o ServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The organization ID the server is associated with.
func (o ServerOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The [placement group](https://developers.scaleway.com/en/products/instance/api/#placement-groups-d8f653) the server is attached to.
//
// > **Important:** When updating `placementGroupId` the `state` must be set to `stopped`, otherwise it will fail.
func (o ServerOutput) PlacementGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.PlacementGroupId }).(pulumi.StringPtrOutput)
}

// True when the placement group policy is respected.
func (o ServerOutput) PlacementGroupPolicyRespected() pulumi.BoolOutput {
	return o.ApplyT(func(v *Server) pulumi.BoolOutput { return v.PlacementGroupPolicyRespected }).(pulumi.BoolOutput)
}

// The Scaleway internal IP address of the server.
func (o ServerOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.PrivateIp }).(pulumi.StringOutput)
}

// The private network associated with the server.
// Use the `pnId` key to attach a [privateNetwork](https://developers.scaleway.com/en/products/instance/api/#private-nics-a42eea) on your instance.
func (o ServerOutput) PrivateNetworks() ServerPrivateNetworkArrayOutput {
	return o.ApplyT(func(v *Server) ServerPrivateNetworkArrayOutput { return v.PrivateNetworks }).(ServerPrivateNetworkArrayOutput)
}

// `projectId`) The ID of the project the server is associated with.
func (o ServerOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The public IP address of the server.
func (o ServerOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.PublicIp }).(pulumi.StringOutput)
}

// The list of public IPs of the server.
func (o ServerOutput) PublicIps() ServerPublicIpArrayOutput {
	return o.ApplyT(func(v *Server) ServerPublicIpArrayOutput { return v.PublicIps }).(ServerPublicIpArrayOutput)
}

// If true, the server will be replaced if `type` is changed. Otherwise, the server will migrate.
func (o ServerOutput) ReplaceOnTypeChange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.BoolPtrOutput { return v.ReplaceOnTypeChange }).(pulumi.BoolPtrOutput)
}

// Root [volume](https://developers.scaleway.com/en/products/instance/api/#volumes-7e8a39) attached to the server on creation.
func (o ServerOutput) RootVolume() ServerRootVolumeOutput {
	return o.ApplyT(func(v *Server) ServerRootVolumeOutput { return v.RootVolume }).(ServerRootVolumeOutput)
}

// If true, the server will support routed ips only. Changing it to true will migrate the server and its IP to routed type.
//
// > **Important:** Enabling routed ip will restart the server
func (o ServerOutput) RoutedIpEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Server) pulumi.BoolOutput { return v.RoutedIpEnabled }).(pulumi.BoolOutput)
}

// The [security group](https://developers.scaleway.com/en/products/instance/api/#security-groups-8d7f89) the server is attached to.
func (o ServerOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// The state of the server. Possible values are: `started`, `stopped` or `standby`.
func (o ServerOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

// The tags associated with the server.
func (o ServerOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Server) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The commercial type of the server.
// You find all the available types on the [pricing page](https://www.scaleway.com/en/pricing/).
// Updates to this field will migrate the server, local storage constraint must be respected. [More info](https://www.scaleway.com/en/docs/compute/instances/api-cli/migrating-instances/).
// Use `replaceOnTypeChange` to trigger replacement instead of migration.
//
// > **Important:** If `type` change and migration occurs, the server will be stopped and changed backed to its original state. It will be started again if it was running.
func (o ServerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The user data associated with the server.
// Use the `cloud-init` key to use [cloud-init](https://cloudinit.readthedocs.io/en/latest/) on your instance.
// You can define values using:
// - string
// - UTF-8 encoded file content using file
// - Binary files using filebase64.
func (o ServerOutput) UserData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Server) pulumi.StringMapOutput { return v.UserData }).(pulumi.StringMapOutput)
}

// `zone`) The zone in which the server should be created.
func (o ServerOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type ServerArrayOutput struct{ *pulumi.OutputState }

func (ServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (o ServerArrayOutput) ToServerArrayOutput() ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) Index(i pulumi.IntInput) ServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Server {
		return vs[0].([]*Server)[vs[1].(int)]
	}).(ServerOutput)
}

type ServerMapOutput struct{ *pulumi.OutputState }

func (ServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (o ServerMapOutput) ToServerMapOutput() ServerMapOutput {
	return o
}

func (o ServerMapOutput) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return o
}

func (o ServerMapOutput) MapIndex(k pulumi.StringInput) ServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Server {
		return vs[0].(map[string]*Server)[vs[1].(string)]
	}).(ServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerInput)(nil)).Elem(), &Server{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerArrayInput)(nil)).Elem(), ServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerMapInput)(nil)).Elem(), ServerMap{})
	pulumi.RegisterOutputType(ServerOutput{})
	pulumi.RegisterOutputType(ServerArrayOutput{})
	pulumi.RegisterOutputType(ServerMapOutput{})
}
