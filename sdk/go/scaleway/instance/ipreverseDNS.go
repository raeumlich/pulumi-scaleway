// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package instance

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Manages Scaleway Compute Instance IPs Reverse DNS.
//
// Please check our [guide](https://www.scaleway.com/en/docs/compute/instances/how-to/configure-reverse-dns/) for more details
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/dns"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/instance"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			serverIp, err := instance.NewIP(ctx, "serverIp", nil)
//			if err != nil {
//				return err
//			}
//			_, err = dns.NewRecord(ctx, "tfA", &dns.RecordArgs{
//				DnsZone:  pulumi.String("scaleway.com"),
//				Type:     pulumi.String("A"),
//				Data:     serverIp.Address,
//				Ttl:      pulumi.Int(3600),
//				Priority: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = instance.NewIPReverseDNS(ctx, "reverse", &instance.IPReverseDNSArgs{
//				IpId:    serverIp.ID(),
//				Reverse: pulumi.String("www.scaleway.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// IPs reverse DNS can be imported using the `{zone}/{id}`, e.g. bash
//
// ```sh
//
//	$ pulumi import scaleway:instance/iPReverseDNS:IPReverseDNS reverse fr-par-1/11111111-1111-1111-1111-111111111111
//
// ```
type IPReverseDNS struct {
	pulumi.CustomResourceState

	// The IP ID
	IpId pulumi.StringOutput `pulumi:"ipId"`
	// The reverse DNS for this IP.
	Reverse pulumi.StringOutput `pulumi:"reverse"`
	// `zone`) The zone in which the IP should be reserved.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewIPReverseDNS registers a new resource with the given unique name, arguments, and options.
func NewIPReverseDNS(ctx *pulumi.Context,
	name string, args *IPReverseDNSArgs, opts ...pulumi.ResourceOption) (*IPReverseDNS, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpId == nil {
		return nil, errors.New("invalid value for required argument 'IpId'")
	}
	if args.Reverse == nil {
		return nil, errors.New("invalid value for required argument 'Reverse'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IPReverseDNS
	err := ctx.RegisterResource("scaleway:instance/iPReverseDNS:IPReverseDNS", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIPReverseDNS gets an existing IPReverseDNS resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPReverseDNS(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IPReverseDNSState, opts ...pulumi.ResourceOption) (*IPReverseDNS, error) {
	var resource IPReverseDNS
	err := ctx.ReadResource("scaleway:instance/iPReverseDNS:IPReverseDNS", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IPReverseDNS resources.
type ipreverseDNSState struct {
	// The IP ID
	IpId *string `pulumi:"ipId"`
	// The reverse DNS for this IP.
	Reverse *string `pulumi:"reverse"`
	// `zone`) The zone in which the IP should be reserved.
	Zone *string `pulumi:"zone"`
}

type IPReverseDNSState struct {
	// The IP ID
	IpId pulumi.StringPtrInput
	// The reverse DNS for this IP.
	Reverse pulumi.StringPtrInput
	// `zone`) The zone in which the IP should be reserved.
	Zone pulumi.StringPtrInput
}

func (IPReverseDNSState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipreverseDNSState)(nil)).Elem()
}

type ipreverseDNSArgs struct {
	// The IP ID
	IpId string `pulumi:"ipId"`
	// The reverse DNS for this IP.
	Reverse string `pulumi:"reverse"`
	// `zone`) The zone in which the IP should be reserved.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a IPReverseDNS resource.
type IPReverseDNSArgs struct {
	// The IP ID
	IpId pulumi.StringInput
	// The reverse DNS for this IP.
	Reverse pulumi.StringInput
	// `zone`) The zone in which the IP should be reserved.
	Zone pulumi.StringPtrInput
}

func (IPReverseDNSArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipreverseDNSArgs)(nil)).Elem()
}

type IPReverseDNSInput interface {
	pulumi.Input

	ToIPReverseDNSOutput() IPReverseDNSOutput
	ToIPReverseDNSOutputWithContext(ctx context.Context) IPReverseDNSOutput
}

func (*IPReverseDNS) ElementType() reflect.Type {
	return reflect.TypeOf((**IPReverseDNS)(nil)).Elem()
}

func (i *IPReverseDNS) ToIPReverseDNSOutput() IPReverseDNSOutput {
	return i.ToIPReverseDNSOutputWithContext(context.Background())
}

func (i *IPReverseDNS) ToIPReverseDNSOutputWithContext(ctx context.Context) IPReverseDNSOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPReverseDNSOutput)
}

// IPReverseDNSArrayInput is an input type that accepts IPReverseDNSArray and IPReverseDNSArrayOutput values.
// You can construct a concrete instance of `IPReverseDNSArrayInput` via:
//
//	IPReverseDNSArray{ IPReverseDNSArgs{...} }
type IPReverseDNSArrayInput interface {
	pulumi.Input

	ToIPReverseDNSArrayOutput() IPReverseDNSArrayOutput
	ToIPReverseDNSArrayOutputWithContext(context.Context) IPReverseDNSArrayOutput
}

type IPReverseDNSArray []IPReverseDNSInput

func (IPReverseDNSArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPReverseDNS)(nil)).Elem()
}

func (i IPReverseDNSArray) ToIPReverseDNSArrayOutput() IPReverseDNSArrayOutput {
	return i.ToIPReverseDNSArrayOutputWithContext(context.Background())
}

func (i IPReverseDNSArray) ToIPReverseDNSArrayOutputWithContext(ctx context.Context) IPReverseDNSArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPReverseDNSArrayOutput)
}

// IPReverseDNSMapInput is an input type that accepts IPReverseDNSMap and IPReverseDNSMapOutput values.
// You can construct a concrete instance of `IPReverseDNSMapInput` via:
//
//	IPReverseDNSMap{ "key": IPReverseDNSArgs{...} }
type IPReverseDNSMapInput interface {
	pulumi.Input

	ToIPReverseDNSMapOutput() IPReverseDNSMapOutput
	ToIPReverseDNSMapOutputWithContext(context.Context) IPReverseDNSMapOutput
}

type IPReverseDNSMap map[string]IPReverseDNSInput

func (IPReverseDNSMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPReverseDNS)(nil)).Elem()
}

func (i IPReverseDNSMap) ToIPReverseDNSMapOutput() IPReverseDNSMapOutput {
	return i.ToIPReverseDNSMapOutputWithContext(context.Background())
}

func (i IPReverseDNSMap) ToIPReverseDNSMapOutputWithContext(ctx context.Context) IPReverseDNSMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPReverseDNSMapOutput)
}

type IPReverseDNSOutput struct{ *pulumi.OutputState }

func (IPReverseDNSOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPReverseDNS)(nil)).Elem()
}

func (o IPReverseDNSOutput) ToIPReverseDNSOutput() IPReverseDNSOutput {
	return o
}

func (o IPReverseDNSOutput) ToIPReverseDNSOutputWithContext(ctx context.Context) IPReverseDNSOutput {
	return o
}

// The IP ID
func (o IPReverseDNSOutput) IpId() pulumi.StringOutput {
	return o.ApplyT(func(v *IPReverseDNS) pulumi.StringOutput { return v.IpId }).(pulumi.StringOutput)
}

// The reverse DNS for this IP.
func (o IPReverseDNSOutput) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v *IPReverseDNS) pulumi.StringOutput { return v.Reverse }).(pulumi.StringOutput)
}

// `zone`) The zone in which the IP should be reserved.
func (o IPReverseDNSOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *IPReverseDNS) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type IPReverseDNSArrayOutput struct{ *pulumi.OutputState }

func (IPReverseDNSArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPReverseDNS)(nil)).Elem()
}

func (o IPReverseDNSArrayOutput) ToIPReverseDNSArrayOutput() IPReverseDNSArrayOutput {
	return o
}

func (o IPReverseDNSArrayOutput) ToIPReverseDNSArrayOutputWithContext(ctx context.Context) IPReverseDNSArrayOutput {
	return o
}

func (o IPReverseDNSArrayOutput) Index(i pulumi.IntInput) IPReverseDNSOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IPReverseDNS {
		return vs[0].([]*IPReverseDNS)[vs[1].(int)]
	}).(IPReverseDNSOutput)
}

type IPReverseDNSMapOutput struct{ *pulumi.OutputState }

func (IPReverseDNSMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPReverseDNS)(nil)).Elem()
}

func (o IPReverseDNSMapOutput) ToIPReverseDNSMapOutput() IPReverseDNSMapOutput {
	return o
}

func (o IPReverseDNSMapOutput) ToIPReverseDNSMapOutputWithContext(ctx context.Context) IPReverseDNSMapOutput {
	return o
}

func (o IPReverseDNSMapOutput) MapIndex(k pulumi.StringInput) IPReverseDNSOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IPReverseDNS {
		return vs[0].(map[string]*IPReverseDNS)[vs[1].(string)]
	}).(IPReverseDNSOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IPReverseDNSInput)(nil)).Elem(), &IPReverseDNS{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPReverseDNSArrayInput)(nil)).Elem(), IPReverseDNSArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPReverseDNSMapInput)(nil)).Elem(), IPReverseDNSMap{})
	pulumi.RegisterOutputType(IPReverseDNSOutput{})
	pulumi.RegisterOutputType(IPReverseDNSArrayOutput{})
	pulumi.RegisterOutputType(IPReverseDNSMapOutput{})
}
