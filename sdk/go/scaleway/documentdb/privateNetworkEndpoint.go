// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package documentdb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

// ## Import
//
// Database Instance Endpoint can be imported using the `{region}/{endpoint_id}`, e.g. bash
//
// ```sh
//
//	$ pulumi import scaleway:documentdb/privateNetworkEndpoint:PrivateNetworkEndpoint end fr-par/11111111-1111-1111-1111-111111111111
//
// ```
type PrivateNetworkEndpoint struct {
	pulumi.CustomResourceState

	// Hostname of the endpoint.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// UUID of the documentdb instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// IPv4 address on the network.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// The IP network address within the private subnet. This must be an IPv4 address with a
	// CIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)
	// service if not set.
	IpNet pulumi.StringOutput `pulumi:"ipNet"`
	// Name of the endpoint.
	Name pulumi.StringOutput `pulumi:"name"`
	// Port in the Private Network.
	Port pulumi.IntOutput `pulumi:"port"`
	// The ID of the private network.
	PrivateNetworkId pulumi.StringOutput `pulumi:"privateNetworkId"`
	// The region you want to attach the resource to
	Region pulumi.StringOutput `pulumi:"region"`
	// The zone you want to attach the resource to
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewPrivateNetworkEndpoint registers a new resource with the given unique name, arguments, and options.
func NewPrivateNetworkEndpoint(ctx *pulumi.Context,
	name string, args *PrivateNetworkEndpointArgs, opts ...pulumi.ResourceOption) (*PrivateNetworkEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.PrivateNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'PrivateNetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PrivateNetworkEndpoint
	err := ctx.RegisterResource("scaleway:documentdb/privateNetworkEndpoint:PrivateNetworkEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrivateNetworkEndpoint gets an existing PrivateNetworkEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrivateNetworkEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrivateNetworkEndpointState, opts ...pulumi.ResourceOption) (*PrivateNetworkEndpoint, error) {
	var resource PrivateNetworkEndpoint
	err := ctx.ReadResource("scaleway:documentdb/privateNetworkEndpoint:PrivateNetworkEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrivateNetworkEndpoint resources.
type privateNetworkEndpointState struct {
	// Hostname of the endpoint.
	Hostname *string `pulumi:"hostname"`
	// UUID of the documentdb instance.
	InstanceId *string `pulumi:"instanceId"`
	// IPv4 address on the network.
	Ip *string `pulumi:"ip"`
	// The IP network address within the private subnet. This must be an IPv4 address with a
	// CIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)
	// service if not set.
	IpNet *string `pulumi:"ipNet"`
	// Name of the endpoint.
	Name *string `pulumi:"name"`
	// Port in the Private Network.
	Port *int `pulumi:"port"`
	// The ID of the private network.
	PrivateNetworkId *string `pulumi:"privateNetworkId"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
	// The zone you want to attach the resource to
	Zone *string `pulumi:"zone"`
}

type PrivateNetworkEndpointState struct {
	// Hostname of the endpoint.
	Hostname pulumi.StringPtrInput
	// UUID of the documentdb instance.
	InstanceId pulumi.StringPtrInput
	// IPv4 address on the network.
	Ip pulumi.StringPtrInput
	// The IP network address within the private subnet. This must be an IPv4 address with a
	// CIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)
	// service if not set.
	IpNet pulumi.StringPtrInput
	// Name of the endpoint.
	Name pulumi.StringPtrInput
	// Port in the Private Network.
	Port pulumi.IntPtrInput
	// The ID of the private network.
	PrivateNetworkId pulumi.StringPtrInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
	// The zone you want to attach the resource to
	Zone pulumi.StringPtrInput
}

func (PrivateNetworkEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*privateNetworkEndpointState)(nil)).Elem()
}

type privateNetworkEndpointArgs struct {
	// UUID of the documentdb instance.
	InstanceId string `pulumi:"instanceId"`
	// The IP network address within the private subnet. This must be an IPv4 address with a
	// CIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)
	// service if not set.
	IpNet *string `pulumi:"ipNet"`
	// Port in the Private Network.
	Port *int `pulumi:"port"`
	// The ID of the private network.
	PrivateNetworkId string `pulumi:"privateNetworkId"`
	// The region you want to attach the resource to
	Region *string `pulumi:"region"`
	// The zone you want to attach the resource to
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a PrivateNetworkEndpoint resource.
type PrivateNetworkEndpointArgs struct {
	// UUID of the documentdb instance.
	InstanceId pulumi.StringInput
	// The IP network address within the private subnet. This must be an IPv4 address with a
	// CIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)
	// service if not set.
	IpNet pulumi.StringPtrInput
	// Port in the Private Network.
	Port pulumi.IntPtrInput
	// The ID of the private network.
	PrivateNetworkId pulumi.StringInput
	// The region you want to attach the resource to
	Region pulumi.StringPtrInput
	// The zone you want to attach the resource to
	Zone pulumi.StringPtrInput
}

func (PrivateNetworkEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*privateNetworkEndpointArgs)(nil)).Elem()
}

type PrivateNetworkEndpointInput interface {
	pulumi.Input

	ToPrivateNetworkEndpointOutput() PrivateNetworkEndpointOutput
	ToPrivateNetworkEndpointOutputWithContext(ctx context.Context) PrivateNetworkEndpointOutput
}

func (*PrivateNetworkEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateNetworkEndpoint)(nil)).Elem()
}

func (i *PrivateNetworkEndpoint) ToPrivateNetworkEndpointOutput() PrivateNetworkEndpointOutput {
	return i.ToPrivateNetworkEndpointOutputWithContext(context.Background())
}

func (i *PrivateNetworkEndpoint) ToPrivateNetworkEndpointOutputWithContext(ctx context.Context) PrivateNetworkEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateNetworkEndpointOutput)
}

// PrivateNetworkEndpointArrayInput is an input type that accepts PrivateNetworkEndpointArray and PrivateNetworkEndpointArrayOutput values.
// You can construct a concrete instance of `PrivateNetworkEndpointArrayInput` via:
//
//	PrivateNetworkEndpointArray{ PrivateNetworkEndpointArgs{...} }
type PrivateNetworkEndpointArrayInput interface {
	pulumi.Input

	ToPrivateNetworkEndpointArrayOutput() PrivateNetworkEndpointArrayOutput
	ToPrivateNetworkEndpointArrayOutputWithContext(context.Context) PrivateNetworkEndpointArrayOutput
}

type PrivateNetworkEndpointArray []PrivateNetworkEndpointInput

func (PrivateNetworkEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrivateNetworkEndpoint)(nil)).Elem()
}

func (i PrivateNetworkEndpointArray) ToPrivateNetworkEndpointArrayOutput() PrivateNetworkEndpointArrayOutput {
	return i.ToPrivateNetworkEndpointArrayOutputWithContext(context.Background())
}

func (i PrivateNetworkEndpointArray) ToPrivateNetworkEndpointArrayOutputWithContext(ctx context.Context) PrivateNetworkEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateNetworkEndpointArrayOutput)
}

// PrivateNetworkEndpointMapInput is an input type that accepts PrivateNetworkEndpointMap and PrivateNetworkEndpointMapOutput values.
// You can construct a concrete instance of `PrivateNetworkEndpointMapInput` via:
//
//	PrivateNetworkEndpointMap{ "key": PrivateNetworkEndpointArgs{...} }
type PrivateNetworkEndpointMapInput interface {
	pulumi.Input

	ToPrivateNetworkEndpointMapOutput() PrivateNetworkEndpointMapOutput
	ToPrivateNetworkEndpointMapOutputWithContext(context.Context) PrivateNetworkEndpointMapOutput
}

type PrivateNetworkEndpointMap map[string]PrivateNetworkEndpointInput

func (PrivateNetworkEndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrivateNetworkEndpoint)(nil)).Elem()
}

func (i PrivateNetworkEndpointMap) ToPrivateNetworkEndpointMapOutput() PrivateNetworkEndpointMapOutput {
	return i.ToPrivateNetworkEndpointMapOutputWithContext(context.Background())
}

func (i PrivateNetworkEndpointMap) ToPrivateNetworkEndpointMapOutputWithContext(ctx context.Context) PrivateNetworkEndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateNetworkEndpointMapOutput)
}

type PrivateNetworkEndpointOutput struct{ *pulumi.OutputState }

func (PrivateNetworkEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateNetworkEndpoint)(nil)).Elem()
}

func (o PrivateNetworkEndpointOutput) ToPrivateNetworkEndpointOutput() PrivateNetworkEndpointOutput {
	return o
}

func (o PrivateNetworkEndpointOutput) ToPrivateNetworkEndpointOutputWithContext(ctx context.Context) PrivateNetworkEndpointOutput {
	return o
}

// Hostname of the endpoint.
func (o PrivateNetworkEndpointOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateNetworkEndpoint) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// UUID of the documentdb instance.
func (o PrivateNetworkEndpointOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateNetworkEndpoint) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// IPv4 address on the network.
func (o PrivateNetworkEndpointOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateNetworkEndpoint) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// The IP network address within the private subnet. This must be an IPv4 address with a
// CIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)
// service if not set.
func (o PrivateNetworkEndpointOutput) IpNet() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateNetworkEndpoint) pulumi.StringOutput { return v.IpNet }).(pulumi.StringOutput)
}

// Name of the endpoint.
func (o PrivateNetworkEndpointOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateNetworkEndpoint) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Port in the Private Network.
func (o PrivateNetworkEndpointOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *PrivateNetworkEndpoint) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The ID of the private network.
func (o PrivateNetworkEndpointOutput) PrivateNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateNetworkEndpoint) pulumi.StringOutput { return v.PrivateNetworkId }).(pulumi.StringOutput)
}

// The region you want to attach the resource to
func (o PrivateNetworkEndpointOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateNetworkEndpoint) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The zone you want to attach the resource to
func (o PrivateNetworkEndpointOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateNetworkEndpoint) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type PrivateNetworkEndpointArrayOutput struct{ *pulumi.OutputState }

func (PrivateNetworkEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrivateNetworkEndpoint)(nil)).Elem()
}

func (o PrivateNetworkEndpointArrayOutput) ToPrivateNetworkEndpointArrayOutput() PrivateNetworkEndpointArrayOutput {
	return o
}

func (o PrivateNetworkEndpointArrayOutput) ToPrivateNetworkEndpointArrayOutputWithContext(ctx context.Context) PrivateNetworkEndpointArrayOutput {
	return o
}

func (o PrivateNetworkEndpointArrayOutput) Index(i pulumi.IntInput) PrivateNetworkEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PrivateNetworkEndpoint {
		return vs[0].([]*PrivateNetworkEndpoint)[vs[1].(int)]
	}).(PrivateNetworkEndpointOutput)
}

type PrivateNetworkEndpointMapOutput struct{ *pulumi.OutputState }

func (PrivateNetworkEndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrivateNetworkEndpoint)(nil)).Elem()
}

func (o PrivateNetworkEndpointMapOutput) ToPrivateNetworkEndpointMapOutput() PrivateNetworkEndpointMapOutput {
	return o
}

func (o PrivateNetworkEndpointMapOutput) ToPrivateNetworkEndpointMapOutputWithContext(ctx context.Context) PrivateNetworkEndpointMapOutput {
	return o
}

func (o PrivateNetworkEndpointMapOutput) MapIndex(k pulumi.StringInput) PrivateNetworkEndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PrivateNetworkEndpoint {
		return vs[0].(map[string]*PrivateNetworkEndpoint)[vs[1].(string)]
	}).(PrivateNetworkEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateNetworkEndpointInput)(nil)).Elem(), &PrivateNetworkEndpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateNetworkEndpointArrayInput)(nil)).Elem(), PrivateNetworkEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateNetworkEndpointMapInput)(nil)).Elem(), PrivateNetworkEndpointMap{})
	pulumi.RegisterOutputType(PrivateNetworkEndpointOutput{})
	pulumi.RegisterOutputType(PrivateNetworkEndpointArrayOutput{})
	pulumi.RegisterOutputType(PrivateNetworkEndpointMapOutput{})
}
