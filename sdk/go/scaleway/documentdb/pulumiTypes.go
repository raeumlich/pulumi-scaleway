// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package documentdb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

var _ = internal.GetEnvOrDefault

type ReadReplicaDirectAccess struct {
	// The ID of the endpoint of the read replica.
	EndpointId *string `pulumi:"endpointId"`
	// Hostname of the endpoint. Only one of ip and hostname may be set.
	Hostname *string `pulumi:"hostname"`
	// IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.
	Ip *string `pulumi:"ip"`
	// Name of the endpoint.
	Name *string `pulumi:"name"`
	// TCP port of the endpoint.
	Port *int `pulumi:"port"`
}

// ReadReplicaDirectAccessInput is an input type that accepts ReadReplicaDirectAccessArgs and ReadReplicaDirectAccessOutput values.
// You can construct a concrete instance of `ReadReplicaDirectAccessInput` via:
//
//	ReadReplicaDirectAccessArgs{...}
type ReadReplicaDirectAccessInput interface {
	pulumi.Input

	ToReadReplicaDirectAccessOutput() ReadReplicaDirectAccessOutput
	ToReadReplicaDirectAccessOutputWithContext(context.Context) ReadReplicaDirectAccessOutput
}

type ReadReplicaDirectAccessArgs struct {
	// The ID of the endpoint of the read replica.
	EndpointId pulumi.StringPtrInput `pulumi:"endpointId"`
	// Hostname of the endpoint. Only one of ip and hostname may be set.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// Name of the endpoint.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// TCP port of the endpoint.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (ReadReplicaDirectAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReadReplicaDirectAccess)(nil)).Elem()
}

func (i ReadReplicaDirectAccessArgs) ToReadReplicaDirectAccessOutput() ReadReplicaDirectAccessOutput {
	return i.ToReadReplicaDirectAccessOutputWithContext(context.Background())
}

func (i ReadReplicaDirectAccessArgs) ToReadReplicaDirectAccessOutputWithContext(ctx context.Context) ReadReplicaDirectAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadReplicaDirectAccessOutput)
}

func (i ReadReplicaDirectAccessArgs) ToReadReplicaDirectAccessPtrOutput() ReadReplicaDirectAccessPtrOutput {
	return i.ToReadReplicaDirectAccessPtrOutputWithContext(context.Background())
}

func (i ReadReplicaDirectAccessArgs) ToReadReplicaDirectAccessPtrOutputWithContext(ctx context.Context) ReadReplicaDirectAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadReplicaDirectAccessOutput).ToReadReplicaDirectAccessPtrOutputWithContext(ctx)
}

// ReadReplicaDirectAccessPtrInput is an input type that accepts ReadReplicaDirectAccessArgs, ReadReplicaDirectAccessPtr and ReadReplicaDirectAccessPtrOutput values.
// You can construct a concrete instance of `ReadReplicaDirectAccessPtrInput` via:
//
//	        ReadReplicaDirectAccessArgs{...}
//
//	or:
//
//	        nil
type ReadReplicaDirectAccessPtrInput interface {
	pulumi.Input

	ToReadReplicaDirectAccessPtrOutput() ReadReplicaDirectAccessPtrOutput
	ToReadReplicaDirectAccessPtrOutputWithContext(context.Context) ReadReplicaDirectAccessPtrOutput
}

type readReplicaDirectAccessPtrType ReadReplicaDirectAccessArgs

func ReadReplicaDirectAccessPtr(v *ReadReplicaDirectAccessArgs) ReadReplicaDirectAccessPtrInput {
	return (*readReplicaDirectAccessPtrType)(v)
}

func (*readReplicaDirectAccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReadReplicaDirectAccess)(nil)).Elem()
}

func (i *readReplicaDirectAccessPtrType) ToReadReplicaDirectAccessPtrOutput() ReadReplicaDirectAccessPtrOutput {
	return i.ToReadReplicaDirectAccessPtrOutputWithContext(context.Background())
}

func (i *readReplicaDirectAccessPtrType) ToReadReplicaDirectAccessPtrOutputWithContext(ctx context.Context) ReadReplicaDirectAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadReplicaDirectAccessPtrOutput)
}

type ReadReplicaDirectAccessOutput struct{ *pulumi.OutputState }

func (ReadReplicaDirectAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReadReplicaDirectAccess)(nil)).Elem()
}

func (o ReadReplicaDirectAccessOutput) ToReadReplicaDirectAccessOutput() ReadReplicaDirectAccessOutput {
	return o
}

func (o ReadReplicaDirectAccessOutput) ToReadReplicaDirectAccessOutputWithContext(ctx context.Context) ReadReplicaDirectAccessOutput {
	return o
}

func (o ReadReplicaDirectAccessOutput) ToReadReplicaDirectAccessPtrOutput() ReadReplicaDirectAccessPtrOutput {
	return o.ToReadReplicaDirectAccessPtrOutputWithContext(context.Background())
}

func (o ReadReplicaDirectAccessOutput) ToReadReplicaDirectAccessPtrOutputWithContext(ctx context.Context) ReadReplicaDirectAccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReadReplicaDirectAccess) *ReadReplicaDirectAccess {
		return &v
	}).(ReadReplicaDirectAccessPtrOutput)
}

// The ID of the endpoint of the read replica.
func (o ReadReplicaDirectAccessOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadReplicaDirectAccess) *string { return v.EndpointId }).(pulumi.StringPtrOutput)
}

// Hostname of the endpoint. Only one of ip and hostname may be set.
func (o ReadReplicaDirectAccessOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadReplicaDirectAccess) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.
func (o ReadReplicaDirectAccessOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadReplicaDirectAccess) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// Name of the endpoint.
func (o ReadReplicaDirectAccessOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadReplicaDirectAccess) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// TCP port of the endpoint.
func (o ReadReplicaDirectAccessOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReadReplicaDirectAccess) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type ReadReplicaDirectAccessPtrOutput struct{ *pulumi.OutputState }

func (ReadReplicaDirectAccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReadReplicaDirectAccess)(nil)).Elem()
}

func (o ReadReplicaDirectAccessPtrOutput) ToReadReplicaDirectAccessPtrOutput() ReadReplicaDirectAccessPtrOutput {
	return o
}

func (o ReadReplicaDirectAccessPtrOutput) ToReadReplicaDirectAccessPtrOutputWithContext(ctx context.Context) ReadReplicaDirectAccessPtrOutput {
	return o
}

func (o ReadReplicaDirectAccessPtrOutput) Elem() ReadReplicaDirectAccessOutput {
	return o.ApplyT(func(v *ReadReplicaDirectAccess) ReadReplicaDirectAccess {
		if v != nil {
			return *v
		}
		var ret ReadReplicaDirectAccess
		return ret
	}).(ReadReplicaDirectAccessOutput)
}

// The ID of the endpoint of the read replica.
func (o ReadReplicaDirectAccessPtrOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadReplicaDirectAccess) *string {
		if v == nil {
			return nil
		}
		return v.EndpointId
	}).(pulumi.StringPtrOutput)
}

// Hostname of the endpoint. Only one of ip and hostname may be set.
func (o ReadReplicaDirectAccessPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadReplicaDirectAccess) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.
func (o ReadReplicaDirectAccessPtrOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadReplicaDirectAccess) *string {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(pulumi.StringPtrOutput)
}

// Name of the endpoint.
func (o ReadReplicaDirectAccessPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadReplicaDirectAccess) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// TCP port of the endpoint.
func (o ReadReplicaDirectAccessPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReadReplicaDirectAccess) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

type ReadReplicaPrivateNetwork struct {
	// The ID of the endpoint of the read replica.
	EndpointId *string `pulumi:"endpointId"`
	// Hostname of the endpoint. Only one of ip and hostname may be set.
	Hostname *string `pulumi:"hostname"`
	// IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.
	Ip *string `pulumi:"ip"`
	// Name of the endpoint.
	Name *string `pulumi:"name"`
	// TCP port of the endpoint.
	Port *int `pulumi:"port"`
	// UUID of the private network to be connected to the read replica.
	PrivateNetworkId string `pulumi:"privateNetworkId"`
	// The IP network address within the private subnet. This must be an IPv4 address with a
	// CIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)
	// service if not set.
	ServiceIp *string `pulumi:"serviceIp"`
	Zone      *string `pulumi:"zone"`
}

// ReadReplicaPrivateNetworkInput is an input type that accepts ReadReplicaPrivateNetworkArgs and ReadReplicaPrivateNetworkOutput values.
// You can construct a concrete instance of `ReadReplicaPrivateNetworkInput` via:
//
//	ReadReplicaPrivateNetworkArgs{...}
type ReadReplicaPrivateNetworkInput interface {
	pulumi.Input

	ToReadReplicaPrivateNetworkOutput() ReadReplicaPrivateNetworkOutput
	ToReadReplicaPrivateNetworkOutputWithContext(context.Context) ReadReplicaPrivateNetworkOutput
}

type ReadReplicaPrivateNetworkArgs struct {
	// The ID of the endpoint of the read replica.
	EndpointId pulumi.StringPtrInput `pulumi:"endpointId"`
	// Hostname of the endpoint. Only one of ip and hostname may be set.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// Name of the endpoint.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// TCP port of the endpoint.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// UUID of the private network to be connected to the read replica.
	PrivateNetworkId pulumi.StringInput `pulumi:"privateNetworkId"`
	// The IP network address within the private subnet. This must be an IPv4 address with a
	// CIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)
	// service if not set.
	ServiceIp pulumi.StringPtrInput `pulumi:"serviceIp"`
	Zone      pulumi.StringPtrInput `pulumi:"zone"`
}

func (ReadReplicaPrivateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReadReplicaPrivateNetwork)(nil)).Elem()
}

func (i ReadReplicaPrivateNetworkArgs) ToReadReplicaPrivateNetworkOutput() ReadReplicaPrivateNetworkOutput {
	return i.ToReadReplicaPrivateNetworkOutputWithContext(context.Background())
}

func (i ReadReplicaPrivateNetworkArgs) ToReadReplicaPrivateNetworkOutputWithContext(ctx context.Context) ReadReplicaPrivateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadReplicaPrivateNetworkOutput)
}

func (i ReadReplicaPrivateNetworkArgs) ToReadReplicaPrivateNetworkPtrOutput() ReadReplicaPrivateNetworkPtrOutput {
	return i.ToReadReplicaPrivateNetworkPtrOutputWithContext(context.Background())
}

func (i ReadReplicaPrivateNetworkArgs) ToReadReplicaPrivateNetworkPtrOutputWithContext(ctx context.Context) ReadReplicaPrivateNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadReplicaPrivateNetworkOutput).ToReadReplicaPrivateNetworkPtrOutputWithContext(ctx)
}

// ReadReplicaPrivateNetworkPtrInput is an input type that accepts ReadReplicaPrivateNetworkArgs, ReadReplicaPrivateNetworkPtr and ReadReplicaPrivateNetworkPtrOutput values.
// You can construct a concrete instance of `ReadReplicaPrivateNetworkPtrInput` via:
//
//	        ReadReplicaPrivateNetworkArgs{...}
//
//	or:
//
//	        nil
type ReadReplicaPrivateNetworkPtrInput interface {
	pulumi.Input

	ToReadReplicaPrivateNetworkPtrOutput() ReadReplicaPrivateNetworkPtrOutput
	ToReadReplicaPrivateNetworkPtrOutputWithContext(context.Context) ReadReplicaPrivateNetworkPtrOutput
}

type readReplicaPrivateNetworkPtrType ReadReplicaPrivateNetworkArgs

func ReadReplicaPrivateNetworkPtr(v *ReadReplicaPrivateNetworkArgs) ReadReplicaPrivateNetworkPtrInput {
	return (*readReplicaPrivateNetworkPtrType)(v)
}

func (*readReplicaPrivateNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReadReplicaPrivateNetwork)(nil)).Elem()
}

func (i *readReplicaPrivateNetworkPtrType) ToReadReplicaPrivateNetworkPtrOutput() ReadReplicaPrivateNetworkPtrOutput {
	return i.ToReadReplicaPrivateNetworkPtrOutputWithContext(context.Background())
}

func (i *readReplicaPrivateNetworkPtrType) ToReadReplicaPrivateNetworkPtrOutputWithContext(ctx context.Context) ReadReplicaPrivateNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadReplicaPrivateNetworkPtrOutput)
}

type ReadReplicaPrivateNetworkOutput struct{ *pulumi.OutputState }

func (ReadReplicaPrivateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReadReplicaPrivateNetwork)(nil)).Elem()
}

func (o ReadReplicaPrivateNetworkOutput) ToReadReplicaPrivateNetworkOutput() ReadReplicaPrivateNetworkOutput {
	return o
}

func (o ReadReplicaPrivateNetworkOutput) ToReadReplicaPrivateNetworkOutputWithContext(ctx context.Context) ReadReplicaPrivateNetworkOutput {
	return o
}

func (o ReadReplicaPrivateNetworkOutput) ToReadReplicaPrivateNetworkPtrOutput() ReadReplicaPrivateNetworkPtrOutput {
	return o.ToReadReplicaPrivateNetworkPtrOutputWithContext(context.Background())
}

func (o ReadReplicaPrivateNetworkOutput) ToReadReplicaPrivateNetworkPtrOutputWithContext(ctx context.Context) ReadReplicaPrivateNetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReadReplicaPrivateNetwork) *ReadReplicaPrivateNetwork {
		return &v
	}).(ReadReplicaPrivateNetworkPtrOutput)
}

// The ID of the endpoint of the read replica.
func (o ReadReplicaPrivateNetworkOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadReplicaPrivateNetwork) *string { return v.EndpointId }).(pulumi.StringPtrOutput)
}

// Hostname of the endpoint. Only one of ip and hostname may be set.
func (o ReadReplicaPrivateNetworkOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadReplicaPrivateNetwork) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.
func (o ReadReplicaPrivateNetworkOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadReplicaPrivateNetwork) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// Name of the endpoint.
func (o ReadReplicaPrivateNetworkOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadReplicaPrivateNetwork) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// TCP port of the endpoint.
func (o ReadReplicaPrivateNetworkOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReadReplicaPrivateNetwork) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// UUID of the private network to be connected to the read replica.
func (o ReadReplicaPrivateNetworkOutput) PrivateNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v ReadReplicaPrivateNetwork) string { return v.PrivateNetworkId }).(pulumi.StringOutput)
}

// The IP network address within the private subnet. This must be an IPv4 address with a
// CIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)
// service if not set.
func (o ReadReplicaPrivateNetworkOutput) ServiceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadReplicaPrivateNetwork) *string { return v.ServiceIp }).(pulumi.StringPtrOutput)
}

func (o ReadReplicaPrivateNetworkOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadReplicaPrivateNetwork) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type ReadReplicaPrivateNetworkPtrOutput struct{ *pulumi.OutputState }

func (ReadReplicaPrivateNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReadReplicaPrivateNetwork)(nil)).Elem()
}

func (o ReadReplicaPrivateNetworkPtrOutput) ToReadReplicaPrivateNetworkPtrOutput() ReadReplicaPrivateNetworkPtrOutput {
	return o
}

func (o ReadReplicaPrivateNetworkPtrOutput) ToReadReplicaPrivateNetworkPtrOutputWithContext(ctx context.Context) ReadReplicaPrivateNetworkPtrOutput {
	return o
}

func (o ReadReplicaPrivateNetworkPtrOutput) Elem() ReadReplicaPrivateNetworkOutput {
	return o.ApplyT(func(v *ReadReplicaPrivateNetwork) ReadReplicaPrivateNetwork {
		if v != nil {
			return *v
		}
		var ret ReadReplicaPrivateNetwork
		return ret
	}).(ReadReplicaPrivateNetworkOutput)
}

// The ID of the endpoint of the read replica.
func (o ReadReplicaPrivateNetworkPtrOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadReplicaPrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.EndpointId
	}).(pulumi.StringPtrOutput)
}

// Hostname of the endpoint. Only one of ip and hostname may be set.
func (o ReadReplicaPrivateNetworkPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadReplicaPrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.
func (o ReadReplicaPrivateNetworkPtrOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadReplicaPrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(pulumi.StringPtrOutput)
}

// Name of the endpoint.
func (o ReadReplicaPrivateNetworkPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadReplicaPrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// TCP port of the endpoint.
func (o ReadReplicaPrivateNetworkPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReadReplicaPrivateNetwork) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// UUID of the private network to be connected to the read replica.
func (o ReadReplicaPrivateNetworkPtrOutput) PrivateNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadReplicaPrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateNetworkId
	}).(pulumi.StringPtrOutput)
}

// The IP network address within the private subnet. This must be an IPv4 address with a
// CIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)
// service if not set.
func (o ReadReplicaPrivateNetworkPtrOutput) ServiceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadReplicaPrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.ServiceIp
	}).(pulumi.StringPtrOutput)
}

func (o ReadReplicaPrivateNetworkPtrOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadReplicaPrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Zone
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReadReplicaDirectAccessInput)(nil)).Elem(), ReadReplicaDirectAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReadReplicaDirectAccessPtrInput)(nil)).Elem(), ReadReplicaDirectAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReadReplicaPrivateNetworkInput)(nil)).Elem(), ReadReplicaPrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReadReplicaPrivateNetworkPtrInput)(nil)).Elem(), ReadReplicaPrivateNetworkArgs{})
	pulumi.RegisterOutputType(ReadReplicaDirectAccessOutput{})
	pulumi.RegisterOutputType(ReadReplicaDirectAccessPtrOutput{})
	pulumi.RegisterOutputType(ReadReplicaPrivateNetworkOutput{})
	pulumi.RegisterOutputType(ReadReplicaPrivateNetworkPtrOutput{})
}
