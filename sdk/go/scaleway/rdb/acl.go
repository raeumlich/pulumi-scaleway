// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rdb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Database instance authorized IPs.
// For more information, see [the documentation](https://developers.scaleway.com/en/products/rdb/api/#acl-rules-allowed-ips).
//
// ## Example Usage
//
// ### Basic
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/rdb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := rdb.NewACL(ctx, "main", &rdb.ACLArgs{
//				InstanceId: pulumi.Any(scaleway_rdb_instance.Main.Id),
//				AclRules: rdb.ACLAclRuleArray{
//					&rdb.ACLAclRuleArgs{
//						Ip:          pulumi.String("1.2.3.4/32"),
//						Description: pulumi.String("foo"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Database Instance can be imported using the `{region}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:rdb/aCL:ACL acl01 fr-par/11111111-1111-1111-1111-111111111111
// ```
type ACL struct {
	pulumi.CustomResourceState

	// A list of ACLs (structure is described below)
	AclRules ACLAclRuleArrayOutput `pulumi:"aclRules"`
	// UUID of the rdb instance.
	//
	// > **Important:** Updates to `instanceId` will recreate the Database ACL.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// `region`) The region in which the Database Instance should be created.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewACL registers a new resource with the given unique name, arguments, and options.
func NewACL(ctx *pulumi.Context,
	name string, args *ACLArgs, opts ...pulumi.ResourceOption) (*ACL, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AclRules == nil {
		return nil, errors.New("invalid value for required argument 'AclRules'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ACL
	err := ctx.RegisterResource("scaleway:rdb/aCL:ACL", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetACL gets an existing ACL resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetACL(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ACLState, opts ...pulumi.ResourceOption) (*ACL, error) {
	var resource ACL
	err := ctx.ReadResource("scaleway:rdb/aCL:ACL", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ACL resources.
type aclState struct {
	// A list of ACLs (structure is described below)
	AclRules []ACLAclRule `pulumi:"aclRules"`
	// UUID of the rdb instance.
	//
	// > **Important:** Updates to `instanceId` will recreate the Database ACL.
	InstanceId *string `pulumi:"instanceId"`
	// `region`) The region in which the Database Instance should be created.
	Region *string `pulumi:"region"`
}

type ACLState struct {
	// A list of ACLs (structure is described below)
	AclRules ACLAclRuleArrayInput
	// UUID of the rdb instance.
	//
	// > **Important:** Updates to `instanceId` will recreate the Database ACL.
	InstanceId pulumi.StringPtrInput
	// `region`) The region in which the Database Instance should be created.
	Region pulumi.StringPtrInput
}

func (ACLState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclState)(nil)).Elem()
}

type aclArgs struct {
	// A list of ACLs (structure is described below)
	AclRules []ACLAclRule `pulumi:"aclRules"`
	// UUID of the rdb instance.
	//
	// > **Important:** Updates to `instanceId` will recreate the Database ACL.
	InstanceId string `pulumi:"instanceId"`
	// `region`) The region in which the Database Instance should be created.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a ACL resource.
type ACLArgs struct {
	// A list of ACLs (structure is described below)
	AclRules ACLAclRuleArrayInput
	// UUID of the rdb instance.
	//
	// > **Important:** Updates to `instanceId` will recreate the Database ACL.
	InstanceId pulumi.StringInput
	// `region`) The region in which the Database Instance should be created.
	Region pulumi.StringPtrInput
}

func (ACLArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclArgs)(nil)).Elem()
}

type ACLInput interface {
	pulumi.Input

	ToACLOutput() ACLOutput
	ToACLOutputWithContext(ctx context.Context) ACLOutput
}

func (*ACL) ElementType() reflect.Type {
	return reflect.TypeOf((**ACL)(nil)).Elem()
}

func (i *ACL) ToACLOutput() ACLOutput {
	return i.ToACLOutputWithContext(context.Background())
}

func (i *ACL) ToACLOutputWithContext(ctx context.Context) ACLOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACLOutput)
}

// ACLArrayInput is an input type that accepts ACLArray and ACLArrayOutput values.
// You can construct a concrete instance of `ACLArrayInput` via:
//
//	ACLArray{ ACLArgs{...} }
type ACLArrayInput interface {
	pulumi.Input

	ToACLArrayOutput() ACLArrayOutput
	ToACLArrayOutputWithContext(context.Context) ACLArrayOutput
}

type ACLArray []ACLInput

func (ACLArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ACL)(nil)).Elem()
}

func (i ACLArray) ToACLArrayOutput() ACLArrayOutput {
	return i.ToACLArrayOutputWithContext(context.Background())
}

func (i ACLArray) ToACLArrayOutputWithContext(ctx context.Context) ACLArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACLArrayOutput)
}

// ACLMapInput is an input type that accepts ACLMap and ACLMapOutput values.
// You can construct a concrete instance of `ACLMapInput` via:
//
//	ACLMap{ "key": ACLArgs{...} }
type ACLMapInput interface {
	pulumi.Input

	ToACLMapOutput() ACLMapOutput
	ToACLMapOutputWithContext(context.Context) ACLMapOutput
}

type ACLMap map[string]ACLInput

func (ACLMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ACL)(nil)).Elem()
}

func (i ACLMap) ToACLMapOutput() ACLMapOutput {
	return i.ToACLMapOutputWithContext(context.Background())
}

func (i ACLMap) ToACLMapOutputWithContext(ctx context.Context) ACLMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACLMapOutput)
}

type ACLOutput struct{ *pulumi.OutputState }

func (ACLOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACL)(nil)).Elem()
}

func (o ACLOutput) ToACLOutput() ACLOutput {
	return o
}

func (o ACLOutput) ToACLOutputWithContext(ctx context.Context) ACLOutput {
	return o
}

// A list of ACLs (structure is described below)
func (o ACLOutput) AclRules() ACLAclRuleArrayOutput {
	return o.ApplyT(func(v *ACL) ACLAclRuleArrayOutput { return v.AclRules }).(ACLAclRuleArrayOutput)
}

// UUID of the rdb instance.
//
// > **Important:** Updates to `instanceId` will recreate the Database ACL.
func (o ACLOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ACL) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// `region`) The region in which the Database Instance should be created.
func (o ACLOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ACL) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type ACLArrayOutput struct{ *pulumi.OutputState }

func (ACLArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ACL)(nil)).Elem()
}

func (o ACLArrayOutput) ToACLArrayOutput() ACLArrayOutput {
	return o
}

func (o ACLArrayOutput) ToACLArrayOutputWithContext(ctx context.Context) ACLArrayOutput {
	return o
}

func (o ACLArrayOutput) Index(i pulumi.IntInput) ACLOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ACL {
		return vs[0].([]*ACL)[vs[1].(int)]
	}).(ACLOutput)
}

type ACLMapOutput struct{ *pulumi.OutputState }

func (ACLMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ACL)(nil)).Elem()
}

func (o ACLMapOutput) ToACLMapOutput() ACLMapOutput {
	return o
}

func (o ACLMapOutput) ToACLMapOutputWithContext(ctx context.Context) ACLMapOutput {
	return o
}

func (o ACLMapOutput) MapIndex(k pulumi.StringInput) ACLOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ACL {
		return vs[0].(map[string]*ACL)[vs[1].(string)]
	}).(ACLOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ACLInput)(nil)).Elem(), &ACL{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACLArrayInput)(nil)).Elem(), ACLArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACLMapInput)(nil)).Elem(), ACLMap{})
	pulumi.RegisterOutputType(ACLOutput{})
	pulumi.RegisterOutputType(ACLArrayOutput{})
	pulumi.RegisterOutputType(ACLMapOutput{})
}
