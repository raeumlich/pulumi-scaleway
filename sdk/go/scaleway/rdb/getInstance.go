// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rdb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Gets information about an RDB instance. For further information see our [developers website](https://developers.scaleway.com/en/products/rdb/api/#database-instance)
func LookupInstance(ctx *pulumi.Context, args *LookupInstanceArgs, opts ...pulumi.InvokeOption) (*LookupInstanceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupInstanceResult
	err := ctx.Invoke("scaleway:rdb/getInstance:getInstance", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInstance.
type LookupInstanceArgs struct {
	// The RDB instance ID.
	// Only one of `name` and `instanceId` should be specified.
	InstanceId *string `pulumi:"instanceId"`
	// The name of the RDB instance.
	// Only one of `name` and `instanceId` should be specified.
	Name *string `pulumi:"name"`
	// The ID of the project the RDB instance is in. Can be used to filter instances when using `name`.
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region in which the RDB instance exists.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getInstance.
type LookupInstanceResult struct {
	BackupSameRegion        bool   `pulumi:"backupSameRegion"`
	BackupScheduleFrequency int    `pulumi:"backupScheduleFrequency"`
	BackupScheduleRetention int    `pulumi:"backupScheduleRetention"`
	Certificate             string `pulumi:"certificate"`
	DisableBackup           bool   `pulumi:"disableBackup"`
	EndpointIp              string `pulumi:"endpointIp"`
	EndpointPort            int    `pulumi:"endpointPort"`
	Engine                  string `pulumi:"engine"`
	// The provider-assigned unique ID for this managed resource.
	Id              string                      `pulumi:"id"`
	InitSettings    map[string]string           `pulumi:"initSettings"`
	InstanceId      *string                     `pulumi:"instanceId"`
	IsHaCluster     bool                        `pulumi:"isHaCluster"`
	LoadBalancers   []GetInstanceLoadBalancer   `pulumi:"loadBalancers"`
	Name            *string                     `pulumi:"name"`
	NodeType        string                      `pulumi:"nodeType"`
	OrganizationId  string                      `pulumi:"organizationId"`
	Password        string                      `pulumi:"password"`
	PrivateNetworks []GetInstancePrivateNetwork `pulumi:"privateNetworks"`
	ProjectId       *string                     `pulumi:"projectId"`
	ReadReplicas    []GetInstanceReadReplica    `pulumi:"readReplicas"`
	Region          *string                     `pulumi:"region"`
	Settings        map[string]string           `pulumi:"settings"`
	Tags            []string                    `pulumi:"tags"`
	UserName        string                      `pulumi:"userName"`
	VolumeSizeInGb  int                         `pulumi:"volumeSizeInGb"`
	VolumeType      string                      `pulumi:"volumeType"`
}

func LookupInstanceOutput(ctx *pulumi.Context, args LookupInstanceOutputArgs, opts ...pulumi.InvokeOption) LookupInstanceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupInstanceResult, error) {
			args := v.(LookupInstanceArgs)
			r, err := LookupInstance(ctx, &args, opts...)
			var s LookupInstanceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupInstanceResultOutput)
}

// A collection of arguments for invoking getInstance.
type LookupInstanceOutputArgs struct {
	// The RDB instance ID.
	// Only one of `name` and `instanceId` should be specified.
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// The name of the RDB instance.
	// Only one of `name` and `instanceId` should be specified.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The ID of the project the RDB instance is in. Can be used to filter instances when using `name`.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// `region`) The region in which the RDB instance exists.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (LookupInstanceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstanceArgs)(nil)).Elem()
}

// A collection of values returned by getInstance.
type LookupInstanceResultOutput struct{ *pulumi.OutputState }

func (LookupInstanceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstanceResult)(nil)).Elem()
}

func (o LookupInstanceResultOutput) ToLookupInstanceResultOutput() LookupInstanceResultOutput {
	return o
}

func (o LookupInstanceResultOutput) ToLookupInstanceResultOutputWithContext(ctx context.Context) LookupInstanceResultOutput {
	return o
}

func (o LookupInstanceResultOutput) BackupSameRegion() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInstanceResult) bool { return v.BackupSameRegion }).(pulumi.BoolOutput)
}

func (o LookupInstanceResultOutput) BackupScheduleFrequency() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInstanceResult) int { return v.BackupScheduleFrequency }).(pulumi.IntOutput)
}

func (o LookupInstanceResultOutput) BackupScheduleRetention() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInstanceResult) int { return v.BackupScheduleRetention }).(pulumi.IntOutput)
}

func (o LookupInstanceResultOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.Certificate }).(pulumi.StringOutput)
}

func (o LookupInstanceResultOutput) DisableBackup() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInstanceResult) bool { return v.DisableBackup }).(pulumi.BoolOutput)
}

func (o LookupInstanceResultOutput) EndpointIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.EndpointIp }).(pulumi.StringOutput)
}

func (o LookupInstanceResultOutput) EndpointPort() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInstanceResult) int { return v.EndpointPort }).(pulumi.IntOutput)
}

func (o LookupInstanceResultOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.Engine }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupInstanceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupInstanceResultOutput) InitSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupInstanceResult) map[string]string { return v.InitSettings }).(pulumi.StringMapOutput)
}

func (o LookupInstanceResultOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInstanceResult) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

func (o LookupInstanceResultOutput) IsHaCluster() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInstanceResult) bool { return v.IsHaCluster }).(pulumi.BoolOutput)
}

func (o LookupInstanceResultOutput) LoadBalancers() GetInstanceLoadBalancerArrayOutput {
	return o.ApplyT(func(v LookupInstanceResult) []GetInstanceLoadBalancer { return v.LoadBalancers }).(GetInstanceLoadBalancerArrayOutput)
}

func (o LookupInstanceResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInstanceResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupInstanceResultOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.NodeType }).(pulumi.StringOutput)
}

func (o LookupInstanceResultOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.OrganizationId }).(pulumi.StringOutput)
}

func (o LookupInstanceResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.Password }).(pulumi.StringOutput)
}

func (o LookupInstanceResultOutput) PrivateNetworks() GetInstancePrivateNetworkArrayOutput {
	return o.ApplyT(func(v LookupInstanceResult) []GetInstancePrivateNetwork { return v.PrivateNetworks }).(GetInstancePrivateNetworkArrayOutput)
}

func (o LookupInstanceResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInstanceResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

func (o LookupInstanceResultOutput) ReadReplicas() GetInstanceReadReplicaArrayOutput {
	return o.ApplyT(func(v LookupInstanceResult) []GetInstanceReadReplica { return v.ReadReplicas }).(GetInstanceReadReplicaArrayOutput)
}

func (o LookupInstanceResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInstanceResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func (o LookupInstanceResultOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupInstanceResult) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

func (o LookupInstanceResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupInstanceResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o LookupInstanceResultOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.UserName }).(pulumi.StringOutput)
}

func (o LookupInstanceResultOutput) VolumeSizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInstanceResult) int { return v.VolumeSizeInGb }).(pulumi.IntOutput)
}

func (o LookupInstanceResultOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.VolumeType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupInstanceResultOutput{})
}
