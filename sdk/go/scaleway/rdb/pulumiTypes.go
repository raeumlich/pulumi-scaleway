// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rdb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

var _ = internal.GetEnvOrDefault

type ACLAclRule struct {
	// A text describing this rule. Default description: `IP allowed`
	Description *string `pulumi:"description"`
	// The ip range to whitelist in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)
	Ip string `pulumi:"ip"`
}

// ACLAclRuleInput is an input type that accepts ACLAclRuleArgs and ACLAclRuleOutput values.
// You can construct a concrete instance of `ACLAclRuleInput` via:
//
//	ACLAclRuleArgs{...}
type ACLAclRuleInput interface {
	pulumi.Input

	ToACLAclRuleOutput() ACLAclRuleOutput
	ToACLAclRuleOutputWithContext(context.Context) ACLAclRuleOutput
}

type ACLAclRuleArgs struct {
	// A text describing this rule. Default description: `IP allowed`
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The ip range to whitelist in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)
	Ip pulumi.StringInput `pulumi:"ip"`
}

func (ACLAclRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACLAclRule)(nil)).Elem()
}

func (i ACLAclRuleArgs) ToACLAclRuleOutput() ACLAclRuleOutput {
	return i.ToACLAclRuleOutputWithContext(context.Background())
}

func (i ACLAclRuleArgs) ToACLAclRuleOutputWithContext(ctx context.Context) ACLAclRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACLAclRuleOutput)
}

// ACLAclRuleArrayInput is an input type that accepts ACLAclRuleArray and ACLAclRuleArrayOutput values.
// You can construct a concrete instance of `ACLAclRuleArrayInput` via:
//
//	ACLAclRuleArray{ ACLAclRuleArgs{...} }
type ACLAclRuleArrayInput interface {
	pulumi.Input

	ToACLAclRuleArrayOutput() ACLAclRuleArrayOutput
	ToACLAclRuleArrayOutputWithContext(context.Context) ACLAclRuleArrayOutput
}

type ACLAclRuleArray []ACLAclRuleInput

func (ACLAclRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ACLAclRule)(nil)).Elem()
}

func (i ACLAclRuleArray) ToACLAclRuleArrayOutput() ACLAclRuleArrayOutput {
	return i.ToACLAclRuleArrayOutputWithContext(context.Background())
}

func (i ACLAclRuleArray) ToACLAclRuleArrayOutputWithContext(ctx context.Context) ACLAclRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACLAclRuleArrayOutput)
}

type ACLAclRuleOutput struct{ *pulumi.OutputState }

func (ACLAclRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACLAclRule)(nil)).Elem()
}

func (o ACLAclRuleOutput) ToACLAclRuleOutput() ACLAclRuleOutput {
	return o
}

func (o ACLAclRuleOutput) ToACLAclRuleOutputWithContext(ctx context.Context) ACLAclRuleOutput {
	return o
}

// A text describing this rule. Default description: `IP allowed`
func (o ACLAclRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACLAclRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The ip range to whitelist in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)
func (o ACLAclRuleOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v ACLAclRule) string { return v.Ip }).(pulumi.StringOutput)
}

type ACLAclRuleArrayOutput struct{ *pulumi.OutputState }

func (ACLAclRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ACLAclRule)(nil)).Elem()
}

func (o ACLAclRuleArrayOutput) ToACLAclRuleArrayOutput() ACLAclRuleArrayOutput {
	return o
}

func (o ACLAclRuleArrayOutput) ToACLAclRuleArrayOutputWithContext(ctx context.Context) ACLAclRuleArrayOutput {
	return o
}

func (o ACLAclRuleArrayOutput) Index(i pulumi.IntInput) ACLAclRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ACLAclRule {
		return vs[0].([]ACLAclRule)[vs[1].(int)]
	}).(ACLAclRuleOutput)
}

type InstanceLoadBalancer struct {
	// The ID of the endpoint.
	EndpointId *string `pulumi:"endpointId"`
	// Hostname of the endpoint.
	Hostname *string `pulumi:"hostname"`
	// IPv4 address on the network.
	Ip *string `pulumi:"ip"`
	// The name of the Database Instance.
	Name *string `pulumi:"name"`
	// Port in the Private Network.
	Port *int `pulumi:"port"`
}

// InstanceLoadBalancerInput is an input type that accepts InstanceLoadBalancerArgs and InstanceLoadBalancerOutput values.
// You can construct a concrete instance of `InstanceLoadBalancerInput` via:
//
//	InstanceLoadBalancerArgs{...}
type InstanceLoadBalancerInput interface {
	pulumi.Input

	ToInstanceLoadBalancerOutput() InstanceLoadBalancerOutput
	ToInstanceLoadBalancerOutputWithContext(context.Context) InstanceLoadBalancerOutput
}

type InstanceLoadBalancerArgs struct {
	// The ID of the endpoint.
	EndpointId pulumi.StringPtrInput `pulumi:"endpointId"`
	// Hostname of the endpoint.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// IPv4 address on the network.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// The name of the Database Instance.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Port in the Private Network.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (InstanceLoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceLoadBalancer)(nil)).Elem()
}

func (i InstanceLoadBalancerArgs) ToInstanceLoadBalancerOutput() InstanceLoadBalancerOutput {
	return i.ToInstanceLoadBalancerOutputWithContext(context.Background())
}

func (i InstanceLoadBalancerArgs) ToInstanceLoadBalancerOutputWithContext(ctx context.Context) InstanceLoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceLoadBalancerOutput)
}

// InstanceLoadBalancerArrayInput is an input type that accepts InstanceLoadBalancerArray and InstanceLoadBalancerArrayOutput values.
// You can construct a concrete instance of `InstanceLoadBalancerArrayInput` via:
//
//	InstanceLoadBalancerArray{ InstanceLoadBalancerArgs{...} }
type InstanceLoadBalancerArrayInput interface {
	pulumi.Input

	ToInstanceLoadBalancerArrayOutput() InstanceLoadBalancerArrayOutput
	ToInstanceLoadBalancerArrayOutputWithContext(context.Context) InstanceLoadBalancerArrayOutput
}

type InstanceLoadBalancerArray []InstanceLoadBalancerInput

func (InstanceLoadBalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceLoadBalancer)(nil)).Elem()
}

func (i InstanceLoadBalancerArray) ToInstanceLoadBalancerArrayOutput() InstanceLoadBalancerArrayOutput {
	return i.ToInstanceLoadBalancerArrayOutputWithContext(context.Background())
}

func (i InstanceLoadBalancerArray) ToInstanceLoadBalancerArrayOutputWithContext(ctx context.Context) InstanceLoadBalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceLoadBalancerArrayOutput)
}

type InstanceLoadBalancerOutput struct{ *pulumi.OutputState }

func (InstanceLoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceLoadBalancer)(nil)).Elem()
}

func (o InstanceLoadBalancerOutput) ToInstanceLoadBalancerOutput() InstanceLoadBalancerOutput {
	return o
}

func (o InstanceLoadBalancerOutput) ToInstanceLoadBalancerOutputWithContext(ctx context.Context) InstanceLoadBalancerOutput {
	return o
}

// The ID of the endpoint.
func (o InstanceLoadBalancerOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceLoadBalancer) *string { return v.EndpointId }).(pulumi.StringPtrOutput)
}

// Hostname of the endpoint.
func (o InstanceLoadBalancerOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceLoadBalancer) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// IPv4 address on the network.
func (o InstanceLoadBalancerOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceLoadBalancer) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// The name of the Database Instance.
func (o InstanceLoadBalancerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceLoadBalancer) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Port in the Private Network.
func (o InstanceLoadBalancerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceLoadBalancer) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type InstanceLoadBalancerArrayOutput struct{ *pulumi.OutputState }

func (InstanceLoadBalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceLoadBalancer)(nil)).Elem()
}

func (o InstanceLoadBalancerArrayOutput) ToInstanceLoadBalancerArrayOutput() InstanceLoadBalancerArrayOutput {
	return o
}

func (o InstanceLoadBalancerArrayOutput) ToInstanceLoadBalancerArrayOutputWithContext(ctx context.Context) InstanceLoadBalancerArrayOutput {
	return o
}

func (o InstanceLoadBalancerArrayOutput) Index(i pulumi.IntInput) InstanceLoadBalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceLoadBalancer {
		return vs[0].([]InstanceLoadBalancer)[vs[1].(int)]
	}).(InstanceLoadBalancerOutput)
}

type InstancePrivateNetwork struct {
	// Whether the endpoint should be configured with IPAM. Defaults to `false` if `ipNet` is defined, `true` otherwise.
	EnableIpam *bool `pulumi:"enableIpam"`
	// The ID of the endpoint.
	EndpointId *string `pulumi:"endpointId"`
	// Hostname of the endpoint.
	Hostname *string `pulumi:"hostname"`
	// IPv4 address on the network.
	Ip    *string `pulumi:"ip"`
	IpNet *string `pulumi:"ipNet"`
	// The name of the Database Instance.
	Name *string `pulumi:"name"`
	// The ID of the private network.
	PnId string `pulumi:"pnId"`
	// Port in the Private Network.
	Port *int    `pulumi:"port"`
	Zone *string `pulumi:"zone"`
}

// InstancePrivateNetworkInput is an input type that accepts InstancePrivateNetworkArgs and InstancePrivateNetworkOutput values.
// You can construct a concrete instance of `InstancePrivateNetworkInput` via:
//
//	InstancePrivateNetworkArgs{...}
type InstancePrivateNetworkInput interface {
	pulumi.Input

	ToInstancePrivateNetworkOutput() InstancePrivateNetworkOutput
	ToInstancePrivateNetworkOutputWithContext(context.Context) InstancePrivateNetworkOutput
}

type InstancePrivateNetworkArgs struct {
	// Whether the endpoint should be configured with IPAM. Defaults to `false` if `ipNet` is defined, `true` otherwise.
	EnableIpam pulumi.BoolPtrInput `pulumi:"enableIpam"`
	// The ID of the endpoint.
	EndpointId pulumi.StringPtrInput `pulumi:"endpointId"`
	// Hostname of the endpoint.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// IPv4 address on the network.
	Ip    pulumi.StringPtrInput `pulumi:"ip"`
	IpNet pulumi.StringPtrInput `pulumi:"ipNet"`
	// The name of the Database Instance.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The ID of the private network.
	PnId pulumi.StringInput `pulumi:"pnId"`
	// Port in the Private Network.
	Port pulumi.IntPtrInput    `pulumi:"port"`
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (InstancePrivateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancePrivateNetwork)(nil)).Elem()
}

func (i InstancePrivateNetworkArgs) ToInstancePrivateNetworkOutput() InstancePrivateNetworkOutput {
	return i.ToInstancePrivateNetworkOutputWithContext(context.Background())
}

func (i InstancePrivateNetworkArgs) ToInstancePrivateNetworkOutputWithContext(ctx context.Context) InstancePrivateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePrivateNetworkOutput)
}

func (i InstancePrivateNetworkArgs) ToInstancePrivateNetworkPtrOutput() InstancePrivateNetworkPtrOutput {
	return i.ToInstancePrivateNetworkPtrOutputWithContext(context.Background())
}

func (i InstancePrivateNetworkArgs) ToInstancePrivateNetworkPtrOutputWithContext(ctx context.Context) InstancePrivateNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePrivateNetworkOutput).ToInstancePrivateNetworkPtrOutputWithContext(ctx)
}

// InstancePrivateNetworkPtrInput is an input type that accepts InstancePrivateNetworkArgs, InstancePrivateNetworkPtr and InstancePrivateNetworkPtrOutput values.
// You can construct a concrete instance of `InstancePrivateNetworkPtrInput` via:
//
//	        InstancePrivateNetworkArgs{...}
//
//	or:
//
//	        nil
type InstancePrivateNetworkPtrInput interface {
	pulumi.Input

	ToInstancePrivateNetworkPtrOutput() InstancePrivateNetworkPtrOutput
	ToInstancePrivateNetworkPtrOutputWithContext(context.Context) InstancePrivateNetworkPtrOutput
}

type instancePrivateNetworkPtrType InstancePrivateNetworkArgs

func InstancePrivateNetworkPtr(v *InstancePrivateNetworkArgs) InstancePrivateNetworkPtrInput {
	return (*instancePrivateNetworkPtrType)(v)
}

func (*instancePrivateNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstancePrivateNetwork)(nil)).Elem()
}

func (i *instancePrivateNetworkPtrType) ToInstancePrivateNetworkPtrOutput() InstancePrivateNetworkPtrOutput {
	return i.ToInstancePrivateNetworkPtrOutputWithContext(context.Background())
}

func (i *instancePrivateNetworkPtrType) ToInstancePrivateNetworkPtrOutputWithContext(ctx context.Context) InstancePrivateNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePrivateNetworkPtrOutput)
}

type InstancePrivateNetworkOutput struct{ *pulumi.OutputState }

func (InstancePrivateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancePrivateNetwork)(nil)).Elem()
}

func (o InstancePrivateNetworkOutput) ToInstancePrivateNetworkOutput() InstancePrivateNetworkOutput {
	return o
}

func (o InstancePrivateNetworkOutput) ToInstancePrivateNetworkOutputWithContext(ctx context.Context) InstancePrivateNetworkOutput {
	return o
}

func (o InstancePrivateNetworkOutput) ToInstancePrivateNetworkPtrOutput() InstancePrivateNetworkPtrOutput {
	return o.ToInstancePrivateNetworkPtrOutputWithContext(context.Background())
}

func (o InstancePrivateNetworkOutput) ToInstancePrivateNetworkPtrOutputWithContext(ctx context.Context) InstancePrivateNetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstancePrivateNetwork) *InstancePrivateNetwork {
		return &v
	}).(InstancePrivateNetworkPtrOutput)
}

// Whether the endpoint should be configured with IPAM. Defaults to `false` if `ipNet` is defined, `true` otherwise.
func (o InstancePrivateNetworkOutput) EnableIpam() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstancePrivateNetwork) *bool { return v.EnableIpam }).(pulumi.BoolPtrOutput)
}

// The ID of the endpoint.
func (o InstancePrivateNetworkOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstancePrivateNetwork) *string { return v.EndpointId }).(pulumi.StringPtrOutput)
}

// Hostname of the endpoint.
func (o InstancePrivateNetworkOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstancePrivateNetwork) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// IPv4 address on the network.
func (o InstancePrivateNetworkOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstancePrivateNetwork) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

func (o InstancePrivateNetworkOutput) IpNet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstancePrivateNetwork) *string { return v.IpNet }).(pulumi.StringPtrOutput)
}

// The name of the Database Instance.
func (o InstancePrivateNetworkOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstancePrivateNetwork) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The ID of the private network.
func (o InstancePrivateNetworkOutput) PnId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancePrivateNetwork) string { return v.PnId }).(pulumi.StringOutput)
}

// Port in the Private Network.
func (o InstancePrivateNetworkOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstancePrivateNetwork) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o InstancePrivateNetworkOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstancePrivateNetwork) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type InstancePrivateNetworkPtrOutput struct{ *pulumi.OutputState }

func (InstancePrivateNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstancePrivateNetwork)(nil)).Elem()
}

func (o InstancePrivateNetworkPtrOutput) ToInstancePrivateNetworkPtrOutput() InstancePrivateNetworkPtrOutput {
	return o
}

func (o InstancePrivateNetworkPtrOutput) ToInstancePrivateNetworkPtrOutputWithContext(ctx context.Context) InstancePrivateNetworkPtrOutput {
	return o
}

func (o InstancePrivateNetworkPtrOutput) Elem() InstancePrivateNetworkOutput {
	return o.ApplyT(func(v *InstancePrivateNetwork) InstancePrivateNetwork {
		if v != nil {
			return *v
		}
		var ret InstancePrivateNetwork
		return ret
	}).(InstancePrivateNetworkOutput)
}

// Whether the endpoint should be configured with IPAM. Defaults to `false` if `ipNet` is defined, `true` otherwise.
func (o InstancePrivateNetworkPtrOutput) EnableIpam() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstancePrivateNetwork) *bool {
		if v == nil {
			return nil
		}
		return v.EnableIpam
	}).(pulumi.BoolPtrOutput)
}

// The ID of the endpoint.
func (o InstancePrivateNetworkPtrOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstancePrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.EndpointId
	}).(pulumi.StringPtrOutput)
}

// Hostname of the endpoint.
func (o InstancePrivateNetworkPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstancePrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// IPv4 address on the network.
func (o InstancePrivateNetworkPtrOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstancePrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(pulumi.StringPtrOutput)
}

func (o InstancePrivateNetworkPtrOutput) IpNet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstancePrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.IpNet
	}).(pulumi.StringPtrOutput)
}

// The name of the Database Instance.
func (o InstancePrivateNetworkPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstancePrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The ID of the private network.
func (o InstancePrivateNetworkPtrOutput) PnId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstancePrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return &v.PnId
	}).(pulumi.StringPtrOutput)
}

// Port in the Private Network.
func (o InstancePrivateNetworkPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstancePrivateNetwork) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

func (o InstancePrivateNetworkPtrOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstancePrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Zone
	}).(pulumi.StringPtrOutput)
}

type InstanceReadReplica struct {
	// IPv4 address on the network.
	Ip *string `pulumi:"ip"`
	// The name of the Database Instance.
	Name *string `pulumi:"name"`
	// Port in the Private Network.
	Port *int `pulumi:"port"`
}

// InstanceReadReplicaInput is an input type that accepts InstanceReadReplicaArgs and InstanceReadReplicaOutput values.
// You can construct a concrete instance of `InstanceReadReplicaInput` via:
//
//	InstanceReadReplicaArgs{...}
type InstanceReadReplicaInput interface {
	pulumi.Input

	ToInstanceReadReplicaOutput() InstanceReadReplicaOutput
	ToInstanceReadReplicaOutputWithContext(context.Context) InstanceReadReplicaOutput
}

type InstanceReadReplicaArgs struct {
	// IPv4 address on the network.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// The name of the Database Instance.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Port in the Private Network.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (InstanceReadReplicaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceReadReplica)(nil)).Elem()
}

func (i InstanceReadReplicaArgs) ToInstanceReadReplicaOutput() InstanceReadReplicaOutput {
	return i.ToInstanceReadReplicaOutputWithContext(context.Background())
}

func (i InstanceReadReplicaArgs) ToInstanceReadReplicaOutputWithContext(ctx context.Context) InstanceReadReplicaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceReadReplicaOutput)
}

// InstanceReadReplicaArrayInput is an input type that accepts InstanceReadReplicaArray and InstanceReadReplicaArrayOutput values.
// You can construct a concrete instance of `InstanceReadReplicaArrayInput` via:
//
//	InstanceReadReplicaArray{ InstanceReadReplicaArgs{...} }
type InstanceReadReplicaArrayInput interface {
	pulumi.Input

	ToInstanceReadReplicaArrayOutput() InstanceReadReplicaArrayOutput
	ToInstanceReadReplicaArrayOutputWithContext(context.Context) InstanceReadReplicaArrayOutput
}

type InstanceReadReplicaArray []InstanceReadReplicaInput

func (InstanceReadReplicaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceReadReplica)(nil)).Elem()
}

func (i InstanceReadReplicaArray) ToInstanceReadReplicaArrayOutput() InstanceReadReplicaArrayOutput {
	return i.ToInstanceReadReplicaArrayOutputWithContext(context.Background())
}

func (i InstanceReadReplicaArray) ToInstanceReadReplicaArrayOutputWithContext(ctx context.Context) InstanceReadReplicaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceReadReplicaArrayOutput)
}

type InstanceReadReplicaOutput struct{ *pulumi.OutputState }

func (InstanceReadReplicaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceReadReplica)(nil)).Elem()
}

func (o InstanceReadReplicaOutput) ToInstanceReadReplicaOutput() InstanceReadReplicaOutput {
	return o
}

func (o InstanceReadReplicaOutput) ToInstanceReadReplicaOutputWithContext(ctx context.Context) InstanceReadReplicaOutput {
	return o
}

// IPv4 address on the network.
func (o InstanceReadReplicaOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceReadReplica) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// The name of the Database Instance.
func (o InstanceReadReplicaOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceReadReplica) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Port in the Private Network.
func (o InstanceReadReplicaOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceReadReplica) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type InstanceReadReplicaArrayOutput struct{ *pulumi.OutputState }

func (InstanceReadReplicaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceReadReplica)(nil)).Elem()
}

func (o InstanceReadReplicaArrayOutput) ToInstanceReadReplicaArrayOutput() InstanceReadReplicaArrayOutput {
	return o
}

func (o InstanceReadReplicaArrayOutput) ToInstanceReadReplicaArrayOutputWithContext(ctx context.Context) InstanceReadReplicaArrayOutput {
	return o
}

func (o InstanceReadReplicaArrayOutput) Index(i pulumi.IntInput) InstanceReadReplicaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceReadReplica {
		return vs[0].([]InstanceReadReplica)[vs[1].(int)]
	}).(InstanceReadReplicaOutput)
}

type ReadReplicaDirectAccess struct {
	// The ID of the endpoint of the read replica.
	EndpointId *string `pulumi:"endpointId"`
	// Hostname of the endpoint. Only one of ip and hostname may be set.
	Hostname *string `pulumi:"hostname"`
	// IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.
	Ip *string `pulumi:"ip"`
	// Name of the endpoint.
	Name *string `pulumi:"name"`
	// TCP port of the endpoint.
	Port *int `pulumi:"port"`
}

// ReadReplicaDirectAccessInput is an input type that accepts ReadReplicaDirectAccessArgs and ReadReplicaDirectAccessOutput values.
// You can construct a concrete instance of `ReadReplicaDirectAccessInput` via:
//
//	ReadReplicaDirectAccessArgs{...}
type ReadReplicaDirectAccessInput interface {
	pulumi.Input

	ToReadReplicaDirectAccessOutput() ReadReplicaDirectAccessOutput
	ToReadReplicaDirectAccessOutputWithContext(context.Context) ReadReplicaDirectAccessOutput
}

type ReadReplicaDirectAccessArgs struct {
	// The ID of the endpoint of the read replica.
	EndpointId pulumi.StringPtrInput `pulumi:"endpointId"`
	// Hostname of the endpoint. Only one of ip and hostname may be set.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// Name of the endpoint.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// TCP port of the endpoint.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (ReadReplicaDirectAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReadReplicaDirectAccess)(nil)).Elem()
}

func (i ReadReplicaDirectAccessArgs) ToReadReplicaDirectAccessOutput() ReadReplicaDirectAccessOutput {
	return i.ToReadReplicaDirectAccessOutputWithContext(context.Background())
}

func (i ReadReplicaDirectAccessArgs) ToReadReplicaDirectAccessOutputWithContext(ctx context.Context) ReadReplicaDirectAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadReplicaDirectAccessOutput)
}

func (i ReadReplicaDirectAccessArgs) ToReadReplicaDirectAccessPtrOutput() ReadReplicaDirectAccessPtrOutput {
	return i.ToReadReplicaDirectAccessPtrOutputWithContext(context.Background())
}

func (i ReadReplicaDirectAccessArgs) ToReadReplicaDirectAccessPtrOutputWithContext(ctx context.Context) ReadReplicaDirectAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadReplicaDirectAccessOutput).ToReadReplicaDirectAccessPtrOutputWithContext(ctx)
}

// ReadReplicaDirectAccessPtrInput is an input type that accepts ReadReplicaDirectAccessArgs, ReadReplicaDirectAccessPtr and ReadReplicaDirectAccessPtrOutput values.
// You can construct a concrete instance of `ReadReplicaDirectAccessPtrInput` via:
//
//	        ReadReplicaDirectAccessArgs{...}
//
//	or:
//
//	        nil
type ReadReplicaDirectAccessPtrInput interface {
	pulumi.Input

	ToReadReplicaDirectAccessPtrOutput() ReadReplicaDirectAccessPtrOutput
	ToReadReplicaDirectAccessPtrOutputWithContext(context.Context) ReadReplicaDirectAccessPtrOutput
}

type readReplicaDirectAccessPtrType ReadReplicaDirectAccessArgs

func ReadReplicaDirectAccessPtr(v *ReadReplicaDirectAccessArgs) ReadReplicaDirectAccessPtrInput {
	return (*readReplicaDirectAccessPtrType)(v)
}

func (*readReplicaDirectAccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReadReplicaDirectAccess)(nil)).Elem()
}

func (i *readReplicaDirectAccessPtrType) ToReadReplicaDirectAccessPtrOutput() ReadReplicaDirectAccessPtrOutput {
	return i.ToReadReplicaDirectAccessPtrOutputWithContext(context.Background())
}

func (i *readReplicaDirectAccessPtrType) ToReadReplicaDirectAccessPtrOutputWithContext(ctx context.Context) ReadReplicaDirectAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadReplicaDirectAccessPtrOutput)
}

type ReadReplicaDirectAccessOutput struct{ *pulumi.OutputState }

func (ReadReplicaDirectAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReadReplicaDirectAccess)(nil)).Elem()
}

func (o ReadReplicaDirectAccessOutput) ToReadReplicaDirectAccessOutput() ReadReplicaDirectAccessOutput {
	return o
}

func (o ReadReplicaDirectAccessOutput) ToReadReplicaDirectAccessOutputWithContext(ctx context.Context) ReadReplicaDirectAccessOutput {
	return o
}

func (o ReadReplicaDirectAccessOutput) ToReadReplicaDirectAccessPtrOutput() ReadReplicaDirectAccessPtrOutput {
	return o.ToReadReplicaDirectAccessPtrOutputWithContext(context.Background())
}

func (o ReadReplicaDirectAccessOutput) ToReadReplicaDirectAccessPtrOutputWithContext(ctx context.Context) ReadReplicaDirectAccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReadReplicaDirectAccess) *ReadReplicaDirectAccess {
		return &v
	}).(ReadReplicaDirectAccessPtrOutput)
}

// The ID of the endpoint of the read replica.
func (o ReadReplicaDirectAccessOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadReplicaDirectAccess) *string { return v.EndpointId }).(pulumi.StringPtrOutput)
}

// Hostname of the endpoint. Only one of ip and hostname may be set.
func (o ReadReplicaDirectAccessOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadReplicaDirectAccess) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.
func (o ReadReplicaDirectAccessOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadReplicaDirectAccess) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// Name of the endpoint.
func (o ReadReplicaDirectAccessOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadReplicaDirectAccess) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// TCP port of the endpoint.
func (o ReadReplicaDirectAccessOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReadReplicaDirectAccess) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type ReadReplicaDirectAccessPtrOutput struct{ *pulumi.OutputState }

func (ReadReplicaDirectAccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReadReplicaDirectAccess)(nil)).Elem()
}

func (o ReadReplicaDirectAccessPtrOutput) ToReadReplicaDirectAccessPtrOutput() ReadReplicaDirectAccessPtrOutput {
	return o
}

func (o ReadReplicaDirectAccessPtrOutput) ToReadReplicaDirectAccessPtrOutputWithContext(ctx context.Context) ReadReplicaDirectAccessPtrOutput {
	return o
}

func (o ReadReplicaDirectAccessPtrOutput) Elem() ReadReplicaDirectAccessOutput {
	return o.ApplyT(func(v *ReadReplicaDirectAccess) ReadReplicaDirectAccess {
		if v != nil {
			return *v
		}
		var ret ReadReplicaDirectAccess
		return ret
	}).(ReadReplicaDirectAccessOutput)
}

// The ID of the endpoint of the read replica.
func (o ReadReplicaDirectAccessPtrOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadReplicaDirectAccess) *string {
		if v == nil {
			return nil
		}
		return v.EndpointId
	}).(pulumi.StringPtrOutput)
}

// Hostname of the endpoint. Only one of ip and hostname may be set.
func (o ReadReplicaDirectAccessPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadReplicaDirectAccess) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.
func (o ReadReplicaDirectAccessPtrOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadReplicaDirectAccess) *string {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(pulumi.StringPtrOutput)
}

// Name of the endpoint.
func (o ReadReplicaDirectAccessPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadReplicaDirectAccess) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// TCP port of the endpoint.
func (o ReadReplicaDirectAccessPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReadReplicaDirectAccess) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

type ReadReplicaPrivateNetwork struct {
	EnableIpam *bool `pulumi:"enableIpam"`
	// The ID of the endpoint of the read replica.
	EndpointId *string `pulumi:"endpointId"`
	// Hostname of the endpoint. Only one of ip and hostname may be set.
	Hostname *string `pulumi:"hostname"`
	// IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.
	Ip *string `pulumi:"ip"`
	// Name of the endpoint.
	Name *string `pulumi:"name"`
	// TCP port of the endpoint.
	Port *int `pulumi:"port"`
	// UUID of the private network to be connected to the read replica.
	PrivateNetworkId string `pulumi:"privateNetworkId"`
	// The IP network address within the private subnet. This must be an IPv4 address with a
	// CIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)
	// service if not set.
	ServiceIp *string `pulumi:"serviceIp"`
	Zone      *string `pulumi:"zone"`
}

// ReadReplicaPrivateNetworkInput is an input type that accepts ReadReplicaPrivateNetworkArgs and ReadReplicaPrivateNetworkOutput values.
// You can construct a concrete instance of `ReadReplicaPrivateNetworkInput` via:
//
//	ReadReplicaPrivateNetworkArgs{...}
type ReadReplicaPrivateNetworkInput interface {
	pulumi.Input

	ToReadReplicaPrivateNetworkOutput() ReadReplicaPrivateNetworkOutput
	ToReadReplicaPrivateNetworkOutputWithContext(context.Context) ReadReplicaPrivateNetworkOutput
}

type ReadReplicaPrivateNetworkArgs struct {
	EnableIpam pulumi.BoolPtrInput `pulumi:"enableIpam"`
	// The ID of the endpoint of the read replica.
	EndpointId pulumi.StringPtrInput `pulumi:"endpointId"`
	// Hostname of the endpoint. Only one of ip and hostname may be set.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// Name of the endpoint.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// TCP port of the endpoint.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// UUID of the private network to be connected to the read replica.
	PrivateNetworkId pulumi.StringInput `pulumi:"privateNetworkId"`
	// The IP network address within the private subnet. This must be an IPv4 address with a
	// CIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)
	// service if not set.
	ServiceIp pulumi.StringPtrInput `pulumi:"serviceIp"`
	Zone      pulumi.StringPtrInput `pulumi:"zone"`
}

func (ReadReplicaPrivateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReadReplicaPrivateNetwork)(nil)).Elem()
}

func (i ReadReplicaPrivateNetworkArgs) ToReadReplicaPrivateNetworkOutput() ReadReplicaPrivateNetworkOutput {
	return i.ToReadReplicaPrivateNetworkOutputWithContext(context.Background())
}

func (i ReadReplicaPrivateNetworkArgs) ToReadReplicaPrivateNetworkOutputWithContext(ctx context.Context) ReadReplicaPrivateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadReplicaPrivateNetworkOutput)
}

func (i ReadReplicaPrivateNetworkArgs) ToReadReplicaPrivateNetworkPtrOutput() ReadReplicaPrivateNetworkPtrOutput {
	return i.ToReadReplicaPrivateNetworkPtrOutputWithContext(context.Background())
}

func (i ReadReplicaPrivateNetworkArgs) ToReadReplicaPrivateNetworkPtrOutputWithContext(ctx context.Context) ReadReplicaPrivateNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadReplicaPrivateNetworkOutput).ToReadReplicaPrivateNetworkPtrOutputWithContext(ctx)
}

// ReadReplicaPrivateNetworkPtrInput is an input type that accepts ReadReplicaPrivateNetworkArgs, ReadReplicaPrivateNetworkPtr and ReadReplicaPrivateNetworkPtrOutput values.
// You can construct a concrete instance of `ReadReplicaPrivateNetworkPtrInput` via:
//
//	        ReadReplicaPrivateNetworkArgs{...}
//
//	or:
//
//	        nil
type ReadReplicaPrivateNetworkPtrInput interface {
	pulumi.Input

	ToReadReplicaPrivateNetworkPtrOutput() ReadReplicaPrivateNetworkPtrOutput
	ToReadReplicaPrivateNetworkPtrOutputWithContext(context.Context) ReadReplicaPrivateNetworkPtrOutput
}

type readReplicaPrivateNetworkPtrType ReadReplicaPrivateNetworkArgs

func ReadReplicaPrivateNetworkPtr(v *ReadReplicaPrivateNetworkArgs) ReadReplicaPrivateNetworkPtrInput {
	return (*readReplicaPrivateNetworkPtrType)(v)
}

func (*readReplicaPrivateNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReadReplicaPrivateNetwork)(nil)).Elem()
}

func (i *readReplicaPrivateNetworkPtrType) ToReadReplicaPrivateNetworkPtrOutput() ReadReplicaPrivateNetworkPtrOutput {
	return i.ToReadReplicaPrivateNetworkPtrOutputWithContext(context.Background())
}

func (i *readReplicaPrivateNetworkPtrType) ToReadReplicaPrivateNetworkPtrOutputWithContext(ctx context.Context) ReadReplicaPrivateNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadReplicaPrivateNetworkPtrOutput)
}

type ReadReplicaPrivateNetworkOutput struct{ *pulumi.OutputState }

func (ReadReplicaPrivateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReadReplicaPrivateNetwork)(nil)).Elem()
}

func (o ReadReplicaPrivateNetworkOutput) ToReadReplicaPrivateNetworkOutput() ReadReplicaPrivateNetworkOutput {
	return o
}

func (o ReadReplicaPrivateNetworkOutput) ToReadReplicaPrivateNetworkOutputWithContext(ctx context.Context) ReadReplicaPrivateNetworkOutput {
	return o
}

func (o ReadReplicaPrivateNetworkOutput) ToReadReplicaPrivateNetworkPtrOutput() ReadReplicaPrivateNetworkPtrOutput {
	return o.ToReadReplicaPrivateNetworkPtrOutputWithContext(context.Background())
}

func (o ReadReplicaPrivateNetworkOutput) ToReadReplicaPrivateNetworkPtrOutputWithContext(ctx context.Context) ReadReplicaPrivateNetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReadReplicaPrivateNetwork) *ReadReplicaPrivateNetwork {
		return &v
	}).(ReadReplicaPrivateNetworkPtrOutput)
}

func (o ReadReplicaPrivateNetworkOutput) EnableIpam() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReadReplicaPrivateNetwork) *bool { return v.EnableIpam }).(pulumi.BoolPtrOutput)
}

// The ID of the endpoint of the read replica.
func (o ReadReplicaPrivateNetworkOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadReplicaPrivateNetwork) *string { return v.EndpointId }).(pulumi.StringPtrOutput)
}

// Hostname of the endpoint. Only one of ip and hostname may be set.
func (o ReadReplicaPrivateNetworkOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadReplicaPrivateNetwork) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.
func (o ReadReplicaPrivateNetworkOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadReplicaPrivateNetwork) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// Name of the endpoint.
func (o ReadReplicaPrivateNetworkOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadReplicaPrivateNetwork) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// TCP port of the endpoint.
func (o ReadReplicaPrivateNetworkOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReadReplicaPrivateNetwork) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// UUID of the private network to be connected to the read replica.
func (o ReadReplicaPrivateNetworkOutput) PrivateNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v ReadReplicaPrivateNetwork) string { return v.PrivateNetworkId }).(pulumi.StringOutput)
}

// The IP network address within the private subnet. This must be an IPv4 address with a
// CIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)
// service if not set.
func (o ReadReplicaPrivateNetworkOutput) ServiceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadReplicaPrivateNetwork) *string { return v.ServiceIp }).(pulumi.StringPtrOutput)
}

func (o ReadReplicaPrivateNetworkOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadReplicaPrivateNetwork) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type ReadReplicaPrivateNetworkPtrOutput struct{ *pulumi.OutputState }

func (ReadReplicaPrivateNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReadReplicaPrivateNetwork)(nil)).Elem()
}

func (o ReadReplicaPrivateNetworkPtrOutput) ToReadReplicaPrivateNetworkPtrOutput() ReadReplicaPrivateNetworkPtrOutput {
	return o
}

func (o ReadReplicaPrivateNetworkPtrOutput) ToReadReplicaPrivateNetworkPtrOutputWithContext(ctx context.Context) ReadReplicaPrivateNetworkPtrOutput {
	return o
}

func (o ReadReplicaPrivateNetworkPtrOutput) Elem() ReadReplicaPrivateNetworkOutput {
	return o.ApplyT(func(v *ReadReplicaPrivateNetwork) ReadReplicaPrivateNetwork {
		if v != nil {
			return *v
		}
		var ret ReadReplicaPrivateNetwork
		return ret
	}).(ReadReplicaPrivateNetworkOutput)
}

func (o ReadReplicaPrivateNetworkPtrOutput) EnableIpam() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReadReplicaPrivateNetwork) *bool {
		if v == nil {
			return nil
		}
		return v.EnableIpam
	}).(pulumi.BoolPtrOutput)
}

// The ID of the endpoint of the read replica.
func (o ReadReplicaPrivateNetworkPtrOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadReplicaPrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.EndpointId
	}).(pulumi.StringPtrOutput)
}

// Hostname of the endpoint. Only one of ip and hostname may be set.
func (o ReadReplicaPrivateNetworkPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadReplicaPrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// IPv4 address of the endpoint (IP address). Only one of ip and hostname may be set.
func (o ReadReplicaPrivateNetworkPtrOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadReplicaPrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(pulumi.StringPtrOutput)
}

// Name of the endpoint.
func (o ReadReplicaPrivateNetworkPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadReplicaPrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// TCP port of the endpoint.
func (o ReadReplicaPrivateNetworkPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReadReplicaPrivateNetwork) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// UUID of the private network to be connected to the read replica.
func (o ReadReplicaPrivateNetworkPtrOutput) PrivateNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadReplicaPrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateNetworkId
	}).(pulumi.StringPtrOutput)
}

// The IP network address within the private subnet. This must be an IPv4 address with a
// CIDR notation. The IP network address within the private subnet is determined by the IP Address Management (IPAM)
// service if not set.
func (o ReadReplicaPrivateNetworkPtrOutput) ServiceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadReplicaPrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.ServiceIp
	}).(pulumi.StringPtrOutput)
}

func (o ReadReplicaPrivateNetworkPtrOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadReplicaPrivateNetwork) *string {
		if v == nil {
			return nil
		}
		return v.Zone
	}).(pulumi.StringPtrOutput)
}

type GetACLAclRule struct {
	// A simple text describing this rule
	Description string `pulumi:"description"`
	// The ip range to whitelist in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)
	Ip string `pulumi:"ip"`
}

// GetACLAclRuleInput is an input type that accepts GetACLAclRuleArgs and GetACLAclRuleOutput values.
// You can construct a concrete instance of `GetACLAclRuleInput` via:
//
//	GetACLAclRuleArgs{...}
type GetACLAclRuleInput interface {
	pulumi.Input

	ToGetACLAclRuleOutput() GetACLAclRuleOutput
	ToGetACLAclRuleOutputWithContext(context.Context) GetACLAclRuleOutput
}

type GetACLAclRuleArgs struct {
	// A simple text describing this rule
	Description pulumi.StringInput `pulumi:"description"`
	// The ip range to whitelist in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)
	Ip pulumi.StringInput `pulumi:"ip"`
}

func (GetACLAclRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetACLAclRule)(nil)).Elem()
}

func (i GetACLAclRuleArgs) ToGetACLAclRuleOutput() GetACLAclRuleOutput {
	return i.ToGetACLAclRuleOutputWithContext(context.Background())
}

func (i GetACLAclRuleArgs) ToGetACLAclRuleOutputWithContext(ctx context.Context) GetACLAclRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetACLAclRuleOutput)
}

// GetACLAclRuleArrayInput is an input type that accepts GetACLAclRuleArray and GetACLAclRuleArrayOutput values.
// You can construct a concrete instance of `GetACLAclRuleArrayInput` via:
//
//	GetACLAclRuleArray{ GetACLAclRuleArgs{...} }
type GetACLAclRuleArrayInput interface {
	pulumi.Input

	ToGetACLAclRuleArrayOutput() GetACLAclRuleArrayOutput
	ToGetACLAclRuleArrayOutputWithContext(context.Context) GetACLAclRuleArrayOutput
}

type GetACLAclRuleArray []GetACLAclRuleInput

func (GetACLAclRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetACLAclRule)(nil)).Elem()
}

func (i GetACLAclRuleArray) ToGetACLAclRuleArrayOutput() GetACLAclRuleArrayOutput {
	return i.ToGetACLAclRuleArrayOutputWithContext(context.Background())
}

func (i GetACLAclRuleArray) ToGetACLAclRuleArrayOutputWithContext(ctx context.Context) GetACLAclRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetACLAclRuleArrayOutput)
}

type GetACLAclRuleOutput struct{ *pulumi.OutputState }

func (GetACLAclRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetACLAclRule)(nil)).Elem()
}

func (o GetACLAclRuleOutput) ToGetACLAclRuleOutput() GetACLAclRuleOutput {
	return o
}

func (o GetACLAclRuleOutput) ToGetACLAclRuleOutputWithContext(ctx context.Context) GetACLAclRuleOutput {
	return o
}

// A simple text describing this rule
func (o GetACLAclRuleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetACLAclRule) string { return v.Description }).(pulumi.StringOutput)
}

// The ip range to whitelist in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)
func (o GetACLAclRuleOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetACLAclRule) string { return v.Ip }).(pulumi.StringOutput)
}

type GetACLAclRuleArrayOutput struct{ *pulumi.OutputState }

func (GetACLAclRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetACLAclRule)(nil)).Elem()
}

func (o GetACLAclRuleArrayOutput) ToGetACLAclRuleArrayOutput() GetACLAclRuleArrayOutput {
	return o
}

func (o GetACLAclRuleArrayOutput) ToGetACLAclRuleArrayOutputWithContext(ctx context.Context) GetACLAclRuleArrayOutput {
	return o
}

func (o GetACLAclRuleArrayOutput) Index(i pulumi.IntInput) GetACLAclRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetACLAclRule {
		return vs[0].([]GetACLAclRule)[vs[1].(int)]
	}).(GetACLAclRuleOutput)
}

type GetInstanceLoadBalancer struct {
	EndpointId string `pulumi:"endpointId"`
	Hostname   string `pulumi:"hostname"`
	Ip         string `pulumi:"ip"`
	// The name of the RDB instance.
	// Only one of `name` and `instanceId` should be specified.
	Name string `pulumi:"name"`
	Port int    `pulumi:"port"`
}

// GetInstanceLoadBalancerInput is an input type that accepts GetInstanceLoadBalancerArgs and GetInstanceLoadBalancerOutput values.
// You can construct a concrete instance of `GetInstanceLoadBalancerInput` via:
//
//	GetInstanceLoadBalancerArgs{...}
type GetInstanceLoadBalancerInput interface {
	pulumi.Input

	ToGetInstanceLoadBalancerOutput() GetInstanceLoadBalancerOutput
	ToGetInstanceLoadBalancerOutputWithContext(context.Context) GetInstanceLoadBalancerOutput
}

type GetInstanceLoadBalancerArgs struct {
	EndpointId pulumi.StringInput `pulumi:"endpointId"`
	Hostname   pulumi.StringInput `pulumi:"hostname"`
	Ip         pulumi.StringInput `pulumi:"ip"`
	// The name of the RDB instance.
	// Only one of `name` and `instanceId` should be specified.
	Name pulumi.StringInput `pulumi:"name"`
	Port pulumi.IntInput    `pulumi:"port"`
}

func (GetInstanceLoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceLoadBalancer)(nil)).Elem()
}

func (i GetInstanceLoadBalancerArgs) ToGetInstanceLoadBalancerOutput() GetInstanceLoadBalancerOutput {
	return i.ToGetInstanceLoadBalancerOutputWithContext(context.Background())
}

func (i GetInstanceLoadBalancerArgs) ToGetInstanceLoadBalancerOutputWithContext(ctx context.Context) GetInstanceLoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceLoadBalancerOutput)
}

// GetInstanceLoadBalancerArrayInput is an input type that accepts GetInstanceLoadBalancerArray and GetInstanceLoadBalancerArrayOutput values.
// You can construct a concrete instance of `GetInstanceLoadBalancerArrayInput` via:
//
//	GetInstanceLoadBalancerArray{ GetInstanceLoadBalancerArgs{...} }
type GetInstanceLoadBalancerArrayInput interface {
	pulumi.Input

	ToGetInstanceLoadBalancerArrayOutput() GetInstanceLoadBalancerArrayOutput
	ToGetInstanceLoadBalancerArrayOutputWithContext(context.Context) GetInstanceLoadBalancerArrayOutput
}

type GetInstanceLoadBalancerArray []GetInstanceLoadBalancerInput

func (GetInstanceLoadBalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceLoadBalancer)(nil)).Elem()
}

func (i GetInstanceLoadBalancerArray) ToGetInstanceLoadBalancerArrayOutput() GetInstanceLoadBalancerArrayOutput {
	return i.ToGetInstanceLoadBalancerArrayOutputWithContext(context.Background())
}

func (i GetInstanceLoadBalancerArray) ToGetInstanceLoadBalancerArrayOutputWithContext(ctx context.Context) GetInstanceLoadBalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceLoadBalancerArrayOutput)
}

type GetInstanceLoadBalancerOutput struct{ *pulumi.OutputState }

func (GetInstanceLoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceLoadBalancer)(nil)).Elem()
}

func (o GetInstanceLoadBalancerOutput) ToGetInstanceLoadBalancerOutput() GetInstanceLoadBalancerOutput {
	return o
}

func (o GetInstanceLoadBalancerOutput) ToGetInstanceLoadBalancerOutputWithContext(ctx context.Context) GetInstanceLoadBalancerOutput {
	return o
}

func (o GetInstanceLoadBalancerOutput) EndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceLoadBalancer) string { return v.EndpointId }).(pulumi.StringOutput)
}

func (o GetInstanceLoadBalancerOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceLoadBalancer) string { return v.Hostname }).(pulumi.StringOutput)
}

func (o GetInstanceLoadBalancerOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceLoadBalancer) string { return v.Ip }).(pulumi.StringOutput)
}

// The name of the RDB instance.
// Only one of `name` and `instanceId` should be specified.
func (o GetInstanceLoadBalancerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceLoadBalancer) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetInstanceLoadBalancerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceLoadBalancer) int { return v.Port }).(pulumi.IntOutput)
}

type GetInstanceLoadBalancerArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceLoadBalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceLoadBalancer)(nil)).Elem()
}

func (o GetInstanceLoadBalancerArrayOutput) ToGetInstanceLoadBalancerArrayOutput() GetInstanceLoadBalancerArrayOutput {
	return o
}

func (o GetInstanceLoadBalancerArrayOutput) ToGetInstanceLoadBalancerArrayOutputWithContext(ctx context.Context) GetInstanceLoadBalancerArrayOutput {
	return o
}

func (o GetInstanceLoadBalancerArrayOutput) Index(i pulumi.IntInput) GetInstanceLoadBalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceLoadBalancer {
		return vs[0].([]GetInstanceLoadBalancer)[vs[1].(int)]
	}).(GetInstanceLoadBalancerOutput)
}

type GetInstancePrivateNetwork struct {
	EnableIpam bool   `pulumi:"enableIpam"`
	EndpointId string `pulumi:"endpointId"`
	Hostname   string `pulumi:"hostname"`
	Ip         string `pulumi:"ip"`
	IpNet      string `pulumi:"ipNet"`
	// The name of the RDB instance.
	// Only one of `name` and `instanceId` should be specified.
	Name string `pulumi:"name"`
	PnId string `pulumi:"pnId"`
	Port int    `pulumi:"port"`
	Zone string `pulumi:"zone"`
}

// GetInstancePrivateNetworkInput is an input type that accepts GetInstancePrivateNetworkArgs and GetInstancePrivateNetworkOutput values.
// You can construct a concrete instance of `GetInstancePrivateNetworkInput` via:
//
//	GetInstancePrivateNetworkArgs{...}
type GetInstancePrivateNetworkInput interface {
	pulumi.Input

	ToGetInstancePrivateNetworkOutput() GetInstancePrivateNetworkOutput
	ToGetInstancePrivateNetworkOutputWithContext(context.Context) GetInstancePrivateNetworkOutput
}

type GetInstancePrivateNetworkArgs struct {
	EnableIpam pulumi.BoolInput   `pulumi:"enableIpam"`
	EndpointId pulumi.StringInput `pulumi:"endpointId"`
	Hostname   pulumi.StringInput `pulumi:"hostname"`
	Ip         pulumi.StringInput `pulumi:"ip"`
	IpNet      pulumi.StringInput `pulumi:"ipNet"`
	// The name of the RDB instance.
	// Only one of `name` and `instanceId` should be specified.
	Name pulumi.StringInput `pulumi:"name"`
	PnId pulumi.StringInput `pulumi:"pnId"`
	Port pulumi.IntInput    `pulumi:"port"`
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetInstancePrivateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancePrivateNetwork)(nil)).Elem()
}

func (i GetInstancePrivateNetworkArgs) ToGetInstancePrivateNetworkOutput() GetInstancePrivateNetworkOutput {
	return i.ToGetInstancePrivateNetworkOutputWithContext(context.Background())
}

func (i GetInstancePrivateNetworkArgs) ToGetInstancePrivateNetworkOutputWithContext(ctx context.Context) GetInstancePrivateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancePrivateNetworkOutput)
}

// GetInstancePrivateNetworkArrayInput is an input type that accepts GetInstancePrivateNetworkArray and GetInstancePrivateNetworkArrayOutput values.
// You can construct a concrete instance of `GetInstancePrivateNetworkArrayInput` via:
//
//	GetInstancePrivateNetworkArray{ GetInstancePrivateNetworkArgs{...} }
type GetInstancePrivateNetworkArrayInput interface {
	pulumi.Input

	ToGetInstancePrivateNetworkArrayOutput() GetInstancePrivateNetworkArrayOutput
	ToGetInstancePrivateNetworkArrayOutputWithContext(context.Context) GetInstancePrivateNetworkArrayOutput
}

type GetInstancePrivateNetworkArray []GetInstancePrivateNetworkInput

func (GetInstancePrivateNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancePrivateNetwork)(nil)).Elem()
}

func (i GetInstancePrivateNetworkArray) ToGetInstancePrivateNetworkArrayOutput() GetInstancePrivateNetworkArrayOutput {
	return i.ToGetInstancePrivateNetworkArrayOutputWithContext(context.Background())
}

func (i GetInstancePrivateNetworkArray) ToGetInstancePrivateNetworkArrayOutputWithContext(ctx context.Context) GetInstancePrivateNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancePrivateNetworkArrayOutput)
}

type GetInstancePrivateNetworkOutput struct{ *pulumi.OutputState }

func (GetInstancePrivateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancePrivateNetwork)(nil)).Elem()
}

func (o GetInstancePrivateNetworkOutput) ToGetInstancePrivateNetworkOutput() GetInstancePrivateNetworkOutput {
	return o
}

func (o GetInstancePrivateNetworkOutput) ToGetInstancePrivateNetworkOutputWithContext(ctx context.Context) GetInstancePrivateNetworkOutput {
	return o
}

func (o GetInstancePrivateNetworkOutput) EnableIpam() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstancePrivateNetwork) bool { return v.EnableIpam }).(pulumi.BoolOutput)
}

func (o GetInstancePrivateNetworkOutput) EndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancePrivateNetwork) string { return v.EndpointId }).(pulumi.StringOutput)
}

func (o GetInstancePrivateNetworkOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancePrivateNetwork) string { return v.Hostname }).(pulumi.StringOutput)
}

func (o GetInstancePrivateNetworkOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancePrivateNetwork) string { return v.Ip }).(pulumi.StringOutput)
}

func (o GetInstancePrivateNetworkOutput) IpNet() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancePrivateNetwork) string { return v.IpNet }).(pulumi.StringOutput)
}

// The name of the RDB instance.
// Only one of `name` and `instanceId` should be specified.
func (o GetInstancePrivateNetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancePrivateNetwork) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetInstancePrivateNetworkOutput) PnId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancePrivateNetwork) string { return v.PnId }).(pulumi.StringOutput)
}

func (o GetInstancePrivateNetworkOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancePrivateNetwork) int { return v.Port }).(pulumi.IntOutput)
}

func (o GetInstancePrivateNetworkOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancePrivateNetwork) string { return v.Zone }).(pulumi.StringOutput)
}

type GetInstancePrivateNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetInstancePrivateNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancePrivateNetwork)(nil)).Elem()
}

func (o GetInstancePrivateNetworkArrayOutput) ToGetInstancePrivateNetworkArrayOutput() GetInstancePrivateNetworkArrayOutput {
	return o
}

func (o GetInstancePrivateNetworkArrayOutput) ToGetInstancePrivateNetworkArrayOutputWithContext(ctx context.Context) GetInstancePrivateNetworkArrayOutput {
	return o
}

func (o GetInstancePrivateNetworkArrayOutput) Index(i pulumi.IntInput) GetInstancePrivateNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancePrivateNetwork {
		return vs[0].([]GetInstancePrivateNetwork)[vs[1].(int)]
	}).(GetInstancePrivateNetworkOutput)
}

type GetInstanceReadReplica struct {
	Ip string `pulumi:"ip"`
	// The name of the RDB instance.
	// Only one of `name` and `instanceId` should be specified.
	Name string `pulumi:"name"`
	Port int    `pulumi:"port"`
}

// GetInstanceReadReplicaInput is an input type that accepts GetInstanceReadReplicaArgs and GetInstanceReadReplicaOutput values.
// You can construct a concrete instance of `GetInstanceReadReplicaInput` via:
//
//	GetInstanceReadReplicaArgs{...}
type GetInstanceReadReplicaInput interface {
	pulumi.Input

	ToGetInstanceReadReplicaOutput() GetInstanceReadReplicaOutput
	ToGetInstanceReadReplicaOutputWithContext(context.Context) GetInstanceReadReplicaOutput
}

type GetInstanceReadReplicaArgs struct {
	Ip pulumi.StringInput `pulumi:"ip"`
	// The name of the RDB instance.
	// Only one of `name` and `instanceId` should be specified.
	Name pulumi.StringInput `pulumi:"name"`
	Port pulumi.IntInput    `pulumi:"port"`
}

func (GetInstanceReadReplicaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceReadReplica)(nil)).Elem()
}

func (i GetInstanceReadReplicaArgs) ToGetInstanceReadReplicaOutput() GetInstanceReadReplicaOutput {
	return i.ToGetInstanceReadReplicaOutputWithContext(context.Background())
}

func (i GetInstanceReadReplicaArgs) ToGetInstanceReadReplicaOutputWithContext(ctx context.Context) GetInstanceReadReplicaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceReadReplicaOutput)
}

// GetInstanceReadReplicaArrayInput is an input type that accepts GetInstanceReadReplicaArray and GetInstanceReadReplicaArrayOutput values.
// You can construct a concrete instance of `GetInstanceReadReplicaArrayInput` via:
//
//	GetInstanceReadReplicaArray{ GetInstanceReadReplicaArgs{...} }
type GetInstanceReadReplicaArrayInput interface {
	pulumi.Input

	ToGetInstanceReadReplicaArrayOutput() GetInstanceReadReplicaArrayOutput
	ToGetInstanceReadReplicaArrayOutputWithContext(context.Context) GetInstanceReadReplicaArrayOutput
}

type GetInstanceReadReplicaArray []GetInstanceReadReplicaInput

func (GetInstanceReadReplicaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceReadReplica)(nil)).Elem()
}

func (i GetInstanceReadReplicaArray) ToGetInstanceReadReplicaArrayOutput() GetInstanceReadReplicaArrayOutput {
	return i.ToGetInstanceReadReplicaArrayOutputWithContext(context.Background())
}

func (i GetInstanceReadReplicaArray) ToGetInstanceReadReplicaArrayOutputWithContext(ctx context.Context) GetInstanceReadReplicaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceReadReplicaArrayOutput)
}

type GetInstanceReadReplicaOutput struct{ *pulumi.OutputState }

func (GetInstanceReadReplicaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceReadReplica)(nil)).Elem()
}

func (o GetInstanceReadReplicaOutput) ToGetInstanceReadReplicaOutput() GetInstanceReadReplicaOutput {
	return o
}

func (o GetInstanceReadReplicaOutput) ToGetInstanceReadReplicaOutputWithContext(ctx context.Context) GetInstanceReadReplicaOutput {
	return o
}

func (o GetInstanceReadReplicaOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceReadReplica) string { return v.Ip }).(pulumi.StringOutput)
}

// The name of the RDB instance.
// Only one of `name` and `instanceId` should be specified.
func (o GetInstanceReadReplicaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceReadReplica) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetInstanceReadReplicaOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceReadReplica) int { return v.Port }).(pulumi.IntOutput)
}

type GetInstanceReadReplicaArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceReadReplicaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceReadReplica)(nil)).Elem()
}

func (o GetInstanceReadReplicaArrayOutput) ToGetInstanceReadReplicaArrayOutput() GetInstanceReadReplicaArrayOutput {
	return o
}

func (o GetInstanceReadReplicaArrayOutput) ToGetInstanceReadReplicaArrayOutputWithContext(ctx context.Context) GetInstanceReadReplicaArrayOutput {
	return o
}

func (o GetInstanceReadReplicaArrayOutput) Index(i pulumi.IntInput) GetInstanceReadReplicaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceReadReplica {
		return vs[0].([]GetInstanceReadReplica)[vs[1].(int)]
	}).(GetInstanceReadReplicaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ACLAclRuleInput)(nil)).Elem(), ACLAclRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACLAclRuleArrayInput)(nil)).Elem(), ACLAclRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceLoadBalancerInput)(nil)).Elem(), InstanceLoadBalancerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceLoadBalancerArrayInput)(nil)).Elem(), InstanceLoadBalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancePrivateNetworkInput)(nil)).Elem(), InstancePrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancePrivateNetworkPtrInput)(nil)).Elem(), InstancePrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceReadReplicaInput)(nil)).Elem(), InstanceReadReplicaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceReadReplicaArrayInput)(nil)).Elem(), InstanceReadReplicaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReadReplicaDirectAccessInput)(nil)).Elem(), ReadReplicaDirectAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReadReplicaDirectAccessPtrInput)(nil)).Elem(), ReadReplicaDirectAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReadReplicaPrivateNetworkInput)(nil)).Elem(), ReadReplicaPrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReadReplicaPrivateNetworkPtrInput)(nil)).Elem(), ReadReplicaPrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetACLAclRuleInput)(nil)).Elem(), GetACLAclRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetACLAclRuleArrayInput)(nil)).Elem(), GetACLAclRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceLoadBalancerInput)(nil)).Elem(), GetInstanceLoadBalancerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceLoadBalancerArrayInput)(nil)).Elem(), GetInstanceLoadBalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancePrivateNetworkInput)(nil)).Elem(), GetInstancePrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancePrivateNetworkArrayInput)(nil)).Elem(), GetInstancePrivateNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceReadReplicaInput)(nil)).Elem(), GetInstanceReadReplicaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceReadReplicaArrayInput)(nil)).Elem(), GetInstanceReadReplicaArray{})
	pulumi.RegisterOutputType(ACLAclRuleOutput{})
	pulumi.RegisterOutputType(ACLAclRuleArrayOutput{})
	pulumi.RegisterOutputType(InstanceLoadBalancerOutput{})
	pulumi.RegisterOutputType(InstanceLoadBalancerArrayOutput{})
	pulumi.RegisterOutputType(InstancePrivateNetworkOutput{})
	pulumi.RegisterOutputType(InstancePrivateNetworkPtrOutput{})
	pulumi.RegisterOutputType(InstanceReadReplicaOutput{})
	pulumi.RegisterOutputType(InstanceReadReplicaArrayOutput{})
	pulumi.RegisterOutputType(ReadReplicaDirectAccessOutput{})
	pulumi.RegisterOutputType(ReadReplicaDirectAccessPtrOutput{})
	pulumi.RegisterOutputType(ReadReplicaPrivateNetworkOutput{})
	pulumi.RegisterOutputType(ReadReplicaPrivateNetworkPtrOutput{})
	pulumi.RegisterOutputType(GetACLAclRuleOutput{})
	pulumi.RegisterOutputType(GetACLAclRuleArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceLoadBalancerOutput{})
	pulumi.RegisterOutputType(GetInstanceLoadBalancerArrayOutput{})
	pulumi.RegisterOutputType(GetInstancePrivateNetworkOutput{})
	pulumi.RegisterOutputType(GetInstancePrivateNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceReadReplicaOutput{})
	pulumi.RegisterOutputType(GetInstanceReadReplicaArrayOutput{})
}
