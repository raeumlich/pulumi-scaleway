// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rdb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Gets information about the RDB instance network Access Control List.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/rdb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := rdb.LookupACL(ctx, &rdb.LookupACLArgs{
//				InstanceId: "11111111-1111-1111-1111-111111111111",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupACL(ctx *pulumi.Context, args *LookupACLArgs, opts ...pulumi.InvokeOption) (*LookupACLResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupACLResult
	err := ctx.Invoke("scaleway:rdb/getACL:getACL", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getACL.
type LookupACLArgs struct {
	// The RDB instance ID.
	InstanceId string `pulumi:"instanceId"`
	// `region`) The region in which the Database Instance should be created.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getACL.
type LookupACLResult struct {
	// A list of ACLs rules (structure is described below)
	AclRules []GetACLAclRule `pulumi:"aclRules"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	InstanceId string  `pulumi:"instanceId"`
	Region     *string `pulumi:"region"`
}

func LookupACLOutput(ctx *pulumi.Context, args LookupACLOutputArgs, opts ...pulumi.InvokeOption) LookupACLResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupACLResult, error) {
			args := v.(LookupACLArgs)
			r, err := LookupACL(ctx, &args, opts...)
			var s LookupACLResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupACLResultOutput)
}

// A collection of arguments for invoking getACL.
type LookupACLOutputArgs struct {
	// The RDB instance ID.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// `region`) The region in which the Database Instance should be created.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (LookupACLOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupACLArgs)(nil)).Elem()
}

// A collection of values returned by getACL.
type LookupACLResultOutput struct{ *pulumi.OutputState }

func (LookupACLResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupACLResult)(nil)).Elem()
}

func (o LookupACLResultOutput) ToLookupACLResultOutput() LookupACLResultOutput {
	return o
}

func (o LookupACLResultOutput) ToLookupACLResultOutputWithContext(ctx context.Context) LookupACLResultOutput {
	return o
}

// A list of ACLs rules (structure is described below)
func (o LookupACLResultOutput) AclRules() GetACLAclRuleArrayOutput {
	return o.ApplyT(func(v LookupACLResult) []GetACLAclRule { return v.AclRules }).(GetACLAclRuleArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupACLResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupACLResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupACLResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupACLResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o LookupACLResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupACLResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupACLResultOutput{})
}
