// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rdb

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "scaleway:rdb/aCL:ACL":
		r = &ACL{}
	case "scaleway:rdb/database:Database":
		r = &Database{}
	case "scaleway:rdb/databaseBackup:DatabaseBackup":
		r = &DatabaseBackup{}
	case "scaleway:rdb/instance:Instance":
		r = &Instance{}
	case "scaleway:rdb/privilege:Privilege":
		r = &Privilege{}
	case "scaleway:rdb/readReplica:ReadReplica":
		r = &ReadReplica{}
	case "scaleway:rdb/user:User":
		r = &User{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"scaleway",
		"rdb/aCL",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"rdb/database",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"rdb/databaseBackup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"rdb/instance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"rdb/privilege",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"rdb/readReplica",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scaleway",
		"rdb/user",
		&module{version},
	)
}
