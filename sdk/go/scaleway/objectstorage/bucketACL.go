// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package objectstorage

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/objectstorage"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := objectstorage.NewBucket(ctx, "someBucket", nil)
//			if err != nil {
//				return err
//			}
//			_, err = objectstorage.NewBucketACL(ctx, "main", &objectstorage.BucketACLArgs{
//				Bucket: pulumi.Any(scaleway_object_bucket.Main.Id),
//				Acl:    pulumi.String("private"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### With Grants
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/objectstorage"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			mainBucket, err := objectstorage.NewBucket(ctx, "mainBucket", nil)
//			if err != nil {
//				return err
//			}
//			_, err = objectstorage.NewBucketACL(ctx, "mainBucketACL", &objectstorage.BucketACLArgs{
//				Bucket: mainBucket.ID(),
//				AccessControlPolicy: &objectstorage.BucketACLAccessControlPolicyArgs{
//					Grants: objectstorage.BucketACLAccessControlPolicyGrantArray{
//						&objectstorage.BucketACLAccessControlPolicyGrantArgs{
//							Grantee: &objectstorage.BucketACLAccessControlPolicyGrantGranteeArgs{
//								Id:   pulumi.String("<project-id>:<project-id>"),
//								Type: pulumi.String("CanonicalUser"),
//							},
//							Permission: pulumi.String("FULL_CONTROL"),
//						},
//						&objectstorage.BucketACLAccessControlPolicyGrantArgs{
//							Grantee: &objectstorage.BucketACLAccessControlPolicyGrantGranteeArgs{
//								Id:   pulumi.String("<project-id>"),
//								Type: pulumi.String("CanonicalUser"),
//							},
//							Permission: pulumi.String("WRITE"),
//						},
//					},
//					Owner: &objectstorage.BucketACLAccessControlPolicyOwnerArgs{
//						Id: pulumi.String("<project-id>"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## The ACL
//
// Please check the [canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl_overview.html#canned-acl)
//
// ## The Access Control policy
//
// The `accessControlPolicy` configuration block supports the following arguments:
//
// * `grant` - (Required) Set of grant configuration blocks documented below.
// * `owner` - (Required) Configuration block of the bucket owner's display name and ID documented below.
//
// ## The Grant
//
// The `grant` configuration block supports the following arguments:
//
// * `grantee` - (Required) Configuration block for the project being granted permissions documented below.
// * `permission` - (Required) Logging permissions assigned to the grantee for the bucket.
//
// ## The permission
//
// The following list shows each access policy permissions supported.
//
// `READ`, `WRITE`, `READ_ACP`, `WRITE_ACP`, `FULL_CONTROL`
//
// For more information about ACL permissions in the S3 bucket, see [ACL permissions](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html).
//
// ## The owner
//
// The `owner` configuration block supports the following arguments:
//
// * `id` - (Required) The ID of the project owner.
// * `displayName` - (Optional) The display name of the owner.
//
// ## the grantee
//
// The `grantee` configuration block supports the following arguments:
//
// * `id` - (Required) The canonical user ID of the grantee.
// * `type` - (Required) Type of grantee. Valid values: CanonicalUser.
//
// ## Import
//
// Bucket ACLs can be imported using the `{region}/{bucketName}/{acl}` identifier, e.g. bash
//
// ```sh
//
//	$ pulumi import scaleway:objectstorage/bucketACL:BucketACL some_bucket fr-par/some-bucket/private
//
// ```
//
//	~> **Important:** The `project_id` attribute has a particular behavior with s3 products because the s3 API is scoped by project. If you are using a project different from the default one, you have to specify the project ID at the end of the import command. bash
//
// ```sh
//
//	$ pulumi import scaleway:objectstorage/bucketACL:BucketACL some_bucket fr-par/some-bucket/private@xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx
//
// ```
type BucketACL struct {
	pulumi.CustomResourceState

	// A configuration block that sets the ACL permissions for an object per grantee documented below.
	AccessControlPolicy BucketACLAccessControlPolicyOutput `pulumi:"accessControlPolicy"`
	// The canned ACL you want to apply to the bucket.
	Acl pulumi.StringPtrOutput `pulumi:"acl"`
	// The bucket's name or regional ID.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// The project ID of the expected bucket owner.
	ExpectedBucketOwner pulumi.StringPtrOutput `pulumi:"expectedBucketOwner"`
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The [region](https://developers.scaleway.com/en/quickstart/#region-definition) in which the bucket should be created.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewBucketACL registers a new resource with the given unique name, arguments, and options.
func NewBucketACL(ctx *pulumi.Context,
	name string, args *BucketACLArgs, opts ...pulumi.ResourceOption) (*BucketACL, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketACL
	err := ctx.RegisterResource("scaleway:objectstorage/bucketACL:BucketACL", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketACL gets an existing BucketACL resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketACL(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketACLState, opts ...pulumi.ResourceOption) (*BucketACL, error) {
	var resource BucketACL
	err := ctx.ReadResource("scaleway:objectstorage/bucketACL:BucketACL", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketACL resources.
type bucketACLState struct {
	// A configuration block that sets the ACL permissions for an object per grantee documented below.
	AccessControlPolicy *BucketACLAccessControlPolicy `pulumi:"accessControlPolicy"`
	// The canned ACL you want to apply to the bucket.
	Acl *string `pulumi:"acl"`
	// The bucket's name or regional ID.
	Bucket *string `pulumi:"bucket"`
	// The project ID of the expected bucket owner.
	ExpectedBucketOwner *string `pulumi:"expectedBucketOwner"`
	// The project_id you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The [region](https://developers.scaleway.com/en/quickstart/#region-definition) in which the bucket should be created.
	Region *string `pulumi:"region"`
}

type BucketACLState struct {
	// A configuration block that sets the ACL permissions for an object per grantee documented below.
	AccessControlPolicy BucketACLAccessControlPolicyPtrInput
	// The canned ACL you want to apply to the bucket.
	Acl pulumi.StringPtrInput
	// The bucket's name or regional ID.
	Bucket pulumi.StringPtrInput
	// The project ID of the expected bucket owner.
	ExpectedBucketOwner pulumi.StringPtrInput
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The [region](https://developers.scaleway.com/en/quickstart/#region-definition) in which the bucket should be created.
	Region pulumi.StringPtrInput
}

func (BucketACLState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketACLState)(nil)).Elem()
}

type bucketACLArgs struct {
	// A configuration block that sets the ACL permissions for an object per grantee documented below.
	AccessControlPolicy *BucketACLAccessControlPolicy `pulumi:"accessControlPolicy"`
	// The canned ACL you want to apply to the bucket.
	Acl *string `pulumi:"acl"`
	// The bucket's name or regional ID.
	Bucket string `pulumi:"bucket"`
	// The project ID of the expected bucket owner.
	ExpectedBucketOwner *string `pulumi:"expectedBucketOwner"`
	// The project_id you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The [region](https://developers.scaleway.com/en/quickstart/#region-definition) in which the bucket should be created.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a BucketACL resource.
type BucketACLArgs struct {
	// A configuration block that sets the ACL permissions for an object per grantee documented below.
	AccessControlPolicy BucketACLAccessControlPolicyPtrInput
	// The canned ACL you want to apply to the bucket.
	Acl pulumi.StringPtrInput
	// The bucket's name or regional ID.
	Bucket pulumi.StringInput
	// The project ID of the expected bucket owner.
	ExpectedBucketOwner pulumi.StringPtrInput
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The [region](https://developers.scaleway.com/en/quickstart/#region-definition) in which the bucket should be created.
	Region pulumi.StringPtrInput
}

func (BucketACLArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketACLArgs)(nil)).Elem()
}

type BucketACLInput interface {
	pulumi.Input

	ToBucketACLOutput() BucketACLOutput
	ToBucketACLOutputWithContext(ctx context.Context) BucketACLOutput
}

func (*BucketACL) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketACL)(nil)).Elem()
}

func (i *BucketACL) ToBucketACLOutput() BucketACLOutput {
	return i.ToBucketACLOutputWithContext(context.Background())
}

func (i *BucketACL) ToBucketACLOutputWithContext(ctx context.Context) BucketACLOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketACLOutput)
}

// BucketACLArrayInput is an input type that accepts BucketACLArray and BucketACLArrayOutput values.
// You can construct a concrete instance of `BucketACLArrayInput` via:
//
//	BucketACLArray{ BucketACLArgs{...} }
type BucketACLArrayInput interface {
	pulumi.Input

	ToBucketACLArrayOutput() BucketACLArrayOutput
	ToBucketACLArrayOutputWithContext(context.Context) BucketACLArrayOutput
}

type BucketACLArray []BucketACLInput

func (BucketACLArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketACL)(nil)).Elem()
}

func (i BucketACLArray) ToBucketACLArrayOutput() BucketACLArrayOutput {
	return i.ToBucketACLArrayOutputWithContext(context.Background())
}

func (i BucketACLArray) ToBucketACLArrayOutputWithContext(ctx context.Context) BucketACLArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketACLArrayOutput)
}

// BucketACLMapInput is an input type that accepts BucketACLMap and BucketACLMapOutput values.
// You can construct a concrete instance of `BucketACLMapInput` via:
//
//	BucketACLMap{ "key": BucketACLArgs{...} }
type BucketACLMapInput interface {
	pulumi.Input

	ToBucketACLMapOutput() BucketACLMapOutput
	ToBucketACLMapOutputWithContext(context.Context) BucketACLMapOutput
}

type BucketACLMap map[string]BucketACLInput

func (BucketACLMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketACL)(nil)).Elem()
}

func (i BucketACLMap) ToBucketACLMapOutput() BucketACLMapOutput {
	return i.ToBucketACLMapOutputWithContext(context.Background())
}

func (i BucketACLMap) ToBucketACLMapOutputWithContext(ctx context.Context) BucketACLMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketACLMapOutput)
}

type BucketACLOutput struct{ *pulumi.OutputState }

func (BucketACLOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketACL)(nil)).Elem()
}

func (o BucketACLOutput) ToBucketACLOutput() BucketACLOutput {
	return o
}

func (o BucketACLOutput) ToBucketACLOutputWithContext(ctx context.Context) BucketACLOutput {
	return o
}

// A configuration block that sets the ACL permissions for an object per grantee documented below.
func (o BucketACLOutput) AccessControlPolicy() BucketACLAccessControlPolicyOutput {
	return o.ApplyT(func(v *BucketACL) BucketACLAccessControlPolicyOutput { return v.AccessControlPolicy }).(BucketACLAccessControlPolicyOutput)
}

// The canned ACL you want to apply to the bucket.
func (o BucketACLOutput) Acl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketACL) pulumi.StringPtrOutput { return v.Acl }).(pulumi.StringPtrOutput)
}

// The bucket's name or regional ID.
func (o BucketACLOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketACL) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// The project ID of the expected bucket owner.
func (o BucketACLOutput) ExpectedBucketOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketACL) pulumi.StringPtrOutput { return v.ExpectedBucketOwner }).(pulumi.StringPtrOutput)
}

// The project_id you want to attach the resource to
func (o BucketACLOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketACL) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The [region](https://developers.scaleway.com/en/quickstart/#region-definition) in which the bucket should be created.
func (o BucketACLOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketACL) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type BucketACLArrayOutput struct{ *pulumi.OutputState }

func (BucketACLArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketACL)(nil)).Elem()
}

func (o BucketACLArrayOutput) ToBucketACLArrayOutput() BucketACLArrayOutput {
	return o
}

func (o BucketACLArrayOutput) ToBucketACLArrayOutputWithContext(ctx context.Context) BucketACLArrayOutput {
	return o
}

func (o BucketACLArrayOutput) Index(i pulumi.IntInput) BucketACLOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketACL {
		return vs[0].([]*BucketACL)[vs[1].(int)]
	}).(BucketACLOutput)
}

type BucketACLMapOutput struct{ *pulumi.OutputState }

func (BucketACLMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketACL)(nil)).Elem()
}

func (o BucketACLMapOutput) ToBucketACLMapOutput() BucketACLMapOutput {
	return o
}

func (o BucketACLMapOutput) ToBucketACLMapOutputWithContext(ctx context.Context) BucketACLMapOutput {
	return o
}

func (o BucketACLMapOutput) MapIndex(k pulumi.StringInput) BucketACLOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketACL {
		return vs[0].(map[string]*BucketACL)[vs[1].(string)]
	}).(BucketACLOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketACLInput)(nil)).Elem(), &BucketACL{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketACLArrayInput)(nil)).Elem(), BucketACLArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketACLMapInput)(nil)).Elem(), BucketACLMap{})
	pulumi.RegisterOutputType(BucketACLOutput{})
	pulumi.RegisterOutputType(BucketACLArrayOutput{})
	pulumi.RegisterOutputType(BucketACLMapOutput{})
}
