// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package objectstorage

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway object storage bucket policy.
// For more information, see [the documentation](https://www.scaleway.com/en/docs/storage/object/api-cli/bucket-policy/).
//
// ## Example Usage
// ### Example Usage with an IAM user
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/account"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/iam"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/objectstorage"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := account.LookupProject(ctx, &account.LookupProjectArgs{
//				Name: pulumi.StringRef("default"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			user, err := iam.LookupUser(ctx, &iam.LookupUserArgs{
//				Email: pulumi.StringRef("user@scaleway.com"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewPolicy(ctx, "policyPolicy", &iam.PolicyArgs{
//				UserId: *pulumi.String(user.Id),
//				Rules: iam.PolicyRuleArray{
//					&iam.PolicyRuleArgs{
//						ProjectIds: pulumi.StringArray{
//							*pulumi.String(_default.Id),
//						},
//						PermissionSetNames: pulumi.StringArray{
//							pulumi.String("ObjectStorageFullAccess"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			bucket, err := objectstorage.NewBucket(ctx, "bucket", nil)
//			if err != nil {
//				return err
//			}
//			_, err = objectstorage.NewBucketPolicy(ctx, "policyBucketPolicy", &objectstorage.BucketPolicyArgs{
//				Bucket: bucket.Name,
//				Policy: pulumi.All(bucket.Name, bucket.Name).ApplyT(func(_args []interface{}) (string, error) {
//					bucketName := _args[0].(string)
//					bucketName1 := _args[1].(string)
//					var _zero string
//					tmpJSON0, err := json.Marshal(map[string]interface{}{
//						"Version": "2023-04-17",
//						"Id":      "MyBucketPolicy",
//						"Statement": []map[string]interface{}{
//							map[string]interface{}{
//								"Effect": "Allow",
//								"Action": []string{
//									"s3:*",
//								},
//								"Principal": map[string]interface{}{
//									"SCW": fmt.Sprintf("user_id:%v", user.Id),
//								},
//								"Resource": []string{
//									bucketName,
//									fmt.Sprintf("%v/*", bucketName1),
//								},
//							},
//						},
//					})
//					if err != nil {
//						return _zero, err
//					}
//					json0 := string(tmpJSON0)
//					return json0, nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example with an IAM application
// ### Creating a bucket and delegating read access to an application
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/account"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/iam"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/objectstorage"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := account.LookupProject(ctx, &account.LookupProjectArgs{
//				Name: pulumi.StringRef("default"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewApplication(ctx, "reading-app", nil)
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewPolicy(ctx, "policyPolicy", &iam.PolicyArgs{
//				ApplicationId: reading_app.ID(),
//				Rules: iam.PolicyRuleArray{
//					&iam.PolicyRuleArgs{
//						ProjectIds: pulumi.StringArray{
//							*pulumi.String(_default.Id),
//						},
//						PermissionSetNames: pulumi.StringArray{
//							pulumi.String("ObjectStorageBucketsRead"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			bucket, err := objectstorage.NewBucket(ctx, "bucket", nil)
//			if err != nil {
//				return err
//			}
//			_, err = objectstorage.NewBucketPolicy(ctx, "policyBucketPolicy", &objectstorage.BucketPolicyArgs{
//				Bucket: bucket.ID(),
//				Policy: pulumi.All(reading_app.ID(), bucket.Name, bucket.Name).ApplyT(func(_args []interface{}) (string, error) {
//					id := _args[0].(string)
//					bucketName := _args[1].(string)
//					bucketName1 := _args[2].(string)
//					var _zero string
//					tmpJSON0, err := json.Marshal(map[string]interface{}{
//						"Version": "2023-04-17",
//						"Statement": []map[string]interface{}{
//							map[string]interface{}{
//								"Sid":    "Delegate read access",
//								"Effect": "Allow",
//								"Principal": map[string]interface{}{
//									"SCW": fmt.Sprintf("application_id:%v", id),
//								},
//								"Action": []string{
//									"s3:ListBucket",
//									"s3:GetObject",
//								},
//								"Resource": []string{
//									bucketName,
//									fmt.Sprintf("%v/*", bucketName1),
//								},
//							},
//						},
//					})
//					if err != nil {
//						return _zero, err
//					}
//					json0 := string(tmpJSON0)
//					return json0, nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Reading the bucket with the application
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/iam"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/objectstorage"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			reading_app, err := iam.LookupApplication(ctx, &iam.LookupApplicationArgs{
//				Name: pulumi.StringRef("reading-app"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewAPIKey(ctx, "reading-api-key", &iam.APIKeyArgs{
//				ApplicationId: *pulumi.String(reading_app.Id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = scaleway.NewProvider(ctx, "reading-profile", &scaleway.ProviderArgs{
//				AccessKey: reading_api_key.AccessKey,
//				SecretKey: reading_api_key.SecretKey,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = objectstorage.LookupBucket(ctx, &objectstorage.LookupBucketArgs{
//				Name: pulumi.StringRef("some-unique-name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example with AWS provider
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/account"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/objectstorage"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := account.LookupProject(ctx, &account.LookupProjectArgs{
//				Name: pulumi.StringRef("default"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			bucket, err := objectstorage.NewBucket(ctx, "bucket", nil)
//			if err != nil {
//				return err
//			}
//			policy := iam.GetPolicyDocumentOutput(ctx, iam.GetPolicyDocumentOutputArgs{
//				Version: pulumi.String("2012-10-17"),
//				Statements: iam.GetPolicyDocumentStatementArray{
//					&iam.GetPolicyDocumentStatementArgs{
//						Sid:    pulumi.String("Delegate access"),
//						Effect: pulumi.String("Allow"),
//						Principals: iam.GetPolicyDocumentStatementPrincipalArray{
//							&iam.GetPolicyDocumentStatementPrincipalArgs{
//								Type: pulumi.String("SCW"),
//								Identifiers: pulumi.StringArray{
//									pulumi.String(fmt.Sprintf("project_id:%v", _default.Id)),
//								},
//							},
//						},
//						Actions: pulumi.StringArray{
//							pulumi.String("s3:ListBucket"),
//						},
//						Resources: pulumi.StringArray{
//							bucket.Name,
//							bucket.Name.ApplyT(func(name string) (string, error) {
//								return fmt.Sprintf("%v/*", name), nil
//							}).(pulumi.StringOutput),
//						},
//					},
//				},
//			}, nil)
//			_, err = objectstorage.NewBucketPolicy(ctx, "main", &objectstorage.BucketPolicyArgs{
//				Bucket: bucket.ID(),
//				Policy: policy.ApplyT(func(policy iam.GetPolicyDocumentResult) (*string, error) {
//					return &policy.Json, nil
//				}).(pulumi.StringPtrOutput),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example with deprecated version 2012-10-17
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/account"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/objectstorage"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_default, err := account.LookupProject(ctx, &account.LookupProjectArgs{
//				Name: pulumi.StringRef("default"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			bucket, err := objectstorage.NewBucket(ctx, "bucket", &objectstorage.BucketArgs{
//				Region: pulumi.String("fr-par"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = objectstorage.NewBucketPolicy(ctx, "policy", &objectstorage.BucketPolicyArgs{
//				Bucket: bucket.Name,
//				Policy: pulumi.All(bucket.Name, bucket.Name).ApplyT(func(_args []interface{}) (string, error) {
//					bucketName := _args[0].(string)
//					bucketName1 := _args[1].(string)
//					var _zero string
//					tmpJSON0, err := json.Marshal(map[string]interface{}{
//						"Version": "2012-10-17",
//						"Statement": []map[string]interface{}{
//							map[string]interface{}{
//								"Effect": "Allow",
//								"Action": []string{
//									"s3:ListBucket",
//									"s3:GetObjectTagging",
//								},
//								"Principal": map[string]interface{}{
//									"SCW": fmt.Sprintf("project_id:%v", _default.Id),
//								},
//								"Resource": []string{
//									bucketName,
//									fmt.Sprintf("%v/*", bucketName1),
//								},
//							},
//						},
//					})
//					if err != nil {
//						return _zero, err
//					}
//					json0 := string(tmpJSON0)
//					return json0, nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// **NB:** To configure the AWS provider with Scaleway credentials, please visit this [tutorial](https://www.scaleway.com/en/docs/storage/object/api-cli/object-storage-aws-cli/).
//
// ## Import
//
// Bucket policies can be imported using the `{region}/{bucketName}` identifier, e.g. bash
//
// ```sh
//
//	$ pulumi import scaleway:objectstorage/bucketPolicy:BucketPolicy some_bucket fr-par/some-bucket
//
// ```
//
//	~> **Important:** The `project_id` attribute has a particular behavior with s3 products because the s3 API is scoped by project. If you are using a project different from the default one, you have to specify the project ID at the end of the import command. bash
//
// ```sh
//
//	$ pulumi import scaleway:objectstorage/bucketPolicy:BucketPolicy some_bucket fr-par/some-bucket@xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx
//
// ```
type BucketPolicy struct {
	pulumi.CustomResourceState

	// The bucket's name or regional ID.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// The text of the policy.
	Policy pulumi.StringOutput `pulumi:"policy"`
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The Scaleway region this bucket resides in.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewBucketPolicy registers a new resource with the given unique name, arguments, and options.
func NewBucketPolicy(ctx *pulumi.Context,
	name string, args *BucketPolicyArgs, opts ...pulumi.ResourceOption) (*BucketPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketPolicy
	err := ctx.RegisterResource("scaleway:objectstorage/bucketPolicy:BucketPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketPolicy gets an existing BucketPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketPolicyState, opts ...pulumi.ResourceOption) (*BucketPolicy, error) {
	var resource BucketPolicy
	err := ctx.ReadResource("scaleway:objectstorage/bucketPolicy:BucketPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketPolicy resources.
type bucketPolicyState struct {
	// The bucket's name or regional ID.
	Bucket *string `pulumi:"bucket"`
	// The text of the policy.
	Policy *string `pulumi:"policy"`
	// The project_id you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The Scaleway region this bucket resides in.
	Region *string `pulumi:"region"`
}

type BucketPolicyState struct {
	// The bucket's name or regional ID.
	Bucket pulumi.StringPtrInput
	// The text of the policy.
	Policy pulumi.StringPtrInput
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The Scaleway region this bucket resides in.
	Region pulumi.StringPtrInput
}

func (BucketPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketPolicyState)(nil)).Elem()
}

type bucketPolicyArgs struct {
	// The bucket's name or regional ID.
	Bucket string `pulumi:"bucket"`
	// The text of the policy.
	Policy string `pulumi:"policy"`
	// The project_id you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// The Scaleway region this bucket resides in.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a BucketPolicy resource.
type BucketPolicyArgs struct {
	// The bucket's name or regional ID.
	Bucket pulumi.StringInput
	// The text of the policy.
	Policy pulumi.StringInput
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// The Scaleway region this bucket resides in.
	Region pulumi.StringPtrInput
}

func (BucketPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketPolicyArgs)(nil)).Elem()
}

type BucketPolicyInput interface {
	pulumi.Input

	ToBucketPolicyOutput() BucketPolicyOutput
	ToBucketPolicyOutputWithContext(ctx context.Context) BucketPolicyOutput
}

func (*BucketPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketPolicy)(nil)).Elem()
}

func (i *BucketPolicy) ToBucketPolicyOutput() BucketPolicyOutput {
	return i.ToBucketPolicyOutputWithContext(context.Background())
}

func (i *BucketPolicy) ToBucketPolicyOutputWithContext(ctx context.Context) BucketPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketPolicyOutput)
}

// BucketPolicyArrayInput is an input type that accepts BucketPolicyArray and BucketPolicyArrayOutput values.
// You can construct a concrete instance of `BucketPolicyArrayInput` via:
//
//	BucketPolicyArray{ BucketPolicyArgs{...} }
type BucketPolicyArrayInput interface {
	pulumi.Input

	ToBucketPolicyArrayOutput() BucketPolicyArrayOutput
	ToBucketPolicyArrayOutputWithContext(context.Context) BucketPolicyArrayOutput
}

type BucketPolicyArray []BucketPolicyInput

func (BucketPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketPolicy)(nil)).Elem()
}

func (i BucketPolicyArray) ToBucketPolicyArrayOutput() BucketPolicyArrayOutput {
	return i.ToBucketPolicyArrayOutputWithContext(context.Background())
}

func (i BucketPolicyArray) ToBucketPolicyArrayOutputWithContext(ctx context.Context) BucketPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketPolicyArrayOutput)
}

// BucketPolicyMapInput is an input type that accepts BucketPolicyMap and BucketPolicyMapOutput values.
// You can construct a concrete instance of `BucketPolicyMapInput` via:
//
//	BucketPolicyMap{ "key": BucketPolicyArgs{...} }
type BucketPolicyMapInput interface {
	pulumi.Input

	ToBucketPolicyMapOutput() BucketPolicyMapOutput
	ToBucketPolicyMapOutputWithContext(context.Context) BucketPolicyMapOutput
}

type BucketPolicyMap map[string]BucketPolicyInput

func (BucketPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketPolicy)(nil)).Elem()
}

func (i BucketPolicyMap) ToBucketPolicyMapOutput() BucketPolicyMapOutput {
	return i.ToBucketPolicyMapOutputWithContext(context.Background())
}

func (i BucketPolicyMap) ToBucketPolicyMapOutputWithContext(ctx context.Context) BucketPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketPolicyMapOutput)
}

type BucketPolicyOutput struct{ *pulumi.OutputState }

func (BucketPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketPolicy)(nil)).Elem()
}

func (o BucketPolicyOutput) ToBucketPolicyOutput() BucketPolicyOutput {
	return o
}

func (o BucketPolicyOutput) ToBucketPolicyOutputWithContext(ctx context.Context) BucketPolicyOutput {
	return o
}

// The bucket's name or regional ID.
func (o BucketPolicyOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketPolicy) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// The text of the policy.
func (o BucketPolicyOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketPolicy) pulumi.StringOutput { return v.Policy }).(pulumi.StringOutput)
}

// The project_id you want to attach the resource to
func (o BucketPolicyOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketPolicy) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The Scaleway region this bucket resides in.
func (o BucketPolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketPolicy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type BucketPolicyArrayOutput struct{ *pulumi.OutputState }

func (BucketPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketPolicy)(nil)).Elem()
}

func (o BucketPolicyArrayOutput) ToBucketPolicyArrayOutput() BucketPolicyArrayOutput {
	return o
}

func (o BucketPolicyArrayOutput) ToBucketPolicyArrayOutputWithContext(ctx context.Context) BucketPolicyArrayOutput {
	return o
}

func (o BucketPolicyArrayOutput) Index(i pulumi.IntInput) BucketPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketPolicy {
		return vs[0].([]*BucketPolicy)[vs[1].(int)]
	}).(BucketPolicyOutput)
}

type BucketPolicyMapOutput struct{ *pulumi.OutputState }

func (BucketPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketPolicy)(nil)).Elem()
}

func (o BucketPolicyMapOutput) ToBucketPolicyMapOutput() BucketPolicyMapOutput {
	return o
}

func (o BucketPolicyMapOutput) ToBucketPolicyMapOutputWithContext(ctx context.Context) BucketPolicyMapOutput {
	return o
}

func (o BucketPolicyMapOutput) MapIndex(k pulumi.StringInput) BucketPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketPolicy {
		return vs[0].(map[string]*BucketPolicy)[vs[1].(string)]
	}).(BucketPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketPolicyInput)(nil)).Elem(), &BucketPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketPolicyArrayInput)(nil)).Elem(), BucketPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketPolicyMapInput)(nil)).Elem(), BucketPolicyMap{})
	pulumi.RegisterOutputType(BucketPolicyOutput{})
	pulumi.RegisterOutputType(BucketPolicyArrayOutput{})
	pulumi.RegisterOutputType(BucketPolicyMapOutput{})
}
