// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mnq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Gets information about SQS for a project
//
// ## Examples
//
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/mnq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mnq.LookupSQS(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = mnq.LookupSQS(ctx, &mnq.LookupSQSArgs{
//				ProjectId: pulumi.StringRef(scaleway_account_project.Main.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSQS(ctx *pulumi.Context, args *LookupSQSArgs, opts ...pulumi.InvokeOption) (*LookupSQSResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSQSResult
	err := ctx.Invoke("scaleway:mnq/getSQS:getSQS", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSQS.
type LookupSQSArgs struct {
	// `projectId`) The ID of the project for which sqs is enabled.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region in which sqs is enabled.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getSQS.
type LookupSQSResult struct {
	// The endpoint of the SQS service for this project.
	Endpoint string `pulumi:"endpoint"`
	// The provider-assigned unique ID for this managed resource.
	Id        string  `pulumi:"id"`
	ProjectId *string `pulumi:"projectId"`
	Region    *string `pulumi:"region"`
}

func LookupSQSOutput(ctx *pulumi.Context, args LookupSQSOutputArgs, opts ...pulumi.InvokeOption) LookupSQSResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSQSResult, error) {
			args := v.(LookupSQSArgs)
			r, err := LookupSQS(ctx, &args, opts...)
			var s LookupSQSResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSQSResultOutput)
}

// A collection of arguments for invoking getSQS.
type LookupSQSOutputArgs struct {
	// `projectId`) The ID of the project for which sqs is enabled.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// `region`). The region in which sqs is enabled.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (LookupSQSOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSQSArgs)(nil)).Elem()
}

// A collection of values returned by getSQS.
type LookupSQSResultOutput struct{ *pulumi.OutputState }

func (LookupSQSResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSQSResult)(nil)).Elem()
}

func (o LookupSQSResultOutput) ToLookupSQSResultOutput() LookupSQSResultOutput {
	return o
}

func (o LookupSQSResultOutput) ToLookupSQSResultOutputWithContext(ctx context.Context) LookupSQSResultOutput {
	return o
}

// The endpoint of the SQS service for this project.
func (o LookupSQSResultOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSQSResult) string { return v.Endpoint }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSQSResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSQSResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSQSResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSQSResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

func (o LookupSQSResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSQSResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSQSResultOutput{})
}
