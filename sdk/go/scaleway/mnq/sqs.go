// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mnq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Activate Scaleway Messaging and queuing SQS for a project.
// For further information please check
// our [documentation](https://www.scaleway.com/en/docs/serverless/messaging/reference-content/sqs-overview/)
//
// ## Example Usage
//
// ### Basic
//
// # Activate SQS for default project
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/mnq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mnq.NewSQS(ctx, "main", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// # Activate SQS for a specific project
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/account"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/mnq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := account.LookupProject(ctx, &account.LookupProjectArgs{
//				Name: pulumi.StringRef("default"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = mnq.NewSQS(ctx, "forProject", &mnq.SQSArgs{
//				ProjectId: *pulumi.String(project.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// SQS status can be imported using the `{region}/{project_id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:mnq/sQS:SQS main fr-par/11111111111111111111111111111111
// ```
type SQS struct {
	pulumi.CustomResourceState

	// The endpoint of the SQS service for this project.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// `projectId`) The ID of the project the sqs will be enabled for.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// `region`). The region
	// in which sqs will be enabled.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewSQS registers a new resource with the given unique name, arguments, and options.
func NewSQS(ctx *pulumi.Context,
	name string, args *SQSArgs, opts ...pulumi.ResourceOption) (*SQS, error) {
	if args == nil {
		args = &SQSArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SQS
	err := ctx.RegisterResource("scaleway:mnq/sQS:SQS", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSQS gets an existing SQS resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSQS(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SQSState, opts ...pulumi.ResourceOption) (*SQS, error) {
	var resource SQS
	err := ctx.ReadResource("scaleway:mnq/sQS:SQS", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SQS resources.
type sqsState struct {
	// The endpoint of the SQS service for this project.
	Endpoint *string `pulumi:"endpoint"`
	// `projectId`) The ID of the project the sqs will be enabled for.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region
	// in which sqs will be enabled.
	Region *string `pulumi:"region"`
}

type SQSState struct {
	// The endpoint of the SQS service for this project.
	Endpoint pulumi.StringPtrInput
	// `projectId`) The ID of the project the sqs will be enabled for.
	ProjectId pulumi.StringPtrInput
	// `region`). The region
	// in which sqs will be enabled.
	Region pulumi.StringPtrInput
}

func (SQSState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqsState)(nil)).Elem()
}

type sqsArgs struct {
	// `projectId`) The ID of the project the sqs will be enabled for.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region
	// in which sqs will be enabled.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a SQS resource.
type SQSArgs struct {
	// `projectId`) The ID of the project the sqs will be enabled for.
	ProjectId pulumi.StringPtrInput
	// `region`). The region
	// in which sqs will be enabled.
	Region pulumi.StringPtrInput
}

func (SQSArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqsArgs)(nil)).Elem()
}

type SQSInput interface {
	pulumi.Input

	ToSQSOutput() SQSOutput
	ToSQSOutputWithContext(ctx context.Context) SQSOutput
}

func (*SQS) ElementType() reflect.Type {
	return reflect.TypeOf((**SQS)(nil)).Elem()
}

func (i *SQS) ToSQSOutput() SQSOutput {
	return i.ToSQSOutputWithContext(context.Background())
}

func (i *SQS) ToSQSOutputWithContext(ctx context.Context) SQSOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SQSOutput)
}

// SQSArrayInput is an input type that accepts SQSArray and SQSArrayOutput values.
// You can construct a concrete instance of `SQSArrayInput` via:
//
//	SQSArray{ SQSArgs{...} }
type SQSArrayInput interface {
	pulumi.Input

	ToSQSArrayOutput() SQSArrayOutput
	ToSQSArrayOutputWithContext(context.Context) SQSArrayOutput
}

type SQSArray []SQSInput

func (SQSArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SQS)(nil)).Elem()
}

func (i SQSArray) ToSQSArrayOutput() SQSArrayOutput {
	return i.ToSQSArrayOutputWithContext(context.Background())
}

func (i SQSArray) ToSQSArrayOutputWithContext(ctx context.Context) SQSArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SQSArrayOutput)
}

// SQSMapInput is an input type that accepts SQSMap and SQSMapOutput values.
// You can construct a concrete instance of `SQSMapInput` via:
//
//	SQSMap{ "key": SQSArgs{...} }
type SQSMapInput interface {
	pulumi.Input

	ToSQSMapOutput() SQSMapOutput
	ToSQSMapOutputWithContext(context.Context) SQSMapOutput
}

type SQSMap map[string]SQSInput

func (SQSMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SQS)(nil)).Elem()
}

func (i SQSMap) ToSQSMapOutput() SQSMapOutput {
	return i.ToSQSMapOutputWithContext(context.Background())
}

func (i SQSMap) ToSQSMapOutputWithContext(ctx context.Context) SQSMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SQSMapOutput)
}

type SQSOutput struct{ *pulumi.OutputState }

func (SQSOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SQS)(nil)).Elem()
}

func (o SQSOutput) ToSQSOutput() SQSOutput {
	return o
}

func (o SQSOutput) ToSQSOutputWithContext(ctx context.Context) SQSOutput {
	return o
}

// The endpoint of the SQS service for this project.
func (o SQSOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *SQS) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// `projectId`) The ID of the project the sqs will be enabled for.
func (o SQSOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SQS) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// `region`). The region
// in which sqs will be enabled.
func (o SQSOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SQS) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type SQSArrayOutput struct{ *pulumi.OutputState }

func (SQSArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SQS)(nil)).Elem()
}

func (o SQSArrayOutput) ToSQSArrayOutput() SQSArrayOutput {
	return o
}

func (o SQSArrayOutput) ToSQSArrayOutputWithContext(ctx context.Context) SQSArrayOutput {
	return o
}

func (o SQSArrayOutput) Index(i pulumi.IntInput) SQSOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SQS {
		return vs[0].([]*SQS)[vs[1].(int)]
	}).(SQSOutput)
}

type SQSMapOutput struct{ *pulumi.OutputState }

func (SQSMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SQS)(nil)).Elem()
}

func (o SQSMapOutput) ToSQSMapOutput() SQSMapOutput {
	return o
}

func (o SQSMapOutput) ToSQSMapOutputWithContext(ctx context.Context) SQSMapOutput {
	return o
}

func (o SQSMapOutput) MapIndex(k pulumi.StringInput) SQSOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SQS {
		return vs[0].(map[string]*SQS)[vs[1].(string)]
	}).(SQSOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SQSInput)(nil)).Elem(), &SQS{})
	pulumi.RegisterInputType(reflect.TypeOf((*SQSArrayInput)(nil)).Elem(), SQSArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SQSMapInput)(nil)).Elem(), SQSMap{})
	pulumi.RegisterOutputType(SQSOutput{})
	pulumi.RegisterOutputType(SQSArrayOutput{})
	pulumi.RegisterOutputType(SQSMapOutput{})
}
