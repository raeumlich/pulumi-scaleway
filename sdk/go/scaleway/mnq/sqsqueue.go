// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mnq

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Messaging and queuing SQS Queues.
// For further information please check
// our [documentation](https://www.scaleway.com/en/docs/serverless/messaging/how-to/create-manage-queues/)
//
// ## Example Usage
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/mnq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			mainSQS, err := mnq.NewSQS(ctx, "mainSQS", nil)
//			if err != nil {
//				return err
//			}
//			mainSQSCredentials, err := mnq.NewSQSCredentials(ctx, "mainSQSCredentials", &mnq.SQSCredentialsArgs{
//				ProjectId: mainSQS.ProjectId,
//				Permissions: &mnq.SQSCredentialsPermissionsArgs{
//					CanManage:  pulumi.Bool(true),
//					CanReceive: pulumi.Bool(false),
//					CanPublish: pulumi.Bool(false),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mnq.NewSQSQueue(ctx, "mainSQSQueue", &mnq.SQSQueueArgs{
//				ProjectId:   mainSQS.ProjectId,
//				SqsEndpoint: mainSQS.Endpoint,
//				AccessKey:   mainSQSCredentials.AccessKey,
//				SecretKey:   mainSQSCredentials.SecretKey,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SQSQueue struct {
	pulumi.CustomResourceState

	// The access key of the SQS queue.
	AccessKey pulumi.StringOutput `pulumi:"accessKey"`
	// Specifies whether to enable content-based deduplication. Defaults to `false`.
	ContentBasedDeduplication pulumi.BoolOutput `pulumi:"contentBasedDeduplication"`
	// Whether the queue is a FIFO queue. If true, the queue name must end with .fifo. Defaults to `false`.
	FifoQueue pulumi.BoolOutput `pulumi:"fifoQueue"`
	// The number of seconds the queue retains a message. Must be between 60 and 1_209_600. Defaults to 345_600.
	MessageMaxAge pulumi.IntPtrOutput `pulumi:"messageMaxAge"`
	// The maximum size of a message. Should be in bytes. Must be between 1024 and 262_144. Defaults to 262_144.
	MessageMaxSize pulumi.IntPtrOutput `pulumi:"messageMaxSize"`
	// The unique name of the sqs queue. Either `name` or `namePrefix` is required. Conflicts with `namePrefix`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumi.StringOutput `pulumi:"namePrefix"`
	// `projectId`) The ID of the project the sqs is enabled for.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The number of seconds to wait for a message to arrive in the queue before returning. Must be between 0 and 20. Defaults to 0.
	ReceiveWaitTimeSeconds pulumi.IntPtrOutput `pulumi:"receiveWaitTimeSeconds"`
	// `region`). The region in which sqs is enabled.
	Region pulumi.StringOutput `pulumi:"region"`
	// The secret key of the SQS queue.
	SecretKey pulumi.StringOutput `pulumi:"secretKey"`
	// The endpoint of the SQS queue. Can contain a {region} placeholder. Defaults to `https://sqs.mnq.{region}.scaleway.com`.
	SqsEndpoint pulumi.StringPtrOutput `pulumi:"sqsEndpoint"`
	// The URL of the queue.
	Url pulumi.StringOutput `pulumi:"url"`
	// The number of seconds a message is hidden from other consumers. Must be between 0 and 43_200. Defaults to 30.
	VisibilityTimeoutSeconds pulumi.IntPtrOutput `pulumi:"visibilityTimeoutSeconds"`
}

// NewSQSQueue registers a new resource with the given unique name, arguments, and options.
func NewSQSQueue(ctx *pulumi.Context,
	name string, args *SQSQueueArgs, opts ...pulumi.ResourceOption) (*SQSQueue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessKey == nil {
		return nil, errors.New("invalid value for required argument 'AccessKey'")
	}
	if args.SecretKey == nil {
		return nil, errors.New("invalid value for required argument 'SecretKey'")
	}
	if args.AccessKey != nil {
		args.AccessKey = pulumi.ToSecret(args.AccessKey).(pulumi.StringInput)
	}
	if args.SecretKey != nil {
		args.SecretKey = pulumi.ToSecret(args.SecretKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accessKey",
		"secretKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SQSQueue
	err := ctx.RegisterResource("scaleway:mnq/sQSQueue:SQSQueue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSQSQueue gets an existing SQSQueue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSQSQueue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SQSQueueState, opts ...pulumi.ResourceOption) (*SQSQueue, error) {
	var resource SQSQueue
	err := ctx.ReadResource("scaleway:mnq/sQSQueue:SQSQueue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SQSQueue resources.
type sqsqueueState struct {
	// The access key of the SQS queue.
	AccessKey *string `pulumi:"accessKey"`
	// Specifies whether to enable content-based deduplication. Defaults to `false`.
	ContentBasedDeduplication *bool `pulumi:"contentBasedDeduplication"`
	// Whether the queue is a FIFO queue. If true, the queue name must end with .fifo. Defaults to `false`.
	FifoQueue *bool `pulumi:"fifoQueue"`
	// The number of seconds the queue retains a message. Must be between 60 and 1_209_600. Defaults to 345_600.
	MessageMaxAge *int `pulumi:"messageMaxAge"`
	// The maximum size of a message. Should be in bytes. Must be between 1024 and 262_144. Defaults to 262_144.
	MessageMaxSize *int `pulumi:"messageMaxSize"`
	// The unique name of the sqs queue. Either `name` or `namePrefix` is required. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// `projectId`) The ID of the project the sqs is enabled for.
	ProjectId *string `pulumi:"projectId"`
	// The number of seconds to wait for a message to arrive in the queue before returning. Must be between 0 and 20. Defaults to 0.
	ReceiveWaitTimeSeconds *int `pulumi:"receiveWaitTimeSeconds"`
	// `region`). The region in which sqs is enabled.
	Region *string `pulumi:"region"`
	// The secret key of the SQS queue.
	SecretKey *string `pulumi:"secretKey"`
	// The endpoint of the SQS queue. Can contain a {region} placeholder. Defaults to `https://sqs.mnq.{region}.scaleway.com`.
	SqsEndpoint *string `pulumi:"sqsEndpoint"`
	// The URL of the queue.
	Url *string `pulumi:"url"`
	// The number of seconds a message is hidden from other consumers. Must be between 0 and 43_200. Defaults to 30.
	VisibilityTimeoutSeconds *int `pulumi:"visibilityTimeoutSeconds"`
}

type SQSQueueState struct {
	// The access key of the SQS queue.
	AccessKey pulumi.StringPtrInput
	// Specifies whether to enable content-based deduplication. Defaults to `false`.
	ContentBasedDeduplication pulumi.BoolPtrInput
	// Whether the queue is a FIFO queue. If true, the queue name must end with .fifo. Defaults to `false`.
	FifoQueue pulumi.BoolPtrInput
	// The number of seconds the queue retains a message. Must be between 60 and 1_209_600. Defaults to 345_600.
	MessageMaxAge pulumi.IntPtrInput
	// The maximum size of a message. Should be in bytes. Must be between 1024 and 262_144. Defaults to 262_144.
	MessageMaxSize pulumi.IntPtrInput
	// The unique name of the sqs queue. Either `name` or `namePrefix` is required. Conflicts with `namePrefix`.
	Name pulumi.StringPtrInput
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumi.StringPtrInput
	// `projectId`) The ID of the project the sqs is enabled for.
	ProjectId pulumi.StringPtrInput
	// The number of seconds to wait for a message to arrive in the queue before returning. Must be between 0 and 20. Defaults to 0.
	ReceiveWaitTimeSeconds pulumi.IntPtrInput
	// `region`). The region in which sqs is enabled.
	Region pulumi.StringPtrInput
	// The secret key of the SQS queue.
	SecretKey pulumi.StringPtrInput
	// The endpoint of the SQS queue. Can contain a {region} placeholder. Defaults to `https://sqs.mnq.{region}.scaleway.com`.
	SqsEndpoint pulumi.StringPtrInput
	// The URL of the queue.
	Url pulumi.StringPtrInput
	// The number of seconds a message is hidden from other consumers. Must be between 0 and 43_200. Defaults to 30.
	VisibilityTimeoutSeconds pulumi.IntPtrInput
}

func (SQSQueueState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqsqueueState)(nil)).Elem()
}

type sqsqueueArgs struct {
	// The access key of the SQS queue.
	AccessKey string `pulumi:"accessKey"`
	// Specifies whether to enable content-based deduplication. Defaults to `false`.
	ContentBasedDeduplication *bool `pulumi:"contentBasedDeduplication"`
	// Whether the queue is a FIFO queue. If true, the queue name must end with .fifo. Defaults to `false`.
	FifoQueue *bool `pulumi:"fifoQueue"`
	// The number of seconds the queue retains a message. Must be between 60 and 1_209_600. Defaults to 345_600.
	MessageMaxAge *int `pulumi:"messageMaxAge"`
	// The maximum size of a message. Should be in bytes. Must be between 1024 and 262_144. Defaults to 262_144.
	MessageMaxSize *int `pulumi:"messageMaxSize"`
	// The unique name of the sqs queue. Either `name` or `namePrefix` is required. Conflicts with `namePrefix`.
	Name *string `pulumi:"name"`
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix *string `pulumi:"namePrefix"`
	// `projectId`) The ID of the project the sqs is enabled for.
	ProjectId *string `pulumi:"projectId"`
	// The number of seconds to wait for a message to arrive in the queue before returning. Must be between 0 and 20. Defaults to 0.
	ReceiveWaitTimeSeconds *int `pulumi:"receiveWaitTimeSeconds"`
	// `region`). The region in which sqs is enabled.
	Region *string `pulumi:"region"`
	// The secret key of the SQS queue.
	SecretKey string `pulumi:"secretKey"`
	// The endpoint of the SQS queue. Can contain a {region} placeholder. Defaults to `https://sqs.mnq.{region}.scaleway.com`.
	SqsEndpoint *string `pulumi:"sqsEndpoint"`
	// The number of seconds a message is hidden from other consumers. Must be between 0 and 43_200. Defaults to 30.
	VisibilityTimeoutSeconds *int `pulumi:"visibilityTimeoutSeconds"`
}

// The set of arguments for constructing a SQSQueue resource.
type SQSQueueArgs struct {
	// The access key of the SQS queue.
	AccessKey pulumi.StringInput
	// Specifies whether to enable content-based deduplication. Defaults to `false`.
	ContentBasedDeduplication pulumi.BoolPtrInput
	// Whether the queue is a FIFO queue. If true, the queue name must end with .fifo. Defaults to `false`.
	FifoQueue pulumi.BoolPtrInput
	// The number of seconds the queue retains a message. Must be between 60 and 1_209_600. Defaults to 345_600.
	MessageMaxAge pulumi.IntPtrInput
	// The maximum size of a message. Should be in bytes. Must be between 1024 and 262_144. Defaults to 262_144.
	MessageMaxSize pulumi.IntPtrInput
	// The unique name of the sqs queue. Either `name` or `namePrefix` is required. Conflicts with `namePrefix`.
	Name pulumi.StringPtrInput
	// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
	NamePrefix pulumi.StringPtrInput
	// `projectId`) The ID of the project the sqs is enabled for.
	ProjectId pulumi.StringPtrInput
	// The number of seconds to wait for a message to arrive in the queue before returning. Must be between 0 and 20. Defaults to 0.
	ReceiveWaitTimeSeconds pulumi.IntPtrInput
	// `region`). The region in which sqs is enabled.
	Region pulumi.StringPtrInput
	// The secret key of the SQS queue.
	SecretKey pulumi.StringInput
	// The endpoint of the SQS queue. Can contain a {region} placeholder. Defaults to `https://sqs.mnq.{region}.scaleway.com`.
	SqsEndpoint pulumi.StringPtrInput
	// The number of seconds a message is hidden from other consumers. Must be between 0 and 43_200. Defaults to 30.
	VisibilityTimeoutSeconds pulumi.IntPtrInput
}

func (SQSQueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqsqueueArgs)(nil)).Elem()
}

type SQSQueueInput interface {
	pulumi.Input

	ToSQSQueueOutput() SQSQueueOutput
	ToSQSQueueOutputWithContext(ctx context.Context) SQSQueueOutput
}

func (*SQSQueue) ElementType() reflect.Type {
	return reflect.TypeOf((**SQSQueue)(nil)).Elem()
}

func (i *SQSQueue) ToSQSQueueOutput() SQSQueueOutput {
	return i.ToSQSQueueOutputWithContext(context.Background())
}

func (i *SQSQueue) ToSQSQueueOutputWithContext(ctx context.Context) SQSQueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SQSQueueOutput)
}

// SQSQueueArrayInput is an input type that accepts SQSQueueArray and SQSQueueArrayOutput values.
// You can construct a concrete instance of `SQSQueueArrayInput` via:
//
//	SQSQueueArray{ SQSQueueArgs{...} }
type SQSQueueArrayInput interface {
	pulumi.Input

	ToSQSQueueArrayOutput() SQSQueueArrayOutput
	ToSQSQueueArrayOutputWithContext(context.Context) SQSQueueArrayOutput
}

type SQSQueueArray []SQSQueueInput

func (SQSQueueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SQSQueue)(nil)).Elem()
}

func (i SQSQueueArray) ToSQSQueueArrayOutput() SQSQueueArrayOutput {
	return i.ToSQSQueueArrayOutputWithContext(context.Background())
}

func (i SQSQueueArray) ToSQSQueueArrayOutputWithContext(ctx context.Context) SQSQueueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SQSQueueArrayOutput)
}

// SQSQueueMapInput is an input type that accepts SQSQueueMap and SQSQueueMapOutput values.
// You can construct a concrete instance of `SQSQueueMapInput` via:
//
//	SQSQueueMap{ "key": SQSQueueArgs{...} }
type SQSQueueMapInput interface {
	pulumi.Input

	ToSQSQueueMapOutput() SQSQueueMapOutput
	ToSQSQueueMapOutputWithContext(context.Context) SQSQueueMapOutput
}

type SQSQueueMap map[string]SQSQueueInput

func (SQSQueueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SQSQueue)(nil)).Elem()
}

func (i SQSQueueMap) ToSQSQueueMapOutput() SQSQueueMapOutput {
	return i.ToSQSQueueMapOutputWithContext(context.Background())
}

func (i SQSQueueMap) ToSQSQueueMapOutputWithContext(ctx context.Context) SQSQueueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SQSQueueMapOutput)
}

type SQSQueueOutput struct{ *pulumi.OutputState }

func (SQSQueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SQSQueue)(nil)).Elem()
}

func (o SQSQueueOutput) ToSQSQueueOutput() SQSQueueOutput {
	return o
}

func (o SQSQueueOutput) ToSQSQueueOutputWithContext(ctx context.Context) SQSQueueOutput {
	return o
}

// The access key of the SQS queue.
func (o SQSQueueOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SQSQueue) pulumi.StringOutput { return v.AccessKey }).(pulumi.StringOutput)
}

// Specifies whether to enable content-based deduplication. Defaults to `false`.
func (o SQSQueueOutput) ContentBasedDeduplication() pulumi.BoolOutput {
	return o.ApplyT(func(v *SQSQueue) pulumi.BoolOutput { return v.ContentBasedDeduplication }).(pulumi.BoolOutput)
}

// Whether the queue is a FIFO queue. If true, the queue name must end with .fifo. Defaults to `false`.
func (o SQSQueueOutput) FifoQueue() pulumi.BoolOutput {
	return o.ApplyT(func(v *SQSQueue) pulumi.BoolOutput { return v.FifoQueue }).(pulumi.BoolOutput)
}

// The number of seconds the queue retains a message. Must be between 60 and 1_209_600. Defaults to 345_600.
func (o SQSQueueOutput) MessageMaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SQSQueue) pulumi.IntPtrOutput { return v.MessageMaxAge }).(pulumi.IntPtrOutput)
}

// The maximum size of a message. Should be in bytes. Must be between 1024 and 262_144. Defaults to 262_144.
func (o SQSQueueOutput) MessageMaxSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SQSQueue) pulumi.IntPtrOutput { return v.MessageMaxSize }).(pulumi.IntPtrOutput)
}

// The unique name of the sqs queue. Either `name` or `namePrefix` is required. Conflicts with `namePrefix`.
func (o SQSQueueOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SQSQueue) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
func (o SQSQueueOutput) NamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *SQSQueue) pulumi.StringOutput { return v.NamePrefix }).(pulumi.StringOutput)
}

// `projectId`) The ID of the project the sqs is enabled for.
func (o SQSQueueOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SQSQueue) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The number of seconds to wait for a message to arrive in the queue before returning. Must be between 0 and 20. Defaults to 0.
func (o SQSQueueOutput) ReceiveWaitTimeSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SQSQueue) pulumi.IntPtrOutput { return v.ReceiveWaitTimeSeconds }).(pulumi.IntPtrOutput)
}

// `region`). The region in which sqs is enabled.
func (o SQSQueueOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SQSQueue) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The secret key of the SQS queue.
func (o SQSQueueOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SQSQueue) pulumi.StringOutput { return v.SecretKey }).(pulumi.StringOutput)
}

// The endpoint of the SQS queue. Can contain a {region} placeholder. Defaults to `https://sqs.mnq.{region}.scaleway.com`.
func (o SQSQueueOutput) SqsEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SQSQueue) pulumi.StringPtrOutput { return v.SqsEndpoint }).(pulumi.StringPtrOutput)
}

// The URL of the queue.
func (o SQSQueueOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *SQSQueue) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// The number of seconds a message is hidden from other consumers. Must be between 0 and 43_200. Defaults to 30.
func (o SQSQueueOutput) VisibilityTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SQSQueue) pulumi.IntPtrOutput { return v.VisibilityTimeoutSeconds }).(pulumi.IntPtrOutput)
}

type SQSQueueArrayOutput struct{ *pulumi.OutputState }

func (SQSQueueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SQSQueue)(nil)).Elem()
}

func (o SQSQueueArrayOutput) ToSQSQueueArrayOutput() SQSQueueArrayOutput {
	return o
}

func (o SQSQueueArrayOutput) ToSQSQueueArrayOutputWithContext(ctx context.Context) SQSQueueArrayOutput {
	return o
}

func (o SQSQueueArrayOutput) Index(i pulumi.IntInput) SQSQueueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SQSQueue {
		return vs[0].([]*SQSQueue)[vs[1].(int)]
	}).(SQSQueueOutput)
}

type SQSQueueMapOutput struct{ *pulumi.OutputState }

func (SQSQueueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SQSQueue)(nil)).Elem()
}

func (o SQSQueueMapOutput) ToSQSQueueMapOutput() SQSQueueMapOutput {
	return o
}

func (o SQSQueueMapOutput) ToSQSQueueMapOutputWithContext(ctx context.Context) SQSQueueMapOutput {
	return o
}

func (o SQSQueueMapOutput) MapIndex(k pulumi.StringInput) SQSQueueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SQSQueue {
		return vs[0].(map[string]*SQSQueue)[vs[1].(string)]
	}).(SQSQueueOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SQSQueueInput)(nil)).Elem(), &SQSQueue{})
	pulumi.RegisterInputType(reflect.TypeOf((*SQSQueueArrayInput)(nil)).Elem(), SQSQueueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SQSQueueMapInput)(nil)).Elem(), SQSQueueMap{})
	pulumi.RegisterOutputType(SQSQueueOutput{})
	pulumi.RegisterOutputType(SQSQueueArrayOutput{})
	pulumi.RegisterOutputType(SQSQueueMapOutput{})
}
