// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mnq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Activate Scaleway Messaging and queuing SNS for a project.
// For further information please check
// our [documentation](https://www.scaleway.com/en/docs/serverless/messaging/reference-content/sns-overview/)
//
// ## Example Usage
// ### Basic
//
// # Activate SNS for default project
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/mnq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mnq.NewSNS(ctx, "main", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// # Activate SNS for a specific project
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/account"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/mnq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := account.LookupProject(ctx, &account.LookupProjectArgs{
//				Name: pulumi.StringRef("default"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = mnq.NewSNS(ctx, "forProject", &mnq.SNSArgs{
//				ProjectId: *pulumi.String(project.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SNS status can be imported using the `{region}/{project_id}`, e.g. bash
//
// ```sh
//
//	$ pulumi import scaleway:mnq/sNS:SNS main fr-par/11111111111111111111111111111111
//
// ```
type SNS struct {
	pulumi.CustomResourceState

	// The endpoint of the SNS service for this project.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// `projectId`) The ID of the project the sns will be enabled for.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// `region`). The region
	// in which sns will be enabled.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewSNS registers a new resource with the given unique name, arguments, and options.
func NewSNS(ctx *pulumi.Context,
	name string, args *SNSArgs, opts ...pulumi.ResourceOption) (*SNS, error) {
	if args == nil {
		args = &SNSArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SNS
	err := ctx.RegisterResource("scaleway:mnq/sNS:SNS", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSNS gets an existing SNS resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSNS(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SNSState, opts ...pulumi.ResourceOption) (*SNS, error) {
	var resource SNS
	err := ctx.ReadResource("scaleway:mnq/sNS:SNS", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SNS resources.
type snsState struct {
	// The endpoint of the SNS service for this project.
	Endpoint *string `pulumi:"endpoint"`
	// `projectId`) The ID of the project the sns will be enabled for.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region
	// in which sns will be enabled.
	Region *string `pulumi:"region"`
}

type SNSState struct {
	// The endpoint of the SNS service for this project.
	Endpoint pulumi.StringPtrInput
	// `projectId`) The ID of the project the sns will be enabled for.
	ProjectId pulumi.StringPtrInput
	// `region`). The region
	// in which sns will be enabled.
	Region pulumi.StringPtrInput
}

func (SNSState) ElementType() reflect.Type {
	return reflect.TypeOf((*snsState)(nil)).Elem()
}

type snsArgs struct {
	// `projectId`) The ID of the project the sns will be enabled for.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region
	// in which sns will be enabled.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a SNS resource.
type SNSArgs struct {
	// `projectId`) The ID of the project the sns will be enabled for.
	ProjectId pulumi.StringPtrInput
	// `region`). The region
	// in which sns will be enabled.
	Region pulumi.StringPtrInput
}

func (SNSArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snsArgs)(nil)).Elem()
}

type SNSInput interface {
	pulumi.Input

	ToSNSOutput() SNSOutput
	ToSNSOutputWithContext(ctx context.Context) SNSOutput
}

func (*SNS) ElementType() reflect.Type {
	return reflect.TypeOf((**SNS)(nil)).Elem()
}

func (i *SNS) ToSNSOutput() SNSOutput {
	return i.ToSNSOutputWithContext(context.Background())
}

func (i *SNS) ToSNSOutputWithContext(ctx context.Context) SNSOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SNSOutput)
}

// SNSArrayInput is an input type that accepts SNSArray and SNSArrayOutput values.
// You can construct a concrete instance of `SNSArrayInput` via:
//
//	SNSArray{ SNSArgs{...} }
type SNSArrayInput interface {
	pulumi.Input

	ToSNSArrayOutput() SNSArrayOutput
	ToSNSArrayOutputWithContext(context.Context) SNSArrayOutput
}

type SNSArray []SNSInput

func (SNSArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SNS)(nil)).Elem()
}

func (i SNSArray) ToSNSArrayOutput() SNSArrayOutput {
	return i.ToSNSArrayOutputWithContext(context.Background())
}

func (i SNSArray) ToSNSArrayOutputWithContext(ctx context.Context) SNSArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SNSArrayOutput)
}

// SNSMapInput is an input type that accepts SNSMap and SNSMapOutput values.
// You can construct a concrete instance of `SNSMapInput` via:
//
//	SNSMap{ "key": SNSArgs{...} }
type SNSMapInput interface {
	pulumi.Input

	ToSNSMapOutput() SNSMapOutput
	ToSNSMapOutputWithContext(context.Context) SNSMapOutput
}

type SNSMap map[string]SNSInput

func (SNSMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SNS)(nil)).Elem()
}

func (i SNSMap) ToSNSMapOutput() SNSMapOutput {
	return i.ToSNSMapOutputWithContext(context.Background())
}

func (i SNSMap) ToSNSMapOutputWithContext(ctx context.Context) SNSMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SNSMapOutput)
}

type SNSOutput struct{ *pulumi.OutputState }

func (SNSOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SNS)(nil)).Elem()
}

func (o SNSOutput) ToSNSOutput() SNSOutput {
	return o
}

func (o SNSOutput) ToSNSOutputWithContext(ctx context.Context) SNSOutput {
	return o
}

// The endpoint of the SNS service for this project.
func (o SNSOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *SNS) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// `projectId`) The ID of the project the sns will be enabled for.
func (o SNSOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SNS) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// `region`). The region
// in which sns will be enabled.
func (o SNSOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SNS) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type SNSArrayOutput struct{ *pulumi.OutputState }

func (SNSArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SNS)(nil)).Elem()
}

func (o SNSArrayOutput) ToSNSArrayOutput() SNSArrayOutput {
	return o
}

func (o SNSArrayOutput) ToSNSArrayOutputWithContext(ctx context.Context) SNSArrayOutput {
	return o
}

func (o SNSArrayOutput) Index(i pulumi.IntInput) SNSOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SNS {
		return vs[0].([]*SNS)[vs[1].(int)]
	}).(SNSOutput)
}

type SNSMapOutput struct{ *pulumi.OutputState }

func (SNSMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SNS)(nil)).Elem()
}

func (o SNSMapOutput) ToSNSMapOutput() SNSMapOutput {
	return o
}

func (o SNSMapOutput) ToSNSMapOutputWithContext(ctx context.Context) SNSMapOutput {
	return o
}

func (o SNSMapOutput) MapIndex(k pulumi.StringInput) SNSOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SNS {
		return vs[0].(map[string]*SNS)[vs[1].(string)]
	}).(SNSOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SNSInput)(nil)).Elem(), &SNS{})
	pulumi.RegisterInputType(reflect.TypeOf((*SNSArrayInput)(nil)).Elem(), SNSArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SNSMapInput)(nil)).Elem(), SNSMap{})
	pulumi.RegisterOutputType(SNSOutput{})
	pulumi.RegisterOutputType(SNSArrayOutput{})
	pulumi.RegisterOutputType(SNSMapOutput{})
}
