// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mnq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Messaging and queuing SNS Credentials.
// For further information please check
// our [documentation](https://www.scaleway.com/en/docs/serverless/messaging/reference-content/sns-overview/)
//
// ## Example Usage
//
// ### Basic
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/mnq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			mainSNS, err := mnq.NewSNS(ctx, "mainSNS", nil)
//			if err != nil {
//				return err
//			}
//			_, err = mnq.NewSNSCredentials(ctx, "mainSNSCredentials", &mnq.SNSCredentialsArgs{
//				ProjectId: mainSNS.ProjectId,
//				Permissions: &mnq.SNSCredentialsPermissionsArgs{
//					CanManage:  pulumi.Bool(false),
//					CanReceive: pulumi.Bool(true),
//					CanPublish: pulumi.Bool(false),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// SNS credentials can be imported using the `{region}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:mnq/sNSCredentials:SNSCredentials main fr-par/11111111111111111111111111111111
// ```
type SNSCredentials struct {
	pulumi.CustomResourceState

	// The ID of the key.
	AccessKey pulumi.StringOutput `pulumi:"accessKey"`
	// The unique name of the sns credentials.
	Name pulumi.StringOutput `pulumi:"name"`
	// . List of permissions associated to these credentials. Only one of permissions may be set.
	Permissions SNSCredentialsPermissionsOutput `pulumi:"permissions"`
	// `projectId`) The ID of the project the sns is enabled for.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// `region`). The region in which sns is enabled.
	Region pulumi.StringOutput `pulumi:"region"`
	// The secret value of the key.
	SecretKey pulumi.StringOutput `pulumi:"secretKey"`
}

// NewSNSCredentials registers a new resource with the given unique name, arguments, and options.
func NewSNSCredentials(ctx *pulumi.Context,
	name string, args *SNSCredentialsArgs, opts ...pulumi.ResourceOption) (*SNSCredentials, error) {
	if args == nil {
		args = &SNSCredentialsArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accessKey",
		"secretKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SNSCredentials
	err := ctx.RegisterResource("scaleway:mnq/sNSCredentials:SNSCredentials", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSNSCredentials gets an existing SNSCredentials resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSNSCredentials(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SNSCredentialsState, opts ...pulumi.ResourceOption) (*SNSCredentials, error) {
	var resource SNSCredentials
	err := ctx.ReadResource("scaleway:mnq/sNSCredentials:SNSCredentials", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SNSCredentials resources.
type snscredentialsState struct {
	// The ID of the key.
	AccessKey *string `pulumi:"accessKey"`
	// The unique name of the sns credentials.
	Name *string `pulumi:"name"`
	// . List of permissions associated to these credentials. Only one of permissions may be set.
	Permissions *SNSCredentialsPermissions `pulumi:"permissions"`
	// `projectId`) The ID of the project the sns is enabled for.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region in which sns is enabled.
	Region *string `pulumi:"region"`
	// The secret value of the key.
	SecretKey *string `pulumi:"secretKey"`
}

type SNSCredentialsState struct {
	// The ID of the key.
	AccessKey pulumi.StringPtrInput
	// The unique name of the sns credentials.
	Name pulumi.StringPtrInput
	// . List of permissions associated to these credentials. Only one of permissions may be set.
	Permissions SNSCredentialsPermissionsPtrInput
	// `projectId`) The ID of the project the sns is enabled for.
	ProjectId pulumi.StringPtrInput
	// `region`). The region in which sns is enabled.
	Region pulumi.StringPtrInput
	// The secret value of the key.
	SecretKey pulumi.StringPtrInput
}

func (SNSCredentialsState) ElementType() reflect.Type {
	return reflect.TypeOf((*snscredentialsState)(nil)).Elem()
}

type snscredentialsArgs struct {
	// The unique name of the sns credentials.
	Name *string `pulumi:"name"`
	// . List of permissions associated to these credentials. Only one of permissions may be set.
	Permissions *SNSCredentialsPermissions `pulumi:"permissions"`
	// `projectId`) The ID of the project the sns is enabled for.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region in which sns is enabled.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a SNSCredentials resource.
type SNSCredentialsArgs struct {
	// The unique name of the sns credentials.
	Name pulumi.StringPtrInput
	// . List of permissions associated to these credentials. Only one of permissions may be set.
	Permissions SNSCredentialsPermissionsPtrInput
	// `projectId`) The ID of the project the sns is enabled for.
	ProjectId pulumi.StringPtrInput
	// `region`). The region in which sns is enabled.
	Region pulumi.StringPtrInput
}

func (SNSCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snscredentialsArgs)(nil)).Elem()
}

type SNSCredentialsInput interface {
	pulumi.Input

	ToSNSCredentialsOutput() SNSCredentialsOutput
	ToSNSCredentialsOutputWithContext(ctx context.Context) SNSCredentialsOutput
}

func (*SNSCredentials) ElementType() reflect.Type {
	return reflect.TypeOf((**SNSCredentials)(nil)).Elem()
}

func (i *SNSCredentials) ToSNSCredentialsOutput() SNSCredentialsOutput {
	return i.ToSNSCredentialsOutputWithContext(context.Background())
}

func (i *SNSCredentials) ToSNSCredentialsOutputWithContext(ctx context.Context) SNSCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SNSCredentialsOutput)
}

// SNSCredentialsArrayInput is an input type that accepts SNSCredentialsArray and SNSCredentialsArrayOutput values.
// You can construct a concrete instance of `SNSCredentialsArrayInput` via:
//
//	SNSCredentialsArray{ SNSCredentialsArgs{...} }
type SNSCredentialsArrayInput interface {
	pulumi.Input

	ToSNSCredentialsArrayOutput() SNSCredentialsArrayOutput
	ToSNSCredentialsArrayOutputWithContext(context.Context) SNSCredentialsArrayOutput
}

type SNSCredentialsArray []SNSCredentialsInput

func (SNSCredentialsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SNSCredentials)(nil)).Elem()
}

func (i SNSCredentialsArray) ToSNSCredentialsArrayOutput() SNSCredentialsArrayOutput {
	return i.ToSNSCredentialsArrayOutputWithContext(context.Background())
}

func (i SNSCredentialsArray) ToSNSCredentialsArrayOutputWithContext(ctx context.Context) SNSCredentialsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SNSCredentialsArrayOutput)
}

// SNSCredentialsMapInput is an input type that accepts SNSCredentialsMap and SNSCredentialsMapOutput values.
// You can construct a concrete instance of `SNSCredentialsMapInput` via:
//
//	SNSCredentialsMap{ "key": SNSCredentialsArgs{...} }
type SNSCredentialsMapInput interface {
	pulumi.Input

	ToSNSCredentialsMapOutput() SNSCredentialsMapOutput
	ToSNSCredentialsMapOutputWithContext(context.Context) SNSCredentialsMapOutput
}

type SNSCredentialsMap map[string]SNSCredentialsInput

func (SNSCredentialsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SNSCredentials)(nil)).Elem()
}

func (i SNSCredentialsMap) ToSNSCredentialsMapOutput() SNSCredentialsMapOutput {
	return i.ToSNSCredentialsMapOutputWithContext(context.Background())
}

func (i SNSCredentialsMap) ToSNSCredentialsMapOutputWithContext(ctx context.Context) SNSCredentialsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SNSCredentialsMapOutput)
}

type SNSCredentialsOutput struct{ *pulumi.OutputState }

func (SNSCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SNSCredentials)(nil)).Elem()
}

func (o SNSCredentialsOutput) ToSNSCredentialsOutput() SNSCredentialsOutput {
	return o
}

func (o SNSCredentialsOutput) ToSNSCredentialsOutputWithContext(ctx context.Context) SNSCredentialsOutput {
	return o
}

// The ID of the key.
func (o SNSCredentialsOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SNSCredentials) pulumi.StringOutput { return v.AccessKey }).(pulumi.StringOutput)
}

// The unique name of the sns credentials.
func (o SNSCredentialsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SNSCredentials) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// . List of permissions associated to these credentials. Only one of permissions may be set.
func (o SNSCredentialsOutput) Permissions() SNSCredentialsPermissionsOutput {
	return o.ApplyT(func(v *SNSCredentials) SNSCredentialsPermissionsOutput { return v.Permissions }).(SNSCredentialsPermissionsOutput)
}

// `projectId`) The ID of the project the sns is enabled for.
func (o SNSCredentialsOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SNSCredentials) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// `region`). The region in which sns is enabled.
func (o SNSCredentialsOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SNSCredentials) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The secret value of the key.
func (o SNSCredentialsOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SNSCredentials) pulumi.StringOutput { return v.SecretKey }).(pulumi.StringOutput)
}

type SNSCredentialsArrayOutput struct{ *pulumi.OutputState }

func (SNSCredentialsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SNSCredentials)(nil)).Elem()
}

func (o SNSCredentialsArrayOutput) ToSNSCredentialsArrayOutput() SNSCredentialsArrayOutput {
	return o
}

func (o SNSCredentialsArrayOutput) ToSNSCredentialsArrayOutputWithContext(ctx context.Context) SNSCredentialsArrayOutput {
	return o
}

func (o SNSCredentialsArrayOutput) Index(i pulumi.IntInput) SNSCredentialsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SNSCredentials {
		return vs[0].([]*SNSCredentials)[vs[1].(int)]
	}).(SNSCredentialsOutput)
}

type SNSCredentialsMapOutput struct{ *pulumi.OutputState }

func (SNSCredentialsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SNSCredentials)(nil)).Elem()
}

func (o SNSCredentialsMapOutput) ToSNSCredentialsMapOutput() SNSCredentialsMapOutput {
	return o
}

func (o SNSCredentialsMapOutput) ToSNSCredentialsMapOutputWithContext(ctx context.Context) SNSCredentialsMapOutput {
	return o
}

func (o SNSCredentialsMapOutput) MapIndex(k pulumi.StringInput) SNSCredentialsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SNSCredentials {
		return vs[0].(map[string]*SNSCredentials)[vs[1].(string)]
	}).(SNSCredentialsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SNSCredentialsInput)(nil)).Elem(), &SNSCredentials{})
	pulumi.RegisterInputType(reflect.TypeOf((*SNSCredentialsArrayInput)(nil)).Elem(), SNSCredentialsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SNSCredentialsMapInput)(nil)).Elem(), SNSCredentialsMap{})
	pulumi.RegisterOutputType(SNSCredentialsOutput{})
	pulumi.RegisterOutputType(SNSCredentialsArrayOutput{})
	pulumi.RegisterOutputType(SNSCredentialsMapOutput{})
}
