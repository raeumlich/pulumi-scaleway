// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mnq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

// ## Example Usage
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/mnq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mnq.NewNATSAccount(ctx, "main", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Namespaces can be imported using the `{region}/{id}`, e.g. bash
//
// ```sh
//
//	$ pulumi import scaleway:mnq/nATSAccount:NATSAccount main fr-par/11111111111111111111111111111111
//
// ```
type NATSAccount struct {
	pulumi.CustomResourceState

	// The endpoint of the NATS service for this account.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// The unique name of the nats account.
	Name pulumi.StringOutput `pulumi:"name"`
	// `projectId`) The ID of the project the
	// account is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// `region`). The region
	// in which the account should be created.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewNATSAccount registers a new resource with the given unique name, arguments, and options.
func NewNATSAccount(ctx *pulumi.Context,
	name string, args *NATSAccountArgs, opts ...pulumi.ResourceOption) (*NATSAccount, error) {
	if args == nil {
		args = &NATSAccountArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NATSAccount
	err := ctx.RegisterResource("scaleway:mnq/nATSAccount:NATSAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNATSAccount gets an existing NATSAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNATSAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NATSAccountState, opts ...pulumi.ResourceOption) (*NATSAccount, error) {
	var resource NATSAccount
	err := ctx.ReadResource("scaleway:mnq/nATSAccount:NATSAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NATSAccount resources.
type natsaccountState struct {
	// The endpoint of the NATS service for this account.
	Endpoint *string `pulumi:"endpoint"`
	// The unique name of the nats account.
	Name *string `pulumi:"name"`
	// `projectId`) The ID of the project the
	// account is associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region
	// in which the account should be created.
	Region *string `pulumi:"region"`
}

type NATSAccountState struct {
	// The endpoint of the NATS service for this account.
	Endpoint pulumi.StringPtrInput
	// The unique name of the nats account.
	Name pulumi.StringPtrInput
	// `projectId`) The ID of the project the
	// account is associated with.
	ProjectId pulumi.StringPtrInput
	// `region`). The region
	// in which the account should be created.
	Region pulumi.StringPtrInput
}

func (NATSAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*natsaccountState)(nil)).Elem()
}

type natsaccountArgs struct {
	// The unique name of the nats account.
	Name *string `pulumi:"name"`
	// `projectId`) The ID of the project the
	// account is associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region
	// in which the account should be created.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a NATSAccount resource.
type NATSAccountArgs struct {
	// The unique name of the nats account.
	Name pulumi.StringPtrInput
	// `projectId`) The ID of the project the
	// account is associated with.
	ProjectId pulumi.StringPtrInput
	// `region`). The region
	// in which the account should be created.
	Region pulumi.StringPtrInput
}

func (NATSAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*natsaccountArgs)(nil)).Elem()
}

type NATSAccountInput interface {
	pulumi.Input

	ToNATSAccountOutput() NATSAccountOutput
	ToNATSAccountOutputWithContext(ctx context.Context) NATSAccountOutput
}

func (*NATSAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**NATSAccount)(nil)).Elem()
}

func (i *NATSAccount) ToNATSAccountOutput() NATSAccountOutput {
	return i.ToNATSAccountOutputWithContext(context.Background())
}

func (i *NATSAccount) ToNATSAccountOutputWithContext(ctx context.Context) NATSAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NATSAccountOutput)
}

// NATSAccountArrayInput is an input type that accepts NATSAccountArray and NATSAccountArrayOutput values.
// You can construct a concrete instance of `NATSAccountArrayInput` via:
//
//	NATSAccountArray{ NATSAccountArgs{...} }
type NATSAccountArrayInput interface {
	pulumi.Input

	ToNATSAccountArrayOutput() NATSAccountArrayOutput
	ToNATSAccountArrayOutputWithContext(context.Context) NATSAccountArrayOutput
}

type NATSAccountArray []NATSAccountInput

func (NATSAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NATSAccount)(nil)).Elem()
}

func (i NATSAccountArray) ToNATSAccountArrayOutput() NATSAccountArrayOutput {
	return i.ToNATSAccountArrayOutputWithContext(context.Background())
}

func (i NATSAccountArray) ToNATSAccountArrayOutputWithContext(ctx context.Context) NATSAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NATSAccountArrayOutput)
}

// NATSAccountMapInput is an input type that accepts NATSAccountMap and NATSAccountMapOutput values.
// You can construct a concrete instance of `NATSAccountMapInput` via:
//
//	NATSAccountMap{ "key": NATSAccountArgs{...} }
type NATSAccountMapInput interface {
	pulumi.Input

	ToNATSAccountMapOutput() NATSAccountMapOutput
	ToNATSAccountMapOutputWithContext(context.Context) NATSAccountMapOutput
}

type NATSAccountMap map[string]NATSAccountInput

func (NATSAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NATSAccount)(nil)).Elem()
}

func (i NATSAccountMap) ToNATSAccountMapOutput() NATSAccountMapOutput {
	return i.ToNATSAccountMapOutputWithContext(context.Background())
}

func (i NATSAccountMap) ToNATSAccountMapOutputWithContext(ctx context.Context) NATSAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NATSAccountMapOutput)
}

type NATSAccountOutput struct{ *pulumi.OutputState }

func (NATSAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NATSAccount)(nil)).Elem()
}

func (o NATSAccountOutput) ToNATSAccountOutput() NATSAccountOutput {
	return o
}

func (o NATSAccountOutput) ToNATSAccountOutputWithContext(ctx context.Context) NATSAccountOutput {
	return o
}

// The endpoint of the NATS service for this account.
func (o NATSAccountOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *NATSAccount) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// The unique name of the nats account.
func (o NATSAccountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NATSAccount) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// `projectId`) The ID of the project the
// account is associated with.
func (o NATSAccountOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *NATSAccount) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// `region`). The region
// in which the account should be created.
func (o NATSAccountOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *NATSAccount) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type NATSAccountArrayOutput struct{ *pulumi.OutputState }

func (NATSAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NATSAccount)(nil)).Elem()
}

func (o NATSAccountArrayOutput) ToNATSAccountArrayOutput() NATSAccountArrayOutput {
	return o
}

func (o NATSAccountArrayOutput) ToNATSAccountArrayOutputWithContext(ctx context.Context) NATSAccountArrayOutput {
	return o
}

func (o NATSAccountArrayOutput) Index(i pulumi.IntInput) NATSAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NATSAccount {
		return vs[0].([]*NATSAccount)[vs[1].(int)]
	}).(NATSAccountOutput)
}

type NATSAccountMapOutput struct{ *pulumi.OutputState }

func (NATSAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NATSAccount)(nil)).Elem()
}

func (o NATSAccountMapOutput) ToNATSAccountMapOutput() NATSAccountMapOutput {
	return o
}

func (o NATSAccountMapOutput) ToNATSAccountMapOutputWithContext(ctx context.Context) NATSAccountMapOutput {
	return o
}

func (o NATSAccountMapOutput) MapIndex(k pulumi.StringInput) NATSAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NATSAccount {
		return vs[0].(map[string]*NATSAccount)[vs[1].(string)]
	}).(NATSAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NATSAccountInput)(nil)).Elem(), &NATSAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*NATSAccountArrayInput)(nil)).Elem(), NATSAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NATSAccountMapInput)(nil)).Elem(), NATSAccountMap{})
	pulumi.RegisterOutputType(NATSAccountOutput{})
	pulumi.RegisterOutputType(NATSAccountArrayOutput{})
	pulumi.RegisterOutputType(NATSAccountMapOutput{})
}
