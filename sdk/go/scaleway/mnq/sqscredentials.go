// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mnq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Messaging and queuing SQS Credentials.
// For further information please check
// our [documentation](https://www.scaleway.com/en/docs/serverless/messaging/reference-content/sqs-overview/)
//
// ## Example Usage
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/mnq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			mainSQS, err := mnq.NewSQS(ctx, "mainSQS", nil)
//			if err != nil {
//				return err
//			}
//			_, err = mnq.NewSQSCredentials(ctx, "mainSQSCredentials", &mnq.SQSCredentialsArgs{
//				ProjectId: mainSQS.ProjectId,
//				Permissions: &mnq.SQSCredentialsPermissionsArgs{
//					CanManage:  pulumi.Bool(false),
//					CanReceive: pulumi.Bool(true),
//					CanPublish: pulumi.Bool(false),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SQS credentials can be imported using the `{region}/{id}`, e.g. bash
//
// ```sh
//
//	$ pulumi import scaleway:mnq/sQSCredentials:SQSCredentials main fr-par/11111111111111111111111111111111
//
// ```
type SQSCredentials struct {
	pulumi.CustomResourceState

	// The ID of the key.
	AccessKey pulumi.StringOutput `pulumi:"accessKey"`
	// The unique name of the sqs credentials.
	Name pulumi.StringOutput `pulumi:"name"`
	// . List of permissions associated to these credentials. Only one of permissions may be set.
	Permissions SQSCredentialsPermissionsOutput `pulumi:"permissions"`
	// `projectId`) The ID of the project the sqs is enabled for.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// `region`). The region in which sqs is enabled.
	Region pulumi.StringOutput `pulumi:"region"`
	// The secret value of the key.
	SecretKey pulumi.StringOutput `pulumi:"secretKey"`
}

// NewSQSCredentials registers a new resource with the given unique name, arguments, and options.
func NewSQSCredentials(ctx *pulumi.Context,
	name string, args *SQSCredentialsArgs, opts ...pulumi.ResourceOption) (*SQSCredentials, error) {
	if args == nil {
		args = &SQSCredentialsArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accessKey",
		"secretKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SQSCredentials
	err := ctx.RegisterResource("scaleway:mnq/sQSCredentials:SQSCredentials", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSQSCredentials gets an existing SQSCredentials resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSQSCredentials(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SQSCredentialsState, opts ...pulumi.ResourceOption) (*SQSCredentials, error) {
	var resource SQSCredentials
	err := ctx.ReadResource("scaleway:mnq/sQSCredentials:SQSCredentials", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SQSCredentials resources.
type sqscredentialsState struct {
	// The ID of the key.
	AccessKey *string `pulumi:"accessKey"`
	// The unique name of the sqs credentials.
	Name *string `pulumi:"name"`
	// . List of permissions associated to these credentials. Only one of permissions may be set.
	Permissions *SQSCredentialsPermissions `pulumi:"permissions"`
	// `projectId`) The ID of the project the sqs is enabled for.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region in which sqs is enabled.
	Region *string `pulumi:"region"`
	// The secret value of the key.
	SecretKey *string `pulumi:"secretKey"`
}

type SQSCredentialsState struct {
	// The ID of the key.
	AccessKey pulumi.StringPtrInput
	// The unique name of the sqs credentials.
	Name pulumi.StringPtrInput
	// . List of permissions associated to these credentials. Only one of permissions may be set.
	Permissions SQSCredentialsPermissionsPtrInput
	// `projectId`) The ID of the project the sqs is enabled for.
	ProjectId pulumi.StringPtrInput
	// `region`). The region in which sqs is enabled.
	Region pulumi.StringPtrInput
	// The secret value of the key.
	SecretKey pulumi.StringPtrInput
}

func (SQSCredentialsState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqscredentialsState)(nil)).Elem()
}

type sqscredentialsArgs struct {
	// The unique name of the sqs credentials.
	Name *string `pulumi:"name"`
	// . List of permissions associated to these credentials. Only one of permissions may be set.
	Permissions *SQSCredentialsPermissions `pulumi:"permissions"`
	// `projectId`) The ID of the project the sqs is enabled for.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region in which sqs is enabled.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a SQSCredentials resource.
type SQSCredentialsArgs struct {
	// The unique name of the sqs credentials.
	Name pulumi.StringPtrInput
	// . List of permissions associated to these credentials. Only one of permissions may be set.
	Permissions SQSCredentialsPermissionsPtrInput
	// `projectId`) The ID of the project the sqs is enabled for.
	ProjectId pulumi.StringPtrInput
	// `region`). The region in which sqs is enabled.
	Region pulumi.StringPtrInput
}

func (SQSCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqscredentialsArgs)(nil)).Elem()
}

type SQSCredentialsInput interface {
	pulumi.Input

	ToSQSCredentialsOutput() SQSCredentialsOutput
	ToSQSCredentialsOutputWithContext(ctx context.Context) SQSCredentialsOutput
}

func (*SQSCredentials) ElementType() reflect.Type {
	return reflect.TypeOf((**SQSCredentials)(nil)).Elem()
}

func (i *SQSCredentials) ToSQSCredentialsOutput() SQSCredentialsOutput {
	return i.ToSQSCredentialsOutputWithContext(context.Background())
}

func (i *SQSCredentials) ToSQSCredentialsOutputWithContext(ctx context.Context) SQSCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SQSCredentialsOutput)
}

// SQSCredentialsArrayInput is an input type that accepts SQSCredentialsArray and SQSCredentialsArrayOutput values.
// You can construct a concrete instance of `SQSCredentialsArrayInput` via:
//
//	SQSCredentialsArray{ SQSCredentialsArgs{...} }
type SQSCredentialsArrayInput interface {
	pulumi.Input

	ToSQSCredentialsArrayOutput() SQSCredentialsArrayOutput
	ToSQSCredentialsArrayOutputWithContext(context.Context) SQSCredentialsArrayOutput
}

type SQSCredentialsArray []SQSCredentialsInput

func (SQSCredentialsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SQSCredentials)(nil)).Elem()
}

func (i SQSCredentialsArray) ToSQSCredentialsArrayOutput() SQSCredentialsArrayOutput {
	return i.ToSQSCredentialsArrayOutputWithContext(context.Background())
}

func (i SQSCredentialsArray) ToSQSCredentialsArrayOutputWithContext(ctx context.Context) SQSCredentialsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SQSCredentialsArrayOutput)
}

// SQSCredentialsMapInput is an input type that accepts SQSCredentialsMap and SQSCredentialsMapOutput values.
// You can construct a concrete instance of `SQSCredentialsMapInput` via:
//
//	SQSCredentialsMap{ "key": SQSCredentialsArgs{...} }
type SQSCredentialsMapInput interface {
	pulumi.Input

	ToSQSCredentialsMapOutput() SQSCredentialsMapOutput
	ToSQSCredentialsMapOutputWithContext(context.Context) SQSCredentialsMapOutput
}

type SQSCredentialsMap map[string]SQSCredentialsInput

func (SQSCredentialsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SQSCredentials)(nil)).Elem()
}

func (i SQSCredentialsMap) ToSQSCredentialsMapOutput() SQSCredentialsMapOutput {
	return i.ToSQSCredentialsMapOutputWithContext(context.Background())
}

func (i SQSCredentialsMap) ToSQSCredentialsMapOutputWithContext(ctx context.Context) SQSCredentialsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SQSCredentialsMapOutput)
}

type SQSCredentialsOutput struct{ *pulumi.OutputState }

func (SQSCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SQSCredentials)(nil)).Elem()
}

func (o SQSCredentialsOutput) ToSQSCredentialsOutput() SQSCredentialsOutput {
	return o
}

func (o SQSCredentialsOutput) ToSQSCredentialsOutputWithContext(ctx context.Context) SQSCredentialsOutput {
	return o
}

// The ID of the key.
func (o SQSCredentialsOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SQSCredentials) pulumi.StringOutput { return v.AccessKey }).(pulumi.StringOutput)
}

// The unique name of the sqs credentials.
func (o SQSCredentialsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SQSCredentials) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// . List of permissions associated to these credentials. Only one of permissions may be set.
func (o SQSCredentialsOutput) Permissions() SQSCredentialsPermissionsOutput {
	return o.ApplyT(func(v *SQSCredentials) SQSCredentialsPermissionsOutput { return v.Permissions }).(SQSCredentialsPermissionsOutput)
}

// `projectId`) The ID of the project the sqs is enabled for.
func (o SQSCredentialsOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SQSCredentials) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// `region`). The region in which sqs is enabled.
func (o SQSCredentialsOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SQSCredentials) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The secret value of the key.
func (o SQSCredentialsOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SQSCredentials) pulumi.StringOutput { return v.SecretKey }).(pulumi.StringOutput)
}

type SQSCredentialsArrayOutput struct{ *pulumi.OutputState }

func (SQSCredentialsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SQSCredentials)(nil)).Elem()
}

func (o SQSCredentialsArrayOutput) ToSQSCredentialsArrayOutput() SQSCredentialsArrayOutput {
	return o
}

func (o SQSCredentialsArrayOutput) ToSQSCredentialsArrayOutputWithContext(ctx context.Context) SQSCredentialsArrayOutput {
	return o
}

func (o SQSCredentialsArrayOutput) Index(i pulumi.IntInput) SQSCredentialsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SQSCredentials {
		return vs[0].([]*SQSCredentials)[vs[1].(int)]
	}).(SQSCredentialsOutput)
}

type SQSCredentialsMapOutput struct{ *pulumi.OutputState }

func (SQSCredentialsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SQSCredentials)(nil)).Elem()
}

func (o SQSCredentialsMapOutput) ToSQSCredentialsMapOutput() SQSCredentialsMapOutput {
	return o
}

func (o SQSCredentialsMapOutput) ToSQSCredentialsMapOutputWithContext(ctx context.Context) SQSCredentialsMapOutput {
	return o
}

func (o SQSCredentialsMapOutput) MapIndex(k pulumi.StringInput) SQSCredentialsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SQSCredentials {
		return vs[0].(map[string]*SQSCredentials)[vs[1].(string)]
	}).(SQSCredentialsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SQSCredentialsInput)(nil)).Elem(), &SQSCredentials{})
	pulumi.RegisterInputType(reflect.TypeOf((*SQSCredentialsArrayInput)(nil)).Elem(), SQSCredentialsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SQSCredentialsMapInput)(nil)).Elem(), SQSCredentialsMap{})
	pulumi.RegisterOutputType(SQSCredentialsOutput{})
	pulumi.RegisterOutputType(SQSCredentialsArrayOutput{})
	pulumi.RegisterOutputType(SQSCredentialsMapOutput{})
}
