// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package serverless

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Serverless SQL Databases. For more information, see [the documentation](https://www.scaleway.com/en/developers/api/serverless-databases/).
//
// ## Example Usage
//
// ### Basic
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/serverless"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := serverless.NewSDBDatabase(ctx, "database", &serverless.SDBDatabaseArgs{
//				MaxCpu: pulumi.Int(8),
//				MinCpu: pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Serverless SQL Database can be imported using the `{region}/{id}`, e.g.
//
// bash
//
// ```sh
// $ pulumi import scaleway:serverless/sDBDatabase:SDBDatabase database fr-par/11111111-1111-1111-1111-111111111111
// ```
type SDBDatabase struct {
	pulumi.CustomResourceState

	// Endpoint of the database
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// The maximum number of CPU units for your database. Defaults to 15.
	MaxCpu pulumi.IntPtrOutput `pulumi:"maxCpu"`
	// The minimum number of CPU units for your database. Defaults to 0.
	MinCpu pulumi.IntPtrOutput `pulumi:"minCpu"`
	// Name of the database (e.g. `my-new-database`).
	//
	// > **Important:** Updates to `name` will recreate the database.
	Name pulumi.StringOutput `pulumi:"name"`
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// `region`) The region in which the resource exists.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewSDBDatabase registers a new resource with the given unique name, arguments, and options.
func NewSDBDatabase(ctx *pulumi.Context,
	name string, args *SDBDatabaseArgs, opts ...pulumi.ResourceOption) (*SDBDatabase, error) {
	if args == nil {
		args = &SDBDatabaseArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SDBDatabase
	err := ctx.RegisterResource("scaleway:serverless/sDBDatabase:SDBDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSDBDatabase gets an existing SDBDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSDBDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SDBDatabaseState, opts ...pulumi.ResourceOption) (*SDBDatabase, error) {
	var resource SDBDatabase
	err := ctx.ReadResource("scaleway:serverless/sDBDatabase:SDBDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SDBDatabase resources.
type sdbdatabaseState struct {
	// Endpoint of the database
	Endpoint *string `pulumi:"endpoint"`
	// The maximum number of CPU units for your database. Defaults to 15.
	MaxCpu *int `pulumi:"maxCpu"`
	// The minimum number of CPU units for your database. Defaults to 0.
	MinCpu *int `pulumi:"minCpu"`
	// Name of the database (e.g. `my-new-database`).
	//
	// > **Important:** Updates to `name` will recreate the database.
	Name *string `pulumi:"name"`
	// The project_id you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region in which the resource exists.
	Region *string `pulumi:"region"`
}

type SDBDatabaseState struct {
	// Endpoint of the database
	Endpoint pulumi.StringPtrInput
	// The maximum number of CPU units for your database. Defaults to 15.
	MaxCpu pulumi.IntPtrInput
	// The minimum number of CPU units for your database. Defaults to 0.
	MinCpu pulumi.IntPtrInput
	// Name of the database (e.g. `my-new-database`).
	//
	// > **Important:** Updates to `name` will recreate the database.
	Name pulumi.StringPtrInput
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// `region`) The region in which the resource exists.
	Region pulumi.StringPtrInput
}

func (SDBDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*sdbdatabaseState)(nil)).Elem()
}

type sdbdatabaseArgs struct {
	// The maximum number of CPU units for your database. Defaults to 15.
	MaxCpu *int `pulumi:"maxCpu"`
	// The minimum number of CPU units for your database. Defaults to 0.
	MinCpu *int `pulumi:"minCpu"`
	// Name of the database (e.g. `my-new-database`).
	//
	// > **Important:** Updates to `name` will recreate the database.
	Name *string `pulumi:"name"`
	// The project_id you want to attach the resource to
	ProjectId *string `pulumi:"projectId"`
	// `region`) The region in which the resource exists.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a SDBDatabase resource.
type SDBDatabaseArgs struct {
	// The maximum number of CPU units for your database. Defaults to 15.
	MaxCpu pulumi.IntPtrInput
	// The minimum number of CPU units for your database. Defaults to 0.
	MinCpu pulumi.IntPtrInput
	// Name of the database (e.g. `my-new-database`).
	//
	// > **Important:** Updates to `name` will recreate the database.
	Name pulumi.StringPtrInput
	// The project_id you want to attach the resource to
	ProjectId pulumi.StringPtrInput
	// `region`) The region in which the resource exists.
	Region pulumi.StringPtrInput
}

func (SDBDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sdbdatabaseArgs)(nil)).Elem()
}

type SDBDatabaseInput interface {
	pulumi.Input

	ToSDBDatabaseOutput() SDBDatabaseOutput
	ToSDBDatabaseOutputWithContext(ctx context.Context) SDBDatabaseOutput
}

func (*SDBDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**SDBDatabase)(nil)).Elem()
}

func (i *SDBDatabase) ToSDBDatabaseOutput() SDBDatabaseOutput {
	return i.ToSDBDatabaseOutputWithContext(context.Background())
}

func (i *SDBDatabase) ToSDBDatabaseOutputWithContext(ctx context.Context) SDBDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SDBDatabaseOutput)
}

// SDBDatabaseArrayInput is an input type that accepts SDBDatabaseArray and SDBDatabaseArrayOutput values.
// You can construct a concrete instance of `SDBDatabaseArrayInput` via:
//
//	SDBDatabaseArray{ SDBDatabaseArgs{...} }
type SDBDatabaseArrayInput interface {
	pulumi.Input

	ToSDBDatabaseArrayOutput() SDBDatabaseArrayOutput
	ToSDBDatabaseArrayOutputWithContext(context.Context) SDBDatabaseArrayOutput
}

type SDBDatabaseArray []SDBDatabaseInput

func (SDBDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SDBDatabase)(nil)).Elem()
}

func (i SDBDatabaseArray) ToSDBDatabaseArrayOutput() SDBDatabaseArrayOutput {
	return i.ToSDBDatabaseArrayOutputWithContext(context.Background())
}

func (i SDBDatabaseArray) ToSDBDatabaseArrayOutputWithContext(ctx context.Context) SDBDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SDBDatabaseArrayOutput)
}

// SDBDatabaseMapInput is an input type that accepts SDBDatabaseMap and SDBDatabaseMapOutput values.
// You can construct a concrete instance of `SDBDatabaseMapInput` via:
//
//	SDBDatabaseMap{ "key": SDBDatabaseArgs{...} }
type SDBDatabaseMapInput interface {
	pulumi.Input

	ToSDBDatabaseMapOutput() SDBDatabaseMapOutput
	ToSDBDatabaseMapOutputWithContext(context.Context) SDBDatabaseMapOutput
}

type SDBDatabaseMap map[string]SDBDatabaseInput

func (SDBDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SDBDatabase)(nil)).Elem()
}

func (i SDBDatabaseMap) ToSDBDatabaseMapOutput() SDBDatabaseMapOutput {
	return i.ToSDBDatabaseMapOutputWithContext(context.Background())
}

func (i SDBDatabaseMap) ToSDBDatabaseMapOutputWithContext(ctx context.Context) SDBDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SDBDatabaseMapOutput)
}

type SDBDatabaseOutput struct{ *pulumi.OutputState }

func (SDBDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SDBDatabase)(nil)).Elem()
}

func (o SDBDatabaseOutput) ToSDBDatabaseOutput() SDBDatabaseOutput {
	return o
}

func (o SDBDatabaseOutput) ToSDBDatabaseOutputWithContext(ctx context.Context) SDBDatabaseOutput {
	return o
}

// Endpoint of the database
func (o SDBDatabaseOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *SDBDatabase) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// The maximum number of CPU units for your database. Defaults to 15.
func (o SDBDatabaseOutput) MaxCpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SDBDatabase) pulumi.IntPtrOutput { return v.MaxCpu }).(pulumi.IntPtrOutput)
}

// The minimum number of CPU units for your database. Defaults to 0.
func (o SDBDatabaseOutput) MinCpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SDBDatabase) pulumi.IntPtrOutput { return v.MinCpu }).(pulumi.IntPtrOutput)
}

// Name of the database (e.g. `my-new-database`).
//
// > **Important:** Updates to `name` will recreate the database.
func (o SDBDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SDBDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The project_id you want to attach the resource to
func (o SDBDatabaseOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SDBDatabase) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// `region`) The region in which the resource exists.
func (o SDBDatabaseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SDBDatabase) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type SDBDatabaseArrayOutput struct{ *pulumi.OutputState }

func (SDBDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SDBDatabase)(nil)).Elem()
}

func (o SDBDatabaseArrayOutput) ToSDBDatabaseArrayOutput() SDBDatabaseArrayOutput {
	return o
}

func (o SDBDatabaseArrayOutput) ToSDBDatabaseArrayOutputWithContext(ctx context.Context) SDBDatabaseArrayOutput {
	return o
}

func (o SDBDatabaseArrayOutput) Index(i pulumi.IntInput) SDBDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SDBDatabase {
		return vs[0].([]*SDBDatabase)[vs[1].(int)]
	}).(SDBDatabaseOutput)
}

type SDBDatabaseMapOutput struct{ *pulumi.OutputState }

func (SDBDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SDBDatabase)(nil)).Elem()
}

func (o SDBDatabaseMapOutput) ToSDBDatabaseMapOutput() SDBDatabaseMapOutput {
	return o
}

func (o SDBDatabaseMapOutput) ToSDBDatabaseMapOutputWithContext(ctx context.Context) SDBDatabaseMapOutput {
	return o
}

func (o SDBDatabaseMapOutput) MapIndex(k pulumi.StringInput) SDBDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SDBDatabase {
		return vs[0].(map[string]*SDBDatabase)[vs[1].(string)]
	}).(SDBDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SDBDatabaseInput)(nil)).Elem(), &SDBDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*SDBDatabaseArrayInput)(nil)).Elem(), SDBDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SDBDatabaseMapInput)(nil)).Elem(), SDBDatabaseMap{})
	pulumi.RegisterOutputType(SDBDatabaseOutput{})
	pulumi.RegisterOutputType(SDBDatabaseArrayOutput{})
	pulumi.RegisterOutputType(SDBDatabaseMapOutput{})
}
