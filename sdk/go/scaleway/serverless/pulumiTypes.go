// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package serverless

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

var _ = internal.GetEnvOrDefault

type ContainerTriggerNats struct {
	// ID of the mnq nats account.
	AccountId *string `pulumi:"accountId"`
	// ID of the project that contain the mnq nats account, defaults to provider's project
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region in which the namespace should be created.
	Region *string `pulumi:"region"`
	// The subject to listen to
	Subject string `pulumi:"subject"`
}

// ContainerTriggerNatsInput is an input type that accepts ContainerTriggerNatsArgs and ContainerTriggerNatsOutput values.
// You can construct a concrete instance of `ContainerTriggerNatsInput` via:
//
//	ContainerTriggerNatsArgs{...}
type ContainerTriggerNatsInput interface {
	pulumi.Input

	ToContainerTriggerNatsOutput() ContainerTriggerNatsOutput
	ToContainerTriggerNatsOutputWithContext(context.Context) ContainerTriggerNatsOutput
}

type ContainerTriggerNatsArgs struct {
	// ID of the mnq nats account.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// ID of the project that contain the mnq nats account, defaults to provider's project
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// `region`). The region in which the namespace should be created.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The subject to listen to
	Subject pulumi.StringInput `pulumi:"subject"`
}

func (ContainerTriggerNatsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerTriggerNats)(nil)).Elem()
}

func (i ContainerTriggerNatsArgs) ToContainerTriggerNatsOutput() ContainerTriggerNatsOutput {
	return i.ToContainerTriggerNatsOutputWithContext(context.Background())
}

func (i ContainerTriggerNatsArgs) ToContainerTriggerNatsOutputWithContext(ctx context.Context) ContainerTriggerNatsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerTriggerNatsOutput)
}

func (i ContainerTriggerNatsArgs) ToContainerTriggerNatsPtrOutput() ContainerTriggerNatsPtrOutput {
	return i.ToContainerTriggerNatsPtrOutputWithContext(context.Background())
}

func (i ContainerTriggerNatsArgs) ToContainerTriggerNatsPtrOutputWithContext(ctx context.Context) ContainerTriggerNatsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerTriggerNatsOutput).ToContainerTriggerNatsPtrOutputWithContext(ctx)
}

// ContainerTriggerNatsPtrInput is an input type that accepts ContainerTriggerNatsArgs, ContainerTriggerNatsPtr and ContainerTriggerNatsPtrOutput values.
// You can construct a concrete instance of `ContainerTriggerNatsPtrInput` via:
//
//	        ContainerTriggerNatsArgs{...}
//
//	or:
//
//	        nil
type ContainerTriggerNatsPtrInput interface {
	pulumi.Input

	ToContainerTriggerNatsPtrOutput() ContainerTriggerNatsPtrOutput
	ToContainerTriggerNatsPtrOutputWithContext(context.Context) ContainerTriggerNatsPtrOutput
}

type containerTriggerNatsPtrType ContainerTriggerNatsArgs

func ContainerTriggerNatsPtr(v *ContainerTriggerNatsArgs) ContainerTriggerNatsPtrInput {
	return (*containerTriggerNatsPtrType)(v)
}

func (*containerTriggerNatsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerTriggerNats)(nil)).Elem()
}

func (i *containerTriggerNatsPtrType) ToContainerTriggerNatsPtrOutput() ContainerTriggerNatsPtrOutput {
	return i.ToContainerTriggerNatsPtrOutputWithContext(context.Background())
}

func (i *containerTriggerNatsPtrType) ToContainerTriggerNatsPtrOutputWithContext(ctx context.Context) ContainerTriggerNatsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerTriggerNatsPtrOutput)
}

type ContainerTriggerNatsOutput struct{ *pulumi.OutputState }

func (ContainerTriggerNatsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerTriggerNats)(nil)).Elem()
}

func (o ContainerTriggerNatsOutput) ToContainerTriggerNatsOutput() ContainerTriggerNatsOutput {
	return o
}

func (o ContainerTriggerNatsOutput) ToContainerTriggerNatsOutputWithContext(ctx context.Context) ContainerTriggerNatsOutput {
	return o
}

func (o ContainerTriggerNatsOutput) ToContainerTriggerNatsPtrOutput() ContainerTriggerNatsPtrOutput {
	return o.ToContainerTriggerNatsPtrOutputWithContext(context.Background())
}

func (o ContainerTriggerNatsOutput) ToContainerTriggerNatsPtrOutputWithContext(ctx context.Context) ContainerTriggerNatsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerTriggerNats) *ContainerTriggerNats {
		return &v
	}).(ContainerTriggerNatsPtrOutput)
}

// ID of the mnq nats account.
func (o ContainerTriggerNatsOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerTriggerNats) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

// ID of the project that contain the mnq nats account, defaults to provider's project
func (o ContainerTriggerNatsOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerTriggerNats) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// `region`). The region in which the namespace should be created.
func (o ContainerTriggerNatsOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerTriggerNats) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The subject to listen to
func (o ContainerTriggerNatsOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerTriggerNats) string { return v.Subject }).(pulumi.StringOutput)
}

type ContainerTriggerNatsPtrOutput struct{ *pulumi.OutputState }

func (ContainerTriggerNatsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerTriggerNats)(nil)).Elem()
}

func (o ContainerTriggerNatsPtrOutput) ToContainerTriggerNatsPtrOutput() ContainerTriggerNatsPtrOutput {
	return o
}

func (o ContainerTriggerNatsPtrOutput) ToContainerTriggerNatsPtrOutputWithContext(ctx context.Context) ContainerTriggerNatsPtrOutput {
	return o
}

func (o ContainerTriggerNatsPtrOutput) Elem() ContainerTriggerNatsOutput {
	return o.ApplyT(func(v *ContainerTriggerNats) ContainerTriggerNats {
		if v != nil {
			return *v
		}
		var ret ContainerTriggerNats
		return ret
	}).(ContainerTriggerNatsOutput)
}

// ID of the mnq nats account.
func (o ContainerTriggerNatsPtrOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerTriggerNats) *string {
		if v == nil {
			return nil
		}
		return v.AccountId
	}).(pulumi.StringPtrOutput)
}

// ID of the project that contain the mnq nats account, defaults to provider's project
func (o ContainerTriggerNatsPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerTriggerNats) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// `region`). The region in which the namespace should be created.
func (o ContainerTriggerNatsPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerTriggerNats) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// The subject to listen to
func (o ContainerTriggerNatsPtrOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerTriggerNats) *string {
		if v == nil {
			return nil
		}
		return &v.Subject
	}).(pulumi.StringPtrOutput)
}

type ContainerTriggerSqs struct {
	// ID of the mnq namespace. Deprecated.
	NamespaceId *string `pulumi:"namespaceId"`
	// ID of the project that contain the mnq nats account, defaults to provider's project
	ProjectId *string `pulumi:"projectId"`
	// Name of the queue
	Queue string `pulumi:"queue"`
	// `region`). The region in which the namespace should be created.
	Region *string `pulumi:"region"`
}

// ContainerTriggerSqsInput is an input type that accepts ContainerTriggerSqsArgs and ContainerTriggerSqsOutput values.
// You can construct a concrete instance of `ContainerTriggerSqsInput` via:
//
//	ContainerTriggerSqsArgs{...}
type ContainerTriggerSqsInput interface {
	pulumi.Input

	ToContainerTriggerSqsOutput() ContainerTriggerSqsOutput
	ToContainerTriggerSqsOutputWithContext(context.Context) ContainerTriggerSqsOutput
}

type ContainerTriggerSqsArgs struct {
	// ID of the mnq namespace. Deprecated.
	NamespaceId pulumi.StringPtrInput `pulumi:"namespaceId"`
	// ID of the project that contain the mnq nats account, defaults to provider's project
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Name of the queue
	Queue pulumi.StringInput `pulumi:"queue"`
	// `region`). The region in which the namespace should be created.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (ContainerTriggerSqsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerTriggerSqs)(nil)).Elem()
}

func (i ContainerTriggerSqsArgs) ToContainerTriggerSqsOutput() ContainerTriggerSqsOutput {
	return i.ToContainerTriggerSqsOutputWithContext(context.Background())
}

func (i ContainerTriggerSqsArgs) ToContainerTriggerSqsOutputWithContext(ctx context.Context) ContainerTriggerSqsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerTriggerSqsOutput)
}

func (i ContainerTriggerSqsArgs) ToContainerTriggerSqsPtrOutput() ContainerTriggerSqsPtrOutput {
	return i.ToContainerTriggerSqsPtrOutputWithContext(context.Background())
}

func (i ContainerTriggerSqsArgs) ToContainerTriggerSqsPtrOutputWithContext(ctx context.Context) ContainerTriggerSqsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerTriggerSqsOutput).ToContainerTriggerSqsPtrOutputWithContext(ctx)
}

// ContainerTriggerSqsPtrInput is an input type that accepts ContainerTriggerSqsArgs, ContainerTriggerSqsPtr and ContainerTriggerSqsPtrOutput values.
// You can construct a concrete instance of `ContainerTriggerSqsPtrInput` via:
//
//	        ContainerTriggerSqsArgs{...}
//
//	or:
//
//	        nil
type ContainerTriggerSqsPtrInput interface {
	pulumi.Input

	ToContainerTriggerSqsPtrOutput() ContainerTriggerSqsPtrOutput
	ToContainerTriggerSqsPtrOutputWithContext(context.Context) ContainerTriggerSqsPtrOutput
}

type containerTriggerSqsPtrType ContainerTriggerSqsArgs

func ContainerTriggerSqsPtr(v *ContainerTriggerSqsArgs) ContainerTriggerSqsPtrInput {
	return (*containerTriggerSqsPtrType)(v)
}

func (*containerTriggerSqsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerTriggerSqs)(nil)).Elem()
}

func (i *containerTriggerSqsPtrType) ToContainerTriggerSqsPtrOutput() ContainerTriggerSqsPtrOutput {
	return i.ToContainerTriggerSqsPtrOutputWithContext(context.Background())
}

func (i *containerTriggerSqsPtrType) ToContainerTriggerSqsPtrOutputWithContext(ctx context.Context) ContainerTriggerSqsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerTriggerSqsPtrOutput)
}

type ContainerTriggerSqsOutput struct{ *pulumi.OutputState }

func (ContainerTriggerSqsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerTriggerSqs)(nil)).Elem()
}

func (o ContainerTriggerSqsOutput) ToContainerTriggerSqsOutput() ContainerTriggerSqsOutput {
	return o
}

func (o ContainerTriggerSqsOutput) ToContainerTriggerSqsOutputWithContext(ctx context.Context) ContainerTriggerSqsOutput {
	return o
}

func (o ContainerTriggerSqsOutput) ToContainerTriggerSqsPtrOutput() ContainerTriggerSqsPtrOutput {
	return o.ToContainerTriggerSqsPtrOutputWithContext(context.Background())
}

func (o ContainerTriggerSqsOutput) ToContainerTriggerSqsPtrOutputWithContext(ctx context.Context) ContainerTriggerSqsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerTriggerSqs) *ContainerTriggerSqs {
		return &v
	}).(ContainerTriggerSqsPtrOutput)
}

// ID of the mnq namespace. Deprecated.
func (o ContainerTriggerSqsOutput) NamespaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerTriggerSqs) *string { return v.NamespaceId }).(pulumi.StringPtrOutput)
}

// ID of the project that contain the mnq nats account, defaults to provider's project
func (o ContainerTriggerSqsOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerTriggerSqs) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Name of the queue
func (o ContainerTriggerSqsOutput) Queue() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerTriggerSqs) string { return v.Queue }).(pulumi.StringOutput)
}

// `region`). The region in which the namespace should be created.
func (o ContainerTriggerSqsOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerTriggerSqs) *string { return v.Region }).(pulumi.StringPtrOutput)
}

type ContainerTriggerSqsPtrOutput struct{ *pulumi.OutputState }

func (ContainerTriggerSqsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerTriggerSqs)(nil)).Elem()
}

func (o ContainerTriggerSqsPtrOutput) ToContainerTriggerSqsPtrOutput() ContainerTriggerSqsPtrOutput {
	return o
}

func (o ContainerTriggerSqsPtrOutput) ToContainerTriggerSqsPtrOutputWithContext(ctx context.Context) ContainerTriggerSqsPtrOutput {
	return o
}

func (o ContainerTriggerSqsPtrOutput) Elem() ContainerTriggerSqsOutput {
	return o.ApplyT(func(v *ContainerTriggerSqs) ContainerTriggerSqs {
		if v != nil {
			return *v
		}
		var ret ContainerTriggerSqs
		return ret
	}).(ContainerTriggerSqsOutput)
}

// ID of the mnq namespace. Deprecated.
func (o ContainerTriggerSqsPtrOutput) NamespaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerTriggerSqs) *string {
		if v == nil {
			return nil
		}
		return v.NamespaceId
	}).(pulumi.StringPtrOutput)
}

// ID of the project that contain the mnq nats account, defaults to provider's project
func (o ContainerTriggerSqsPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerTriggerSqs) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// Name of the queue
func (o ContainerTriggerSqsPtrOutput) Queue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerTriggerSqs) *string {
		if v == nil {
			return nil
		}
		return &v.Queue
	}).(pulumi.StringPtrOutput)
}

// `region`). The region in which the namespace should be created.
func (o ContainerTriggerSqsPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerTriggerSqs) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

type FunctionTriggerNats struct {
	// ID of the mnq nats account.
	AccountId *string `pulumi:"accountId"`
	// ID of the project that contain the mnq nats account, defaults to provider's project
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region in which the namespace should be created.
	Region *string `pulumi:"region"`
	// The subject to listen to
	Subject string `pulumi:"subject"`
}

// FunctionTriggerNatsInput is an input type that accepts FunctionTriggerNatsArgs and FunctionTriggerNatsOutput values.
// You can construct a concrete instance of `FunctionTriggerNatsInput` via:
//
//	FunctionTriggerNatsArgs{...}
type FunctionTriggerNatsInput interface {
	pulumi.Input

	ToFunctionTriggerNatsOutput() FunctionTriggerNatsOutput
	ToFunctionTriggerNatsOutputWithContext(context.Context) FunctionTriggerNatsOutput
}

type FunctionTriggerNatsArgs struct {
	// ID of the mnq nats account.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// ID of the project that contain the mnq nats account, defaults to provider's project
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// `region`). The region in which the namespace should be created.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The subject to listen to
	Subject pulumi.StringInput `pulumi:"subject"`
}

func (FunctionTriggerNatsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionTriggerNats)(nil)).Elem()
}

func (i FunctionTriggerNatsArgs) ToFunctionTriggerNatsOutput() FunctionTriggerNatsOutput {
	return i.ToFunctionTriggerNatsOutputWithContext(context.Background())
}

func (i FunctionTriggerNatsArgs) ToFunctionTriggerNatsOutputWithContext(ctx context.Context) FunctionTriggerNatsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTriggerNatsOutput)
}

func (i FunctionTriggerNatsArgs) ToFunctionTriggerNatsPtrOutput() FunctionTriggerNatsPtrOutput {
	return i.ToFunctionTriggerNatsPtrOutputWithContext(context.Background())
}

func (i FunctionTriggerNatsArgs) ToFunctionTriggerNatsPtrOutputWithContext(ctx context.Context) FunctionTriggerNatsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTriggerNatsOutput).ToFunctionTriggerNatsPtrOutputWithContext(ctx)
}

// FunctionTriggerNatsPtrInput is an input type that accepts FunctionTriggerNatsArgs, FunctionTriggerNatsPtr and FunctionTriggerNatsPtrOutput values.
// You can construct a concrete instance of `FunctionTriggerNatsPtrInput` via:
//
//	        FunctionTriggerNatsArgs{...}
//
//	or:
//
//	        nil
type FunctionTriggerNatsPtrInput interface {
	pulumi.Input

	ToFunctionTriggerNatsPtrOutput() FunctionTriggerNatsPtrOutput
	ToFunctionTriggerNatsPtrOutputWithContext(context.Context) FunctionTriggerNatsPtrOutput
}

type functionTriggerNatsPtrType FunctionTriggerNatsArgs

func FunctionTriggerNatsPtr(v *FunctionTriggerNatsArgs) FunctionTriggerNatsPtrInput {
	return (*functionTriggerNatsPtrType)(v)
}

func (*functionTriggerNatsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionTriggerNats)(nil)).Elem()
}

func (i *functionTriggerNatsPtrType) ToFunctionTriggerNatsPtrOutput() FunctionTriggerNatsPtrOutput {
	return i.ToFunctionTriggerNatsPtrOutputWithContext(context.Background())
}

func (i *functionTriggerNatsPtrType) ToFunctionTriggerNatsPtrOutputWithContext(ctx context.Context) FunctionTriggerNatsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTriggerNatsPtrOutput)
}

type FunctionTriggerNatsOutput struct{ *pulumi.OutputState }

func (FunctionTriggerNatsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionTriggerNats)(nil)).Elem()
}

func (o FunctionTriggerNatsOutput) ToFunctionTriggerNatsOutput() FunctionTriggerNatsOutput {
	return o
}

func (o FunctionTriggerNatsOutput) ToFunctionTriggerNatsOutputWithContext(ctx context.Context) FunctionTriggerNatsOutput {
	return o
}

func (o FunctionTriggerNatsOutput) ToFunctionTriggerNatsPtrOutput() FunctionTriggerNatsPtrOutput {
	return o.ToFunctionTriggerNatsPtrOutputWithContext(context.Background())
}

func (o FunctionTriggerNatsOutput) ToFunctionTriggerNatsPtrOutputWithContext(ctx context.Context) FunctionTriggerNatsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionTriggerNats) *FunctionTriggerNats {
		return &v
	}).(FunctionTriggerNatsPtrOutput)
}

// ID of the mnq nats account.
func (o FunctionTriggerNatsOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionTriggerNats) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

// ID of the project that contain the mnq nats account, defaults to provider's project
func (o FunctionTriggerNatsOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionTriggerNats) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// `region`). The region in which the namespace should be created.
func (o FunctionTriggerNatsOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionTriggerNats) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The subject to listen to
func (o FunctionTriggerNatsOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionTriggerNats) string { return v.Subject }).(pulumi.StringOutput)
}

type FunctionTriggerNatsPtrOutput struct{ *pulumi.OutputState }

func (FunctionTriggerNatsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionTriggerNats)(nil)).Elem()
}

func (o FunctionTriggerNatsPtrOutput) ToFunctionTriggerNatsPtrOutput() FunctionTriggerNatsPtrOutput {
	return o
}

func (o FunctionTriggerNatsPtrOutput) ToFunctionTriggerNatsPtrOutputWithContext(ctx context.Context) FunctionTriggerNatsPtrOutput {
	return o
}

func (o FunctionTriggerNatsPtrOutput) Elem() FunctionTriggerNatsOutput {
	return o.ApplyT(func(v *FunctionTriggerNats) FunctionTriggerNats {
		if v != nil {
			return *v
		}
		var ret FunctionTriggerNats
		return ret
	}).(FunctionTriggerNatsOutput)
}

// ID of the mnq nats account.
func (o FunctionTriggerNatsPtrOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionTriggerNats) *string {
		if v == nil {
			return nil
		}
		return v.AccountId
	}).(pulumi.StringPtrOutput)
}

// ID of the project that contain the mnq nats account, defaults to provider's project
func (o FunctionTriggerNatsPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionTriggerNats) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// `region`). The region in which the namespace should be created.
func (o FunctionTriggerNatsPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionTriggerNats) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// The subject to listen to
func (o FunctionTriggerNatsPtrOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionTriggerNats) *string {
		if v == nil {
			return nil
		}
		return &v.Subject
	}).(pulumi.StringPtrOutput)
}

type FunctionTriggerSqs struct {
	// ID of the mnq namespace. Deprecated.
	NamespaceId *string `pulumi:"namespaceId"`
	// ID of the project that contain the mnq nats account, defaults to provider's project
	ProjectId *string `pulumi:"projectId"`
	// Name of the queue
	Queue string `pulumi:"queue"`
	// `region`). The region in which the namespace should be created.
	Region *string `pulumi:"region"`
}

// FunctionTriggerSqsInput is an input type that accepts FunctionTriggerSqsArgs and FunctionTriggerSqsOutput values.
// You can construct a concrete instance of `FunctionTriggerSqsInput` via:
//
//	FunctionTriggerSqsArgs{...}
type FunctionTriggerSqsInput interface {
	pulumi.Input

	ToFunctionTriggerSqsOutput() FunctionTriggerSqsOutput
	ToFunctionTriggerSqsOutputWithContext(context.Context) FunctionTriggerSqsOutput
}

type FunctionTriggerSqsArgs struct {
	// ID of the mnq namespace. Deprecated.
	NamespaceId pulumi.StringPtrInput `pulumi:"namespaceId"`
	// ID of the project that contain the mnq nats account, defaults to provider's project
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Name of the queue
	Queue pulumi.StringInput `pulumi:"queue"`
	// `region`). The region in which the namespace should be created.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (FunctionTriggerSqsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionTriggerSqs)(nil)).Elem()
}

func (i FunctionTriggerSqsArgs) ToFunctionTriggerSqsOutput() FunctionTriggerSqsOutput {
	return i.ToFunctionTriggerSqsOutputWithContext(context.Background())
}

func (i FunctionTriggerSqsArgs) ToFunctionTriggerSqsOutputWithContext(ctx context.Context) FunctionTriggerSqsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTriggerSqsOutput)
}

func (i FunctionTriggerSqsArgs) ToFunctionTriggerSqsPtrOutput() FunctionTriggerSqsPtrOutput {
	return i.ToFunctionTriggerSqsPtrOutputWithContext(context.Background())
}

func (i FunctionTriggerSqsArgs) ToFunctionTriggerSqsPtrOutputWithContext(ctx context.Context) FunctionTriggerSqsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTriggerSqsOutput).ToFunctionTriggerSqsPtrOutputWithContext(ctx)
}

// FunctionTriggerSqsPtrInput is an input type that accepts FunctionTriggerSqsArgs, FunctionTriggerSqsPtr and FunctionTriggerSqsPtrOutput values.
// You can construct a concrete instance of `FunctionTriggerSqsPtrInput` via:
//
//	        FunctionTriggerSqsArgs{...}
//
//	or:
//
//	        nil
type FunctionTriggerSqsPtrInput interface {
	pulumi.Input

	ToFunctionTriggerSqsPtrOutput() FunctionTriggerSqsPtrOutput
	ToFunctionTriggerSqsPtrOutputWithContext(context.Context) FunctionTriggerSqsPtrOutput
}

type functionTriggerSqsPtrType FunctionTriggerSqsArgs

func FunctionTriggerSqsPtr(v *FunctionTriggerSqsArgs) FunctionTriggerSqsPtrInput {
	return (*functionTriggerSqsPtrType)(v)
}

func (*functionTriggerSqsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionTriggerSqs)(nil)).Elem()
}

func (i *functionTriggerSqsPtrType) ToFunctionTriggerSqsPtrOutput() FunctionTriggerSqsPtrOutput {
	return i.ToFunctionTriggerSqsPtrOutputWithContext(context.Background())
}

func (i *functionTriggerSqsPtrType) ToFunctionTriggerSqsPtrOutputWithContext(ctx context.Context) FunctionTriggerSqsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTriggerSqsPtrOutput)
}

type FunctionTriggerSqsOutput struct{ *pulumi.OutputState }

func (FunctionTriggerSqsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionTriggerSqs)(nil)).Elem()
}

func (o FunctionTriggerSqsOutput) ToFunctionTriggerSqsOutput() FunctionTriggerSqsOutput {
	return o
}

func (o FunctionTriggerSqsOutput) ToFunctionTriggerSqsOutputWithContext(ctx context.Context) FunctionTriggerSqsOutput {
	return o
}

func (o FunctionTriggerSqsOutput) ToFunctionTriggerSqsPtrOutput() FunctionTriggerSqsPtrOutput {
	return o.ToFunctionTriggerSqsPtrOutputWithContext(context.Background())
}

func (o FunctionTriggerSqsOutput) ToFunctionTriggerSqsPtrOutputWithContext(ctx context.Context) FunctionTriggerSqsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionTriggerSqs) *FunctionTriggerSqs {
		return &v
	}).(FunctionTriggerSqsPtrOutput)
}

// ID of the mnq namespace. Deprecated.
func (o FunctionTriggerSqsOutput) NamespaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionTriggerSqs) *string { return v.NamespaceId }).(pulumi.StringPtrOutput)
}

// ID of the project that contain the mnq nats account, defaults to provider's project
func (o FunctionTriggerSqsOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionTriggerSqs) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Name of the queue
func (o FunctionTriggerSqsOutput) Queue() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionTriggerSqs) string { return v.Queue }).(pulumi.StringOutput)
}

// `region`). The region in which the namespace should be created.
func (o FunctionTriggerSqsOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionTriggerSqs) *string { return v.Region }).(pulumi.StringPtrOutput)
}

type FunctionTriggerSqsPtrOutput struct{ *pulumi.OutputState }

func (FunctionTriggerSqsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionTriggerSqs)(nil)).Elem()
}

func (o FunctionTriggerSqsPtrOutput) ToFunctionTriggerSqsPtrOutput() FunctionTriggerSqsPtrOutput {
	return o
}

func (o FunctionTriggerSqsPtrOutput) ToFunctionTriggerSqsPtrOutputWithContext(ctx context.Context) FunctionTriggerSqsPtrOutput {
	return o
}

func (o FunctionTriggerSqsPtrOutput) Elem() FunctionTriggerSqsOutput {
	return o.ApplyT(func(v *FunctionTriggerSqs) FunctionTriggerSqs {
		if v != nil {
			return *v
		}
		var ret FunctionTriggerSqs
		return ret
	}).(FunctionTriggerSqsOutput)
}

// ID of the mnq namespace. Deprecated.
func (o FunctionTriggerSqsPtrOutput) NamespaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionTriggerSqs) *string {
		if v == nil {
			return nil
		}
		return v.NamespaceId
	}).(pulumi.StringPtrOutput)
}

// ID of the project that contain the mnq nats account, defaults to provider's project
func (o FunctionTriggerSqsPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionTriggerSqs) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// Name of the queue
func (o FunctionTriggerSqsPtrOutput) Queue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionTriggerSqs) *string {
		if v == nil {
			return nil
		}
		return &v.Queue
	}).(pulumi.StringPtrOutput)
}

// `region`). The region in which the namespace should be created.
func (o FunctionTriggerSqsPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionTriggerSqs) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerTriggerNatsInput)(nil)).Elem(), ContainerTriggerNatsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerTriggerNatsPtrInput)(nil)).Elem(), ContainerTriggerNatsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerTriggerSqsInput)(nil)).Elem(), ContainerTriggerSqsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerTriggerSqsPtrInput)(nil)).Elem(), ContainerTriggerSqsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionTriggerNatsInput)(nil)).Elem(), FunctionTriggerNatsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionTriggerNatsPtrInput)(nil)).Elem(), FunctionTriggerNatsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionTriggerSqsInput)(nil)).Elem(), FunctionTriggerSqsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionTriggerSqsPtrInput)(nil)).Elem(), FunctionTriggerSqsArgs{})
	pulumi.RegisterOutputType(ContainerTriggerNatsOutput{})
	pulumi.RegisterOutputType(ContainerTriggerNatsPtrOutput{})
	pulumi.RegisterOutputType(ContainerTriggerSqsOutput{})
	pulumi.RegisterOutputType(ContainerTriggerSqsPtrOutput{})
	pulumi.RegisterOutputType(FunctionTriggerNatsOutput{})
	pulumi.RegisterOutputType(FunctionTriggerNatsPtrOutput{})
	pulumi.RegisterOutputType(FunctionTriggerSqsOutput{})
	pulumi.RegisterOutputType(FunctionTriggerSqsPtrOutput{})
}
