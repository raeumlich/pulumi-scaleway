// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Gets information about multiple Virtual Private Clouds.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpc.GetVPCs(ctx, &vpc.GetVPCsArgs{
//				Name:   pulumi.StringRef("tf-vpc-datasource"),
//				Region: pulumi.StringRef("nl-ams"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetVPCs(ctx *pulumi.Context, args *GetVPCsArgs, opts ...pulumi.InvokeOption) (*GetVPCsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVPCsResult
	err := ctx.Invoke("scaleway:vpc/getVPCs:getVPCs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVPCs.
type GetVPCsArgs struct {
	// The VPC name used as filter. VPCs with a name like it are listed.
	Name *string `pulumi:"name"`
	// The ID of the project the VPC is associated with.
	ProjectId *string `pulumi:"projectId"`
	// `region`). The region in which vpcs exist.
	Region *string `pulumi:"region"`
	// List of tags used as filter. VPCs with these exact tags are listed.
	Tags []string `pulumi:"tags"`
}

// A collection of values returned by getVPCs.
type GetVPCsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id   string  `pulumi:"id"`
	Name *string `pulumi:"name"`
	// The organization ID the VPC is associated with.
	OrganizationId string `pulumi:"organizationId"`
	// The ID of the project the VPC is associated with.
	ProjectId string   `pulumi:"projectId"`
	Region    string   `pulumi:"region"`
	Tags      []string `pulumi:"tags"`
	// List of found vpcs
	Vpcs []GetVPCsVpc `pulumi:"vpcs"`
}

func GetVPCsOutput(ctx *pulumi.Context, args GetVPCsOutputArgs, opts ...pulumi.InvokeOption) GetVPCsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetVPCsResult, error) {
			args := v.(GetVPCsArgs)
			r, err := GetVPCs(ctx, &args, opts...)
			var s GetVPCsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetVPCsResultOutput)
}

// A collection of arguments for invoking getVPCs.
type GetVPCsOutputArgs struct {
	// The VPC name used as filter. VPCs with a name like it are listed.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The ID of the project the VPC is associated with.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// `region`). The region in which vpcs exist.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// List of tags used as filter. VPCs with these exact tags are listed.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
}

func (GetVPCsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVPCsArgs)(nil)).Elem()
}

// A collection of values returned by getVPCs.
type GetVPCsResultOutput struct{ *pulumi.OutputState }

func (GetVPCsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVPCsResult)(nil)).Elem()
}

func (o GetVPCsResultOutput) ToGetVPCsResultOutput() GetVPCsResultOutput {
	return o
}

func (o GetVPCsResultOutput) ToGetVPCsResultOutputWithContext(ctx context.Context) GetVPCsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetVPCsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVPCsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetVPCsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVPCsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The organization ID the VPC is associated with.
func (o GetVPCsResultOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVPCsResult) string { return v.OrganizationId }).(pulumi.StringOutput)
}

// The ID of the project the VPC is associated with.
func (o GetVPCsResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVPCsResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o GetVPCsResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetVPCsResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o GetVPCsResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetVPCsResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// List of found vpcs
func (o GetVPCsResultOutput) Vpcs() GetVPCsVpcArrayOutput {
	return o.ApplyT(func(v GetVPCsResult) []GetVPCsVpc { return v.Vpcs }).(GetVPCsVpcArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVPCsResultOutput{})
}
