// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Manages Scaleway VPC Public Gateways IPs reverse DNS.
// For more information, see [the documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1/#ips-268151).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/dns"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			mainPublicGatewayIP, err := vpc.NewPublicGatewayIP(ctx, "mainPublicGatewayIP", nil)
//			if err != nil {
//				return err
//			}
//			_, err = dns.NewRecord(ctx, "tfA", &dns.RecordArgs{
//				DnsZone:  pulumi.String("example.com"),
//				Type:     pulumi.String("A"),
//				Data:     mainPublicGatewayIP.Address,
//				Ttl:      pulumi.Int(3600),
//				Priority: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpc.NewPublicGatewayIPReverseDNS(ctx, "mainPublicGatewayIPReverseDNS", &vpc.PublicGatewayIPReverseDNSArgs{
//				GatewayIpId: mainPublicGatewayIP.ID(),
//				Reverse:     pulumi.String("tf.example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Public gateway IPs reverse DNS can be imported using the `{zone}/{id}`, e.g. bash
//
// ```sh
//
//	$ pulumi import scaleway:vpc/publicGatewayIPReverseDNS:PublicGatewayIPReverseDNS main fr-par-1/11111111-1111-1111-1111-111111111111
//
// ```
type PublicGatewayIPReverseDNS struct {
	pulumi.CustomResourceState

	// The public gateway IP ID
	GatewayIpId pulumi.StringOutput `pulumi:"gatewayIpId"`
	// The reverse domain name for this IP address
	Reverse pulumi.StringOutput `pulumi:"reverse"`
	// `zone`) The zone in which the IP should be reserved.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewPublicGatewayIPReverseDNS registers a new resource with the given unique name, arguments, and options.
func NewPublicGatewayIPReverseDNS(ctx *pulumi.Context,
	name string, args *PublicGatewayIPReverseDNSArgs, opts ...pulumi.ResourceOption) (*PublicGatewayIPReverseDNS, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GatewayIpId == nil {
		return nil, errors.New("invalid value for required argument 'GatewayIpId'")
	}
	if args.Reverse == nil {
		return nil, errors.New("invalid value for required argument 'Reverse'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PublicGatewayIPReverseDNS
	err := ctx.RegisterResource("scaleway:vpc/publicGatewayIPReverseDNS:PublicGatewayIPReverseDNS", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPublicGatewayIPReverseDNS gets an existing PublicGatewayIPReverseDNS resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPublicGatewayIPReverseDNS(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PublicGatewayIPReverseDNSState, opts ...pulumi.ResourceOption) (*PublicGatewayIPReverseDNS, error) {
	var resource PublicGatewayIPReverseDNS
	err := ctx.ReadResource("scaleway:vpc/publicGatewayIPReverseDNS:PublicGatewayIPReverseDNS", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PublicGatewayIPReverseDNS resources.
type publicGatewayIPReverseDNSState struct {
	// The public gateway IP ID
	GatewayIpId *string `pulumi:"gatewayIpId"`
	// The reverse domain name for this IP address
	Reverse *string `pulumi:"reverse"`
	// `zone`) The zone in which the IP should be reserved.
	Zone *string `pulumi:"zone"`
}

type PublicGatewayIPReverseDNSState struct {
	// The public gateway IP ID
	GatewayIpId pulumi.StringPtrInput
	// The reverse domain name for this IP address
	Reverse pulumi.StringPtrInput
	// `zone`) The zone in which the IP should be reserved.
	Zone pulumi.StringPtrInput
}

func (PublicGatewayIPReverseDNSState) ElementType() reflect.Type {
	return reflect.TypeOf((*publicGatewayIPReverseDNSState)(nil)).Elem()
}

type publicGatewayIPReverseDNSArgs struct {
	// The public gateway IP ID
	GatewayIpId string `pulumi:"gatewayIpId"`
	// The reverse domain name for this IP address
	Reverse string `pulumi:"reverse"`
	// `zone`) The zone in which the IP should be reserved.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a PublicGatewayIPReverseDNS resource.
type PublicGatewayIPReverseDNSArgs struct {
	// The public gateway IP ID
	GatewayIpId pulumi.StringInput
	// The reverse domain name for this IP address
	Reverse pulumi.StringInput
	// `zone`) The zone in which the IP should be reserved.
	Zone pulumi.StringPtrInput
}

func (PublicGatewayIPReverseDNSArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*publicGatewayIPReverseDNSArgs)(nil)).Elem()
}

type PublicGatewayIPReverseDNSInput interface {
	pulumi.Input

	ToPublicGatewayIPReverseDNSOutput() PublicGatewayIPReverseDNSOutput
	ToPublicGatewayIPReverseDNSOutputWithContext(ctx context.Context) PublicGatewayIPReverseDNSOutput
}

func (*PublicGatewayIPReverseDNS) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicGatewayIPReverseDNS)(nil)).Elem()
}

func (i *PublicGatewayIPReverseDNS) ToPublicGatewayIPReverseDNSOutput() PublicGatewayIPReverseDNSOutput {
	return i.ToPublicGatewayIPReverseDNSOutputWithContext(context.Background())
}

func (i *PublicGatewayIPReverseDNS) ToPublicGatewayIPReverseDNSOutputWithContext(ctx context.Context) PublicGatewayIPReverseDNSOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicGatewayIPReverseDNSOutput)
}

// PublicGatewayIPReverseDNSArrayInput is an input type that accepts PublicGatewayIPReverseDNSArray and PublicGatewayIPReverseDNSArrayOutput values.
// You can construct a concrete instance of `PublicGatewayIPReverseDNSArrayInput` via:
//
//	PublicGatewayIPReverseDNSArray{ PublicGatewayIPReverseDNSArgs{...} }
type PublicGatewayIPReverseDNSArrayInput interface {
	pulumi.Input

	ToPublicGatewayIPReverseDNSArrayOutput() PublicGatewayIPReverseDNSArrayOutput
	ToPublicGatewayIPReverseDNSArrayOutputWithContext(context.Context) PublicGatewayIPReverseDNSArrayOutput
}

type PublicGatewayIPReverseDNSArray []PublicGatewayIPReverseDNSInput

func (PublicGatewayIPReverseDNSArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicGatewayIPReverseDNS)(nil)).Elem()
}

func (i PublicGatewayIPReverseDNSArray) ToPublicGatewayIPReverseDNSArrayOutput() PublicGatewayIPReverseDNSArrayOutput {
	return i.ToPublicGatewayIPReverseDNSArrayOutputWithContext(context.Background())
}

func (i PublicGatewayIPReverseDNSArray) ToPublicGatewayIPReverseDNSArrayOutputWithContext(ctx context.Context) PublicGatewayIPReverseDNSArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicGatewayIPReverseDNSArrayOutput)
}

// PublicGatewayIPReverseDNSMapInput is an input type that accepts PublicGatewayIPReverseDNSMap and PublicGatewayIPReverseDNSMapOutput values.
// You can construct a concrete instance of `PublicGatewayIPReverseDNSMapInput` via:
//
//	PublicGatewayIPReverseDNSMap{ "key": PublicGatewayIPReverseDNSArgs{...} }
type PublicGatewayIPReverseDNSMapInput interface {
	pulumi.Input

	ToPublicGatewayIPReverseDNSMapOutput() PublicGatewayIPReverseDNSMapOutput
	ToPublicGatewayIPReverseDNSMapOutputWithContext(context.Context) PublicGatewayIPReverseDNSMapOutput
}

type PublicGatewayIPReverseDNSMap map[string]PublicGatewayIPReverseDNSInput

func (PublicGatewayIPReverseDNSMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicGatewayIPReverseDNS)(nil)).Elem()
}

func (i PublicGatewayIPReverseDNSMap) ToPublicGatewayIPReverseDNSMapOutput() PublicGatewayIPReverseDNSMapOutput {
	return i.ToPublicGatewayIPReverseDNSMapOutputWithContext(context.Background())
}

func (i PublicGatewayIPReverseDNSMap) ToPublicGatewayIPReverseDNSMapOutputWithContext(ctx context.Context) PublicGatewayIPReverseDNSMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicGatewayIPReverseDNSMapOutput)
}

type PublicGatewayIPReverseDNSOutput struct{ *pulumi.OutputState }

func (PublicGatewayIPReverseDNSOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicGatewayIPReverseDNS)(nil)).Elem()
}

func (o PublicGatewayIPReverseDNSOutput) ToPublicGatewayIPReverseDNSOutput() PublicGatewayIPReverseDNSOutput {
	return o
}

func (o PublicGatewayIPReverseDNSOutput) ToPublicGatewayIPReverseDNSOutputWithContext(ctx context.Context) PublicGatewayIPReverseDNSOutput {
	return o
}

// The public gateway IP ID
func (o PublicGatewayIPReverseDNSOutput) GatewayIpId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicGatewayIPReverseDNS) pulumi.StringOutput { return v.GatewayIpId }).(pulumi.StringOutput)
}

// The reverse domain name for this IP address
func (o PublicGatewayIPReverseDNSOutput) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicGatewayIPReverseDNS) pulumi.StringOutput { return v.Reverse }).(pulumi.StringOutput)
}

// `zone`) The zone in which the IP should be reserved.
func (o PublicGatewayIPReverseDNSOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicGatewayIPReverseDNS) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type PublicGatewayIPReverseDNSArrayOutput struct{ *pulumi.OutputState }

func (PublicGatewayIPReverseDNSArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicGatewayIPReverseDNS)(nil)).Elem()
}

func (o PublicGatewayIPReverseDNSArrayOutput) ToPublicGatewayIPReverseDNSArrayOutput() PublicGatewayIPReverseDNSArrayOutput {
	return o
}

func (o PublicGatewayIPReverseDNSArrayOutput) ToPublicGatewayIPReverseDNSArrayOutputWithContext(ctx context.Context) PublicGatewayIPReverseDNSArrayOutput {
	return o
}

func (o PublicGatewayIPReverseDNSArrayOutput) Index(i pulumi.IntInput) PublicGatewayIPReverseDNSOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PublicGatewayIPReverseDNS {
		return vs[0].([]*PublicGatewayIPReverseDNS)[vs[1].(int)]
	}).(PublicGatewayIPReverseDNSOutput)
}

type PublicGatewayIPReverseDNSMapOutput struct{ *pulumi.OutputState }

func (PublicGatewayIPReverseDNSMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicGatewayIPReverseDNS)(nil)).Elem()
}

func (o PublicGatewayIPReverseDNSMapOutput) ToPublicGatewayIPReverseDNSMapOutput() PublicGatewayIPReverseDNSMapOutput {
	return o
}

func (o PublicGatewayIPReverseDNSMapOutput) ToPublicGatewayIPReverseDNSMapOutputWithContext(ctx context.Context) PublicGatewayIPReverseDNSMapOutput {
	return o
}

func (o PublicGatewayIPReverseDNSMapOutput) MapIndex(k pulumi.StringInput) PublicGatewayIPReverseDNSOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PublicGatewayIPReverseDNS {
		return vs[0].(map[string]*PublicGatewayIPReverseDNS)[vs[1].(string)]
	}).(PublicGatewayIPReverseDNSOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PublicGatewayIPReverseDNSInput)(nil)).Elem(), &PublicGatewayIPReverseDNS{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicGatewayIPReverseDNSArrayInput)(nil)).Elem(), PublicGatewayIPReverseDNSArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicGatewayIPReverseDNSMapInput)(nil)).Elem(), PublicGatewayIPReverseDNSMap{})
	pulumi.RegisterOutputType(PublicGatewayIPReverseDNSOutput{})
	pulumi.RegisterOutputType(PublicGatewayIPReverseDNSArrayOutput{})
	pulumi.RegisterOutputType(PublicGatewayIPReverseDNSMapOutput{})
}
