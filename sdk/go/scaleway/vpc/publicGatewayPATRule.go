// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway VPC Public Gateway PAT (Port Address Translation).
// For more information, see [the documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1#pat-rules-e75d10).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/instance"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sg01, err := instance.NewSecurityGroup(ctx, "sg01", &instance.SecurityGroupArgs{
//				InboundDefaultPolicy:  pulumi.String("drop"),
//				OutboundDefaultPolicy: pulumi.String("accept"),
//				InboundRules: instance.SecurityGroupInboundRuleArray{
//					&instance.SecurityGroupInboundRuleArgs{
//						Action:   pulumi.String("accept"),
//						Port:     pulumi.Int(22),
//						Protocol: pulumi.String("TCP"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			srv01, err := instance.NewServer(ctx, "srv01", &instance.ServerArgs{
//				Type:            pulumi.String("PLAY2-NANO"),
//				Image:           pulumi.String("ubuntu_jammy"),
//				SecurityGroupId: sg01.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			pn01, err := vpc.NewPrivateNetwork(ctx, "pn01", nil)
//			if err != nil {
//				return err
//			}
//			pnic01, err := instance.NewPrivateNIC(ctx, "pnic01", &instance.PrivateNICArgs{
//				ServerId:         srv01.ID(),
//				PrivateNetworkId: pn01.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			dhcp01, err := vpc.NewPublicGatewayDHCP(ctx, "dhcp01", &vpc.PublicGatewayDHCPArgs{
//				Subnet: pulumi.String("192.168.0.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			ip01, err := vpc.NewPublicGatewayIP(ctx, "ip01", nil)
//			if err != nil {
//				return err
//			}
//			pg01, err := vpc.NewPublicGateway(ctx, "pg01", &vpc.PublicGatewayArgs{
//				Type: pulumi.String("VPC-GW-S"),
//				IpId: ip01.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			gn01, err := vpc.NewGatewayNetwork(ctx, "gn01", &vpc.GatewayNetworkArgs{
//				GatewayId:        pg01.ID(),
//				PrivateNetworkId: pn01.ID(),
//				DhcpId:           dhcp01.ID(),
//				CleanupDhcp:      pulumi.Bool(true),
//				EnableMasquerade: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			rsv01, err := vpc.NewPublicGatewayDHCPReservation(ctx, "rsv01", &vpc.PublicGatewayDHCPReservationArgs{
//				GatewayNetworkId: gn01.ID(),
//				MacAddress:       pnic01.MacAddress,
//				IpAddress:        pulumi.String("192.168.0.7"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpc.NewPublicGatewayPATRule(ctx, "pat01", &vpc.PublicGatewayPATRuleArgs{
//				GatewayId:   pg01.ID(),
//				PrivateIp:   rsv01.IpAddress,
//				PrivatePort: pulumi.Int(22),
//				PublicPort:  pulumi.Int(2202),
//				Protocol:    pulumi.String("tcp"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Public gateway PAT rules config can be imported using the `{zone}/{id}`, e.g. bash
//
// ```sh
//
//	$ pulumi import scaleway:vpc/publicGatewayPATRule:PublicGatewayPATRule main fr-par-1/11111111-1111-1111-1111-111111111111
//
// ```
type PublicGatewayPATRule struct {
	pulumi.CustomResourceState

	// The date and time of the creation of the pat rule config.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The ID of the public gateway.
	GatewayId pulumi.StringOutput `pulumi:"gatewayId"`
	// The organization ID the pat rule config is associated with.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The Private IP to forward data to (IP address).
	PrivateIp pulumi.StringOutput `pulumi:"privateIp"`
	// The Private port to translate to.
	PrivatePort pulumi.IntOutput `pulumi:"privatePort"`
	// The Protocol the rule should apply to. Possible values are both, tcp and udp.
	Protocol pulumi.StringPtrOutput `pulumi:"protocol"`
	// The Public port to listen on.
	PublicPort pulumi.IntOutput `pulumi:"publicPort"`
	// The date and time of the last update of the pat rule config.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// `zone`) The zone in which the public gateway DHCP config should be created.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewPublicGatewayPATRule registers a new resource with the given unique name, arguments, and options.
func NewPublicGatewayPATRule(ctx *pulumi.Context,
	name string, args *PublicGatewayPATRuleArgs, opts ...pulumi.ResourceOption) (*PublicGatewayPATRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GatewayId == nil {
		return nil, errors.New("invalid value for required argument 'GatewayId'")
	}
	if args.PrivateIp == nil {
		return nil, errors.New("invalid value for required argument 'PrivateIp'")
	}
	if args.PrivatePort == nil {
		return nil, errors.New("invalid value for required argument 'PrivatePort'")
	}
	if args.PublicPort == nil {
		return nil, errors.New("invalid value for required argument 'PublicPort'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PublicGatewayPATRule
	err := ctx.RegisterResource("scaleway:vpc/publicGatewayPATRule:PublicGatewayPATRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPublicGatewayPATRule gets an existing PublicGatewayPATRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPublicGatewayPATRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PublicGatewayPATRuleState, opts ...pulumi.ResourceOption) (*PublicGatewayPATRule, error) {
	var resource PublicGatewayPATRule
	err := ctx.ReadResource("scaleway:vpc/publicGatewayPATRule:PublicGatewayPATRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PublicGatewayPATRule resources.
type publicGatewayPATRuleState struct {
	// The date and time of the creation of the pat rule config.
	CreatedAt *string `pulumi:"createdAt"`
	// The ID of the public gateway.
	GatewayId *string `pulumi:"gatewayId"`
	// The organization ID the pat rule config is associated with.
	OrganizationId *string `pulumi:"organizationId"`
	// The Private IP to forward data to (IP address).
	PrivateIp *string `pulumi:"privateIp"`
	// The Private port to translate to.
	PrivatePort *int `pulumi:"privatePort"`
	// The Protocol the rule should apply to. Possible values are both, tcp and udp.
	Protocol *string `pulumi:"protocol"`
	// The Public port to listen on.
	PublicPort *int `pulumi:"publicPort"`
	// The date and time of the last update of the pat rule config.
	UpdatedAt *string `pulumi:"updatedAt"`
	// `zone`) The zone in which the public gateway DHCP config should be created.
	Zone *string `pulumi:"zone"`
}

type PublicGatewayPATRuleState struct {
	// The date and time of the creation of the pat rule config.
	CreatedAt pulumi.StringPtrInput
	// The ID of the public gateway.
	GatewayId pulumi.StringPtrInput
	// The organization ID the pat rule config is associated with.
	OrganizationId pulumi.StringPtrInput
	// The Private IP to forward data to (IP address).
	PrivateIp pulumi.StringPtrInput
	// The Private port to translate to.
	PrivatePort pulumi.IntPtrInput
	// The Protocol the rule should apply to. Possible values are both, tcp and udp.
	Protocol pulumi.StringPtrInput
	// The Public port to listen on.
	PublicPort pulumi.IntPtrInput
	// The date and time of the last update of the pat rule config.
	UpdatedAt pulumi.StringPtrInput
	// `zone`) The zone in which the public gateway DHCP config should be created.
	Zone pulumi.StringPtrInput
}

func (PublicGatewayPATRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*publicGatewayPATRuleState)(nil)).Elem()
}

type publicGatewayPATRuleArgs struct {
	// The ID of the public gateway.
	GatewayId string `pulumi:"gatewayId"`
	// The Private IP to forward data to (IP address).
	PrivateIp string `pulumi:"privateIp"`
	// The Private port to translate to.
	PrivatePort int `pulumi:"privatePort"`
	// The Protocol the rule should apply to. Possible values are both, tcp and udp.
	Protocol *string `pulumi:"protocol"`
	// The Public port to listen on.
	PublicPort int `pulumi:"publicPort"`
	// `zone`) The zone in which the public gateway DHCP config should be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a PublicGatewayPATRule resource.
type PublicGatewayPATRuleArgs struct {
	// The ID of the public gateway.
	GatewayId pulumi.StringInput
	// The Private IP to forward data to (IP address).
	PrivateIp pulumi.StringInput
	// The Private port to translate to.
	PrivatePort pulumi.IntInput
	// The Protocol the rule should apply to. Possible values are both, tcp and udp.
	Protocol pulumi.StringPtrInput
	// The Public port to listen on.
	PublicPort pulumi.IntInput
	// `zone`) The zone in which the public gateway DHCP config should be created.
	Zone pulumi.StringPtrInput
}

func (PublicGatewayPATRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*publicGatewayPATRuleArgs)(nil)).Elem()
}

type PublicGatewayPATRuleInput interface {
	pulumi.Input

	ToPublicGatewayPATRuleOutput() PublicGatewayPATRuleOutput
	ToPublicGatewayPATRuleOutputWithContext(ctx context.Context) PublicGatewayPATRuleOutput
}

func (*PublicGatewayPATRule) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicGatewayPATRule)(nil)).Elem()
}

func (i *PublicGatewayPATRule) ToPublicGatewayPATRuleOutput() PublicGatewayPATRuleOutput {
	return i.ToPublicGatewayPATRuleOutputWithContext(context.Background())
}

func (i *PublicGatewayPATRule) ToPublicGatewayPATRuleOutputWithContext(ctx context.Context) PublicGatewayPATRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicGatewayPATRuleOutput)
}

// PublicGatewayPATRuleArrayInput is an input type that accepts PublicGatewayPATRuleArray and PublicGatewayPATRuleArrayOutput values.
// You can construct a concrete instance of `PublicGatewayPATRuleArrayInput` via:
//
//	PublicGatewayPATRuleArray{ PublicGatewayPATRuleArgs{...} }
type PublicGatewayPATRuleArrayInput interface {
	pulumi.Input

	ToPublicGatewayPATRuleArrayOutput() PublicGatewayPATRuleArrayOutput
	ToPublicGatewayPATRuleArrayOutputWithContext(context.Context) PublicGatewayPATRuleArrayOutput
}

type PublicGatewayPATRuleArray []PublicGatewayPATRuleInput

func (PublicGatewayPATRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicGatewayPATRule)(nil)).Elem()
}

func (i PublicGatewayPATRuleArray) ToPublicGatewayPATRuleArrayOutput() PublicGatewayPATRuleArrayOutput {
	return i.ToPublicGatewayPATRuleArrayOutputWithContext(context.Background())
}

func (i PublicGatewayPATRuleArray) ToPublicGatewayPATRuleArrayOutputWithContext(ctx context.Context) PublicGatewayPATRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicGatewayPATRuleArrayOutput)
}

// PublicGatewayPATRuleMapInput is an input type that accepts PublicGatewayPATRuleMap and PublicGatewayPATRuleMapOutput values.
// You can construct a concrete instance of `PublicGatewayPATRuleMapInput` via:
//
//	PublicGatewayPATRuleMap{ "key": PublicGatewayPATRuleArgs{...} }
type PublicGatewayPATRuleMapInput interface {
	pulumi.Input

	ToPublicGatewayPATRuleMapOutput() PublicGatewayPATRuleMapOutput
	ToPublicGatewayPATRuleMapOutputWithContext(context.Context) PublicGatewayPATRuleMapOutput
}

type PublicGatewayPATRuleMap map[string]PublicGatewayPATRuleInput

func (PublicGatewayPATRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicGatewayPATRule)(nil)).Elem()
}

func (i PublicGatewayPATRuleMap) ToPublicGatewayPATRuleMapOutput() PublicGatewayPATRuleMapOutput {
	return i.ToPublicGatewayPATRuleMapOutputWithContext(context.Background())
}

func (i PublicGatewayPATRuleMap) ToPublicGatewayPATRuleMapOutputWithContext(ctx context.Context) PublicGatewayPATRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicGatewayPATRuleMapOutput)
}

type PublicGatewayPATRuleOutput struct{ *pulumi.OutputState }

func (PublicGatewayPATRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicGatewayPATRule)(nil)).Elem()
}

func (o PublicGatewayPATRuleOutput) ToPublicGatewayPATRuleOutput() PublicGatewayPATRuleOutput {
	return o
}

func (o PublicGatewayPATRuleOutput) ToPublicGatewayPATRuleOutputWithContext(ctx context.Context) PublicGatewayPATRuleOutput {
	return o
}

// The date and time of the creation of the pat rule config.
func (o PublicGatewayPATRuleOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicGatewayPATRule) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ID of the public gateway.
func (o PublicGatewayPATRuleOutput) GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicGatewayPATRule) pulumi.StringOutput { return v.GatewayId }).(pulumi.StringOutput)
}

// The organization ID the pat rule config is associated with.
func (o PublicGatewayPATRuleOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicGatewayPATRule) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The Private IP to forward data to (IP address).
func (o PublicGatewayPATRuleOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicGatewayPATRule) pulumi.StringOutput { return v.PrivateIp }).(pulumi.StringOutput)
}

// The Private port to translate to.
func (o PublicGatewayPATRuleOutput) PrivatePort() pulumi.IntOutput {
	return o.ApplyT(func(v *PublicGatewayPATRule) pulumi.IntOutput { return v.PrivatePort }).(pulumi.IntOutput)
}

// The Protocol the rule should apply to. Possible values are both, tcp and udp.
func (o PublicGatewayPATRuleOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublicGatewayPATRule) pulumi.StringPtrOutput { return v.Protocol }).(pulumi.StringPtrOutput)
}

// The Public port to listen on.
func (o PublicGatewayPATRuleOutput) PublicPort() pulumi.IntOutput {
	return o.ApplyT(func(v *PublicGatewayPATRule) pulumi.IntOutput { return v.PublicPort }).(pulumi.IntOutput)
}

// The date and time of the last update of the pat rule config.
func (o PublicGatewayPATRuleOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicGatewayPATRule) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// `zone`) The zone in which the public gateway DHCP config should be created.
func (o PublicGatewayPATRuleOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicGatewayPATRule) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type PublicGatewayPATRuleArrayOutput struct{ *pulumi.OutputState }

func (PublicGatewayPATRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicGatewayPATRule)(nil)).Elem()
}

func (o PublicGatewayPATRuleArrayOutput) ToPublicGatewayPATRuleArrayOutput() PublicGatewayPATRuleArrayOutput {
	return o
}

func (o PublicGatewayPATRuleArrayOutput) ToPublicGatewayPATRuleArrayOutputWithContext(ctx context.Context) PublicGatewayPATRuleArrayOutput {
	return o
}

func (o PublicGatewayPATRuleArrayOutput) Index(i pulumi.IntInput) PublicGatewayPATRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PublicGatewayPATRule {
		return vs[0].([]*PublicGatewayPATRule)[vs[1].(int)]
	}).(PublicGatewayPATRuleOutput)
}

type PublicGatewayPATRuleMapOutput struct{ *pulumi.OutputState }

func (PublicGatewayPATRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicGatewayPATRule)(nil)).Elem()
}

func (o PublicGatewayPATRuleMapOutput) ToPublicGatewayPATRuleMapOutput() PublicGatewayPATRuleMapOutput {
	return o
}

func (o PublicGatewayPATRuleMapOutput) ToPublicGatewayPATRuleMapOutputWithContext(ctx context.Context) PublicGatewayPATRuleMapOutput {
	return o
}

func (o PublicGatewayPATRuleMapOutput) MapIndex(k pulumi.StringInput) PublicGatewayPATRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PublicGatewayPATRule {
		return vs[0].(map[string]*PublicGatewayPATRule)[vs[1].(string)]
	}).(PublicGatewayPATRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PublicGatewayPATRuleInput)(nil)).Elem(), &PublicGatewayPATRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicGatewayPATRuleArrayInput)(nil)).Elem(), PublicGatewayPATRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicGatewayPATRuleMapInput)(nil)).Elem(), PublicGatewayPATRuleMap{})
	pulumi.RegisterOutputType(PublicGatewayPATRuleOutput{})
	pulumi.RegisterOutputType(PublicGatewayPATRuleArrayOutput{})
	pulumi.RegisterOutputType(PublicGatewayPATRuleMapOutput{})
}
