// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package secret

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Secret Versions.
// For more information, see [the documentation](https://developers.scaleway.com/en/products/secret_manager/api/v1alpha1/#secret-versions-079501).
//
// ## Example Usage
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/secret"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := secret.NewSecret(ctx, "main", &secret.SecretArgs{
//				Description: pulumi.String("barr"),
//				Tags: pulumi.StringArray{
//					pulumi.String("foo"),
//					pulumi.String("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = secret.NewVersion(ctx, "v1", &secret.VersionArgs{
//				Description: pulumi.String("version1"),
//				SecretId:    main.ID(),
//				Data:        pulumi.String("my_new_secret"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The Secret Version can be imported using the `{region}/{id}/{revision}`, e.g. ~> **Important:** Be aware if you import with revision `latest` you will overwrite the version you used before. bash
//
// ```sh
//
//	$ pulumi import scaleway:secret/version:Version main fr-par/11111111-1111-1111-1111-111111111111/2
//
// ```
type Version struct {
	pulumi.CustomResourceState

	// Date and time of secret version's creation (RFC 3339 format).
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The data payload of the secret version. Must be no larger than 64KiB. (e.g. `my-secret-version-payload`). more on the data section
	Data pulumi.StringOutput `pulumi:"data"`
	// Description of the secret version (e.g. `my-new-description`).
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// `region`) The region
	// in which the resource exists.
	Region pulumi.StringOutput `pulumi:"region"`
	// The revision for this Secret Version.
	Revision pulumi.StringOutput `pulumi:"revision"`
	// The Secret ID associated wit the secret version.
	SecretId pulumi.StringOutput `pulumi:"secretId"`
	// The status of the Secret Version.
	Status pulumi.StringOutput `pulumi:"status"`
	// Date and time of secret version's last update (RFC 3339 format).
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewVersion registers a new resource with the given unique name, arguments, and options.
func NewVersion(ctx *pulumi.Context,
	name string, args *VersionArgs, opts ...pulumi.ResourceOption) (*Version, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Data == nil {
		return nil, errors.New("invalid value for required argument 'Data'")
	}
	if args.SecretId == nil {
		return nil, errors.New("invalid value for required argument 'SecretId'")
	}
	if args.Data != nil {
		args.Data = pulumi.ToSecret(args.Data).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"data",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Version
	err := ctx.RegisterResource("scaleway:secret/version:Version", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVersion gets an existing Version resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VersionState, opts ...pulumi.ResourceOption) (*Version, error) {
	var resource Version
	err := ctx.ReadResource("scaleway:secret/version:Version", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Version resources.
type versionState struct {
	// Date and time of secret version's creation (RFC 3339 format).
	CreatedAt *string `pulumi:"createdAt"`
	// The data payload of the secret version. Must be no larger than 64KiB. (e.g. `my-secret-version-payload`). more on the data section
	Data *string `pulumi:"data"`
	// Description of the secret version (e.g. `my-new-description`).
	Description *string `pulumi:"description"`
	// `region`) The region
	// in which the resource exists.
	Region *string `pulumi:"region"`
	// The revision for this Secret Version.
	Revision *string `pulumi:"revision"`
	// The Secret ID associated wit the secret version.
	SecretId *string `pulumi:"secretId"`
	// The status of the Secret Version.
	Status *string `pulumi:"status"`
	// Date and time of secret version's last update (RFC 3339 format).
	UpdatedAt *string `pulumi:"updatedAt"`
}

type VersionState struct {
	// Date and time of secret version's creation (RFC 3339 format).
	CreatedAt pulumi.StringPtrInput
	// The data payload of the secret version. Must be no larger than 64KiB. (e.g. `my-secret-version-payload`). more on the data section
	Data pulumi.StringPtrInput
	// Description of the secret version (e.g. `my-new-description`).
	Description pulumi.StringPtrInput
	// `region`) The region
	// in which the resource exists.
	Region pulumi.StringPtrInput
	// The revision for this Secret Version.
	Revision pulumi.StringPtrInput
	// The Secret ID associated wit the secret version.
	SecretId pulumi.StringPtrInput
	// The status of the Secret Version.
	Status pulumi.StringPtrInput
	// Date and time of secret version's last update (RFC 3339 format).
	UpdatedAt pulumi.StringPtrInput
}

func (VersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*versionState)(nil)).Elem()
}

type versionArgs struct {
	// The data payload of the secret version. Must be no larger than 64KiB. (e.g. `my-secret-version-payload`). more on the data section
	Data string `pulumi:"data"`
	// Description of the secret version (e.g. `my-new-description`).
	Description *string `pulumi:"description"`
	// `region`) The region
	// in which the resource exists.
	Region *string `pulumi:"region"`
	// The Secret ID associated wit the secret version.
	SecretId string `pulumi:"secretId"`
}

// The set of arguments for constructing a Version resource.
type VersionArgs struct {
	// The data payload of the secret version. Must be no larger than 64KiB. (e.g. `my-secret-version-payload`). more on the data section
	Data pulumi.StringInput
	// Description of the secret version (e.g. `my-new-description`).
	Description pulumi.StringPtrInput
	// `region`) The region
	// in which the resource exists.
	Region pulumi.StringPtrInput
	// The Secret ID associated wit the secret version.
	SecretId pulumi.StringInput
}

func (VersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*versionArgs)(nil)).Elem()
}

type VersionInput interface {
	pulumi.Input

	ToVersionOutput() VersionOutput
	ToVersionOutputWithContext(ctx context.Context) VersionOutput
}

func (*Version) ElementType() reflect.Type {
	return reflect.TypeOf((**Version)(nil)).Elem()
}

func (i *Version) ToVersionOutput() VersionOutput {
	return i.ToVersionOutputWithContext(context.Background())
}

func (i *Version) ToVersionOutputWithContext(ctx context.Context) VersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionOutput)
}

// VersionArrayInput is an input type that accepts VersionArray and VersionArrayOutput values.
// You can construct a concrete instance of `VersionArrayInput` via:
//
//	VersionArray{ VersionArgs{...} }
type VersionArrayInput interface {
	pulumi.Input

	ToVersionArrayOutput() VersionArrayOutput
	ToVersionArrayOutputWithContext(context.Context) VersionArrayOutput
}

type VersionArray []VersionInput

func (VersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Version)(nil)).Elem()
}

func (i VersionArray) ToVersionArrayOutput() VersionArrayOutput {
	return i.ToVersionArrayOutputWithContext(context.Background())
}

func (i VersionArray) ToVersionArrayOutputWithContext(ctx context.Context) VersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionArrayOutput)
}

// VersionMapInput is an input type that accepts VersionMap and VersionMapOutput values.
// You can construct a concrete instance of `VersionMapInput` via:
//
//	VersionMap{ "key": VersionArgs{...} }
type VersionMapInput interface {
	pulumi.Input

	ToVersionMapOutput() VersionMapOutput
	ToVersionMapOutputWithContext(context.Context) VersionMapOutput
}

type VersionMap map[string]VersionInput

func (VersionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Version)(nil)).Elem()
}

func (i VersionMap) ToVersionMapOutput() VersionMapOutput {
	return i.ToVersionMapOutputWithContext(context.Background())
}

func (i VersionMap) ToVersionMapOutputWithContext(ctx context.Context) VersionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionMapOutput)
}

type VersionOutput struct{ *pulumi.OutputState }

func (VersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Version)(nil)).Elem()
}

func (o VersionOutput) ToVersionOutput() VersionOutput {
	return o
}

func (o VersionOutput) ToVersionOutputWithContext(ctx context.Context) VersionOutput {
	return o
}

// Date and time of secret version's creation (RFC 3339 format).
func (o VersionOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Version) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The data payload of the secret version. Must be no larger than 64KiB. (e.g. `my-secret-version-payload`). more on the data section
func (o VersionOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v *Version) pulumi.StringOutput { return v.Data }).(pulumi.StringOutput)
}

// Description of the secret version (e.g. `my-new-description`).
func (o VersionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Version) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// `region`) The region
// in which the resource exists.
func (o VersionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Version) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The revision for this Secret Version.
func (o VersionOutput) Revision() pulumi.StringOutput {
	return o.ApplyT(func(v *Version) pulumi.StringOutput { return v.Revision }).(pulumi.StringOutput)
}

// The Secret ID associated wit the secret version.
func (o VersionOutput) SecretId() pulumi.StringOutput {
	return o.ApplyT(func(v *Version) pulumi.StringOutput { return v.SecretId }).(pulumi.StringOutput)
}

// The status of the Secret Version.
func (o VersionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Version) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Date and time of secret version's last update (RFC 3339 format).
func (o VersionOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Version) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type VersionArrayOutput struct{ *pulumi.OutputState }

func (VersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Version)(nil)).Elem()
}

func (o VersionArrayOutput) ToVersionArrayOutput() VersionArrayOutput {
	return o
}

func (o VersionArrayOutput) ToVersionArrayOutputWithContext(ctx context.Context) VersionArrayOutput {
	return o
}

func (o VersionArrayOutput) Index(i pulumi.IntInput) VersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Version {
		return vs[0].([]*Version)[vs[1].(int)]
	}).(VersionOutput)
}

type VersionMapOutput struct{ *pulumi.OutputState }

func (VersionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Version)(nil)).Elem()
}

func (o VersionMapOutput) ToVersionMapOutput() VersionMapOutput {
	return o
}

func (o VersionMapOutput) ToVersionMapOutputWithContext(ctx context.Context) VersionMapOutput {
	return o
}

func (o VersionMapOutput) MapIndex(k pulumi.StringInput) VersionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Version {
		return vs[0].(map[string]*Version)[vs[1].(string)]
	}).(VersionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VersionInput)(nil)).Elem(), &Version{})
	pulumi.RegisterInputType(reflect.TypeOf((*VersionArrayInput)(nil)).Elem(), VersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VersionMapInput)(nil)).Elem(), VersionMap{})
	pulumi.RegisterOutputType(VersionOutput{})
	pulumi.RegisterOutputType(VersionArrayOutput{})
	pulumi.RegisterOutputType(VersionMapOutput{})
}
