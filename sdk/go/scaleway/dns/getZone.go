// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Gets information about a domain zone.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/dns"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dns.LookupZone(ctx, &dns.LookupZoneArgs{
//				Domain:    pulumi.StringRef("scaleway-terraform.com"),
//				Subdomain: pulumi.StringRef("test"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupZone(ctx *pulumi.Context, args *LookupZoneArgs, opts ...pulumi.InvokeOption) (*LookupZoneResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupZoneResult
	err := ctx.Invoke("scaleway:dns/getZone:getZone", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getZone.
type LookupZoneArgs struct {
	// The domain where the DNS zone will be created.
	Domain *string `pulumi:"domain"`
	// The subdomain(zone name) to create in the domain.
	Subdomain *string `pulumi:"subdomain"`
}

// A collection of values returned by getZone.
type LookupZoneResult struct {
	Domain *string `pulumi:"domain"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Message
	Message string `pulumi:"message"`
	// NameServer list for zone.
	Ns []string `pulumi:"ns"`
	// NameServer default list for zone.
	NsDefaults []string `pulumi:"nsDefaults"`
	// NameServer master list for zone.
	NsMasters []string `pulumi:"nsMasters"`
	ProjectId string   `pulumi:"projectId"`
	// The domain zone status.
	Status    string  `pulumi:"status"`
	Subdomain *string `pulumi:"subdomain"`
	// The date and time of the last update of the DNS zone.
	UpdatedAt string `pulumi:"updatedAt"`
}

func LookupZoneOutput(ctx *pulumi.Context, args LookupZoneOutputArgs, opts ...pulumi.InvokeOption) LookupZoneResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupZoneResult, error) {
			args := v.(LookupZoneArgs)
			r, err := LookupZone(ctx, &args, opts...)
			var s LookupZoneResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupZoneResultOutput)
}

// A collection of arguments for invoking getZone.
type LookupZoneOutputArgs struct {
	// The domain where the DNS zone will be created.
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// The subdomain(zone name) to create in the domain.
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
}

func (LookupZoneOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZoneArgs)(nil)).Elem()
}

// A collection of values returned by getZone.
type LookupZoneResultOutput struct{ *pulumi.OutputState }

func (LookupZoneResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZoneResult)(nil)).Elem()
}

func (o LookupZoneResultOutput) ToLookupZoneResultOutput() LookupZoneResultOutput {
	return o
}

func (o LookupZoneResultOutput) ToLookupZoneResultOutputWithContext(ctx context.Context) LookupZoneResultOutput {
	return o
}

func (o LookupZoneResultOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupZoneResult) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupZoneResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneResult) string { return v.Id }).(pulumi.StringOutput)
}

// Message
func (o LookupZoneResultOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneResult) string { return v.Message }).(pulumi.StringOutput)
}

// NameServer list for zone.
func (o LookupZoneResultOutput) Ns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupZoneResult) []string { return v.Ns }).(pulumi.StringArrayOutput)
}

// NameServer default list for zone.
func (o LookupZoneResultOutput) NsDefaults() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupZoneResult) []string { return v.NsDefaults }).(pulumi.StringArrayOutput)
}

// NameServer master list for zone.
func (o LookupZoneResultOutput) NsMasters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupZoneResult) []string { return v.NsMasters }).(pulumi.StringArrayOutput)
}

func (o LookupZoneResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The domain zone status.
func (o LookupZoneResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneResult) string { return v.Status }).(pulumi.StringOutput)
}

func (o LookupZoneResultOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupZoneResult) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// The date and time of the last update of the DNS zone.
func (o LookupZoneResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupZoneResultOutput{})
}
