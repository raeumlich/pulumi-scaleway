// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Gets information about a domain record.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/dns"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dns.LookupRecord(ctx, &dns.LookupRecordArgs{
//				Data:    pulumi.StringRef("1.2.3.4"),
//				DnsZone: pulumi.StringRef("domain.tld"),
//				Name:    pulumi.StringRef("www"),
//				Type:    pulumi.StringRef("A"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dns.LookupRecord(ctx, &dns.LookupRecordArgs{
//				DnsZone:  pulumi.StringRef("domain.tld"),
//				RecordId: pulumi.StringRef("11111111-1111-1111-1111-111111111111"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupRecord(ctx *pulumi.Context, args *LookupRecordArgs, opts ...pulumi.InvokeOption) (*LookupRecordResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRecordResult
	err := ctx.Invoke("scaleway:dns/getRecord:getRecord", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRecord.
type LookupRecordArgs struct {
	// The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
	// Cannot be used with `recordId`.
	Data *string `pulumi:"data"`
	// The IP address.
	DnsZone *string `pulumi:"dnsZone"`
	// The name of the record (can be an empty string for a root record).
	// Cannot be used with `recordId`.
	Name *string `pulumi:"name"`
	// `projectId`) The ID of the project the domain is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The record ID.
	// Cannot be used with `name`, `type` and `data`.
	RecordId *string `pulumi:"recordId"`
	// The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).
	// Cannot be used with `recordId`.
	Type *string `pulumi:"type"`
}

// A collection of values returned by getRecord.
type LookupRecordResult struct {
	Data    *string `pulumi:"data"`
	DnsZone *string `pulumi:"dnsZone"`
	Fqdn    string  `pulumi:"fqdn"`
	// Dynamic record base on user geolocalisation (More information about dynamic records)
	GeoIps []GetRecordGeoIp `pulumi:"geoIps"`
	// Dynamic record base on URL resolve (More information about dynamic records)
	HttpServices []GetRecordHttpService `pulumi:"httpServices"`
	// The provider-assigned unique ID for this managed resource.
	Id            string  `pulumi:"id"`
	KeepEmptyZone bool    `pulumi:"keepEmptyZone"`
	Name          *string `pulumi:"name"`
	// The priority of the record (mostly used with an `MX` record)
	Priority  int     `pulumi:"priority"`
	ProjectId *string `pulumi:"projectId"`
	RecordId  *string `pulumi:"recordId"`
	RootZone  bool    `pulumi:"rootZone"`
	// Time To Live of the record in seconds.
	Ttl  int     `pulumi:"ttl"`
	Type *string `pulumi:"type"`
	// Dynamic record based on the client’s (resolver) subnet (More information about dynamic records)
	Views []GetRecordView `pulumi:"views"`
	// Dynamic record base on IP weights (More information about dynamic records)
	Weighteds []GetRecordWeighted `pulumi:"weighteds"`
}

func LookupRecordOutput(ctx *pulumi.Context, args LookupRecordOutputArgs, opts ...pulumi.InvokeOption) LookupRecordResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRecordResult, error) {
			args := v.(LookupRecordArgs)
			r, err := LookupRecord(ctx, &args, opts...)
			var s LookupRecordResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRecordResultOutput)
}

// A collection of arguments for invoking getRecord.
type LookupRecordOutputArgs struct {
	// The content of the record (an IPv4 for an `A`, a string for a `TXT`...).
	// Cannot be used with `recordId`.
	Data pulumi.StringPtrInput `pulumi:"data"`
	// The IP address.
	DnsZone pulumi.StringPtrInput `pulumi:"dnsZone"`
	// The name of the record (can be an empty string for a root record).
	// Cannot be used with `recordId`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// `projectId`) The ID of the project the domain is associated with.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// The record ID.
	// Cannot be used with `name`, `type` and `data`.
	RecordId pulumi.StringPtrInput `pulumi:"recordId"`
	// The type of the record (`A`, `AAAA`, `MX`, `CNAME`, `DNAME`, `ALIAS`, `NS`, `PTR`, `SRV`, `TXT`, `TLSA`, or `CAA`).
	// Cannot be used with `recordId`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (LookupRecordOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRecordArgs)(nil)).Elem()
}

// A collection of values returned by getRecord.
type LookupRecordResultOutput struct{ *pulumi.OutputState }

func (LookupRecordResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRecordResult)(nil)).Elem()
}

func (o LookupRecordResultOutput) ToLookupRecordResultOutput() LookupRecordResultOutput {
	return o
}

func (o LookupRecordResultOutput) ToLookupRecordResultOutputWithContext(ctx context.Context) LookupRecordResultOutput {
	return o
}

func (o LookupRecordResultOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRecordResult) *string { return v.Data }).(pulumi.StringPtrOutput)
}

func (o LookupRecordResultOutput) DnsZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRecordResult) *string { return v.DnsZone }).(pulumi.StringPtrOutput)
}

func (o LookupRecordResultOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRecordResult) string { return v.Fqdn }).(pulumi.StringOutput)
}

// Dynamic record base on user geolocalisation (More information about dynamic records)
func (o LookupRecordResultOutput) GeoIps() GetRecordGeoIpArrayOutput {
	return o.ApplyT(func(v LookupRecordResult) []GetRecordGeoIp { return v.GeoIps }).(GetRecordGeoIpArrayOutput)
}

// Dynamic record base on URL resolve (More information about dynamic records)
func (o LookupRecordResultOutput) HttpServices() GetRecordHttpServiceArrayOutput {
	return o.ApplyT(func(v LookupRecordResult) []GetRecordHttpService { return v.HttpServices }).(GetRecordHttpServiceArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRecordResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRecordResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRecordResultOutput) KeepEmptyZone() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRecordResult) bool { return v.KeepEmptyZone }).(pulumi.BoolOutput)
}

func (o LookupRecordResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRecordResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The priority of the record (mostly used with an `MX` record)
func (o LookupRecordResultOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRecordResult) int { return v.Priority }).(pulumi.IntOutput)
}

func (o LookupRecordResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRecordResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

func (o LookupRecordResultOutput) RecordId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRecordResult) *string { return v.RecordId }).(pulumi.StringPtrOutput)
}

func (o LookupRecordResultOutput) RootZone() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRecordResult) bool { return v.RootZone }).(pulumi.BoolOutput)
}

// Time To Live of the record in seconds.
func (o LookupRecordResultOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRecordResult) int { return v.Ttl }).(pulumi.IntOutput)
}

func (o LookupRecordResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRecordResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Dynamic record based on the client’s (resolver) subnet (More information about dynamic records)
func (o LookupRecordResultOutput) Views() GetRecordViewArrayOutput {
	return o.ApplyT(func(v LookupRecordResult) []GetRecordView { return v.Views }).(GetRecordViewArrayOutput)
}

// Dynamic record base on IP weights (More information about dynamic records)
func (o LookupRecordResultOutput) Weighteds() GetRecordWeightedArrayOutput {
	return o.ApplyT(func(v LookupRecordResult) []GetRecordWeighted { return v.Weighteds }).(GetRecordWeightedArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRecordResultOutput{})
}
