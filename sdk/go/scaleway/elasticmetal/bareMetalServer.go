// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticmetal

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Compute Baremetal servers. For more information, see [the documentation](https://developers.scaleway.com/en/products/baremetal/api).
//
// ## Example Usage
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/account"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/elasticmetal"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := account.LookupSSHKey(ctx, &account.LookupSSHKeyArgs{
//				Name: pulumi.StringRef("main"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = elasticmetal.NewBareMetalServer(ctx, "base", &elasticmetal.BareMetalServerArgs{
//				Zone:  pulumi.String("fr-par-2"),
//				Offer: pulumi.String("GP-BM1-S"),
//				Os:    pulumi.String("d17d6872-0412-45d9-a198-af82c34d3c5c"),
//				SshKeyIds: pulumi.StringArray{
//					*pulumi.String(main.Id),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Without install config
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/elasticmetal"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myOffer, err := elasticmetal.GetBareMetalOffer(ctx, &elasticmetal.GetBareMetalOfferArgs{
//				Zone: pulumi.StringRef("fr-par-2"),
//				Name: pulumi.StringRef("EM-B112X-SSD"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = elasticmetal.NewBareMetalServer(ctx, "base", &elasticmetal.BareMetalServerArgs{
//				Zone:                   pulumi.String("fr-par-2"),
//				Offer:                  *pulumi.String(myOffer.OfferId),
//				InstallConfigAfterward: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Baremetal servers can be imported using the `{zone}/{id}`, e.g. bash
//
// ```sh
//
//	$ pulumi import scaleway:elasticmetal/bareMetalServer:BareMetalServer web fr-par-2/11111111-1111-1111-1111-111111111111
//
// ```
type BareMetalServer struct {
	pulumi.CustomResourceState

	// A description for the server.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The domain of the server.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// The hostname of the server.
	Hostname pulumi.StringPtrOutput `pulumi:"hostname"`
	// If True, this boolean allows to create a server without the install config if you want to provide it later.
	InstallConfigAfterward pulumi.BoolPtrOutput `pulumi:"installConfigAfterward"`
	// (List of) The IPs of the server.
	Ips BareMetalServerIpArrayOutput `pulumi:"ips"`
	// (List of) The IPv4 addresses of the server.
	Ipv4s BareMetalServerIpv4ArrayOutput `pulumi:"ipv4s"`
	// (List of) The IPv6 addresses of the server.
	Ipv6s BareMetalServerIpv6ArrayOutput `pulumi:"ipv6s"`
	// The name of the server.
	Name pulumi.StringOutput `pulumi:"name"`
	// The offer name or UUID of the baremetal server.
	// Use [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-334154) to find the right offer.
	//
	// > **Important:** Updates to `offer` will recreate the server.
	Offer pulumi.StringOutput `pulumi:"offer"`
	// The ID of the offer.
	OfferId pulumi.StringOutput `pulumi:"offerId"`
	// The name of the offer.
	OfferName pulumi.StringOutput `pulumi:"offerName"`
	// The options to enable on the server.
	// > The `options` block supports:
	Options BareMetalServerOptionArrayOutput `pulumi:"options"`
	// The organization ID the server is associated with.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The UUID of the os to install on the server.
	// Use [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-87598a) to find the right OS ID.
	// > **Important:** Updates to `os` will reinstall the server.
	Os pulumi.StringPtrOutput `pulumi:"os"`
	// The name of the os.
	OsName pulumi.StringOutput `pulumi:"osName"`
	// Password used for the installation. May be required depending on used os.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The private networks to attach to the server. For more information, see [the documentation](https://www.scaleway.com/en/docs/compute/elastic-metal/how-to/use-private-networks/)
	PrivateNetworks BareMetalServerPrivateNetworkArrayOutput `pulumi:"privateNetworks"`
	// `projectId`) The ID of the project the server is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// If True, this boolean allows to reinstall the server on install config changes.
	// > **Important:** Updates to `sshKeyIds`, `user`, `password`, `serviceUser` or `servicePassword` will not take effect on the server, it requires to reinstall it. To do so please set 'reinstall_on_config_changes' argument to true.
	ReinstallOnConfigChanges pulumi.BoolPtrOutput `pulumi:"reinstallOnConfigChanges"`
	// Password used for the service to install. May be required depending on used os.
	ServicePassword pulumi.StringPtrOutput `pulumi:"servicePassword"`
	// User used for the service to install.
	ServiceUser pulumi.StringOutput `pulumi:"serviceUser"`
	// List of SSH keys allowed to connect to the server.
	SshKeyIds pulumi.StringArrayOutput `pulumi:"sshKeyIds"`
	// The tags associated with the server.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// User used for the installation.
	User pulumi.StringOutput `pulumi:"user"`
	// `zone`) The zone in which the server should be created.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewBareMetalServer registers a new resource with the given unique name, arguments, and options.
func NewBareMetalServer(ctx *pulumi.Context,
	name string, args *BareMetalServerArgs, opts ...pulumi.ResourceOption) (*BareMetalServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Offer == nil {
		return nil, errors.New("invalid value for required argument 'Offer'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	if args.ServicePassword != nil {
		args.ServicePassword = pulumi.ToSecret(args.ServicePassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"servicePassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BareMetalServer
	err := ctx.RegisterResource("scaleway:elasticmetal/bareMetalServer:BareMetalServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBareMetalServer gets an existing BareMetalServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBareMetalServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BareMetalServerState, opts ...pulumi.ResourceOption) (*BareMetalServer, error) {
	var resource BareMetalServer
	err := ctx.ReadResource("scaleway:elasticmetal/bareMetalServer:BareMetalServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BareMetalServer resources.
type bareMetalServerState struct {
	// A description for the server.
	Description *string `pulumi:"description"`
	// The domain of the server.
	Domain *string `pulumi:"domain"`
	// The hostname of the server.
	Hostname *string `pulumi:"hostname"`
	// If True, this boolean allows to create a server without the install config if you want to provide it later.
	InstallConfigAfterward *bool `pulumi:"installConfigAfterward"`
	// (List of) The IPs of the server.
	Ips []BareMetalServerIp `pulumi:"ips"`
	// (List of) The IPv4 addresses of the server.
	Ipv4s []BareMetalServerIpv4 `pulumi:"ipv4s"`
	// (List of) The IPv6 addresses of the server.
	Ipv6s []BareMetalServerIpv6 `pulumi:"ipv6s"`
	// The name of the server.
	Name *string `pulumi:"name"`
	// The offer name or UUID of the baremetal server.
	// Use [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-334154) to find the right offer.
	//
	// > **Important:** Updates to `offer` will recreate the server.
	Offer *string `pulumi:"offer"`
	// The ID of the offer.
	OfferId *string `pulumi:"offerId"`
	// The name of the offer.
	OfferName *string `pulumi:"offerName"`
	// The options to enable on the server.
	// > The `options` block supports:
	Options []BareMetalServerOption `pulumi:"options"`
	// The organization ID the server is associated with.
	OrganizationId *string `pulumi:"organizationId"`
	// The UUID of the os to install on the server.
	// Use [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-87598a) to find the right OS ID.
	// > **Important:** Updates to `os` will reinstall the server.
	Os *string `pulumi:"os"`
	// The name of the os.
	OsName *string `pulumi:"osName"`
	// Password used for the installation. May be required depending on used os.
	Password *string `pulumi:"password"`
	// The private networks to attach to the server. For more information, see [the documentation](https://www.scaleway.com/en/docs/compute/elastic-metal/how-to/use-private-networks/)
	PrivateNetworks []BareMetalServerPrivateNetwork `pulumi:"privateNetworks"`
	// `projectId`) The ID of the project the server is associated with.
	ProjectId *string `pulumi:"projectId"`
	// If True, this boolean allows to reinstall the server on install config changes.
	// > **Important:** Updates to `sshKeyIds`, `user`, `password`, `serviceUser` or `servicePassword` will not take effect on the server, it requires to reinstall it. To do so please set 'reinstall_on_config_changes' argument to true.
	ReinstallOnConfigChanges *bool `pulumi:"reinstallOnConfigChanges"`
	// Password used for the service to install. May be required depending on used os.
	ServicePassword *string `pulumi:"servicePassword"`
	// User used for the service to install.
	ServiceUser *string `pulumi:"serviceUser"`
	// List of SSH keys allowed to connect to the server.
	SshKeyIds []string `pulumi:"sshKeyIds"`
	// The tags associated with the server.
	Tags []string `pulumi:"tags"`
	// User used for the installation.
	User *string `pulumi:"user"`
	// `zone`) The zone in which the server should be created.
	Zone *string `pulumi:"zone"`
}

type BareMetalServerState struct {
	// A description for the server.
	Description pulumi.StringPtrInput
	// The domain of the server.
	Domain pulumi.StringPtrInput
	// The hostname of the server.
	Hostname pulumi.StringPtrInput
	// If True, this boolean allows to create a server without the install config if you want to provide it later.
	InstallConfigAfterward pulumi.BoolPtrInput
	// (List of) The IPs of the server.
	Ips BareMetalServerIpArrayInput
	// (List of) The IPv4 addresses of the server.
	Ipv4s BareMetalServerIpv4ArrayInput
	// (List of) The IPv6 addresses of the server.
	Ipv6s BareMetalServerIpv6ArrayInput
	// The name of the server.
	Name pulumi.StringPtrInput
	// The offer name or UUID of the baremetal server.
	// Use [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-334154) to find the right offer.
	//
	// > **Important:** Updates to `offer` will recreate the server.
	Offer pulumi.StringPtrInput
	// The ID of the offer.
	OfferId pulumi.StringPtrInput
	// The name of the offer.
	OfferName pulumi.StringPtrInput
	// The options to enable on the server.
	// > The `options` block supports:
	Options BareMetalServerOptionArrayInput
	// The organization ID the server is associated with.
	OrganizationId pulumi.StringPtrInput
	// The UUID of the os to install on the server.
	// Use [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-87598a) to find the right OS ID.
	// > **Important:** Updates to `os` will reinstall the server.
	Os pulumi.StringPtrInput
	// The name of the os.
	OsName pulumi.StringPtrInput
	// Password used for the installation. May be required depending on used os.
	Password pulumi.StringPtrInput
	// The private networks to attach to the server. For more information, see [the documentation](https://www.scaleway.com/en/docs/compute/elastic-metal/how-to/use-private-networks/)
	PrivateNetworks BareMetalServerPrivateNetworkArrayInput
	// `projectId`) The ID of the project the server is associated with.
	ProjectId pulumi.StringPtrInput
	// If True, this boolean allows to reinstall the server on install config changes.
	// > **Important:** Updates to `sshKeyIds`, `user`, `password`, `serviceUser` or `servicePassword` will not take effect on the server, it requires to reinstall it. To do so please set 'reinstall_on_config_changes' argument to true.
	ReinstallOnConfigChanges pulumi.BoolPtrInput
	// Password used for the service to install. May be required depending on used os.
	ServicePassword pulumi.StringPtrInput
	// User used for the service to install.
	ServiceUser pulumi.StringPtrInput
	// List of SSH keys allowed to connect to the server.
	SshKeyIds pulumi.StringArrayInput
	// The tags associated with the server.
	Tags pulumi.StringArrayInput
	// User used for the installation.
	User pulumi.StringPtrInput
	// `zone`) The zone in which the server should be created.
	Zone pulumi.StringPtrInput
}

func (BareMetalServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*bareMetalServerState)(nil)).Elem()
}

type bareMetalServerArgs struct {
	// A description for the server.
	Description *string `pulumi:"description"`
	// The hostname of the server.
	Hostname *string `pulumi:"hostname"`
	// If True, this boolean allows to create a server without the install config if you want to provide it later.
	InstallConfigAfterward *bool `pulumi:"installConfigAfterward"`
	// The name of the server.
	Name *string `pulumi:"name"`
	// The offer name or UUID of the baremetal server.
	// Use [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-334154) to find the right offer.
	//
	// > **Important:** Updates to `offer` will recreate the server.
	Offer string `pulumi:"offer"`
	// The options to enable on the server.
	// > The `options` block supports:
	Options []BareMetalServerOption `pulumi:"options"`
	// The UUID of the os to install on the server.
	// Use [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-87598a) to find the right OS ID.
	// > **Important:** Updates to `os` will reinstall the server.
	Os *string `pulumi:"os"`
	// Password used for the installation. May be required depending on used os.
	Password *string `pulumi:"password"`
	// The private networks to attach to the server. For more information, see [the documentation](https://www.scaleway.com/en/docs/compute/elastic-metal/how-to/use-private-networks/)
	PrivateNetworks []BareMetalServerPrivateNetwork `pulumi:"privateNetworks"`
	// `projectId`) The ID of the project the server is associated with.
	ProjectId *string `pulumi:"projectId"`
	// If True, this boolean allows to reinstall the server on install config changes.
	// > **Important:** Updates to `sshKeyIds`, `user`, `password`, `serviceUser` or `servicePassword` will not take effect on the server, it requires to reinstall it. To do so please set 'reinstall_on_config_changes' argument to true.
	ReinstallOnConfigChanges *bool `pulumi:"reinstallOnConfigChanges"`
	// Password used for the service to install. May be required depending on used os.
	ServicePassword *string `pulumi:"servicePassword"`
	// User used for the service to install.
	ServiceUser *string `pulumi:"serviceUser"`
	// List of SSH keys allowed to connect to the server.
	SshKeyIds []string `pulumi:"sshKeyIds"`
	// The tags associated with the server.
	Tags []string `pulumi:"tags"`
	// User used for the installation.
	User *string `pulumi:"user"`
	// `zone`) The zone in which the server should be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a BareMetalServer resource.
type BareMetalServerArgs struct {
	// A description for the server.
	Description pulumi.StringPtrInput
	// The hostname of the server.
	Hostname pulumi.StringPtrInput
	// If True, this boolean allows to create a server without the install config if you want to provide it later.
	InstallConfigAfterward pulumi.BoolPtrInput
	// The name of the server.
	Name pulumi.StringPtrInput
	// The offer name or UUID of the baremetal server.
	// Use [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-334154) to find the right offer.
	//
	// > **Important:** Updates to `offer` will recreate the server.
	Offer pulumi.StringInput
	// The options to enable on the server.
	// > The `options` block supports:
	Options BareMetalServerOptionArrayInput
	// The UUID of the os to install on the server.
	// Use [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-87598a) to find the right OS ID.
	// > **Important:** Updates to `os` will reinstall the server.
	Os pulumi.StringPtrInput
	// Password used for the installation. May be required depending on used os.
	Password pulumi.StringPtrInput
	// The private networks to attach to the server. For more information, see [the documentation](https://www.scaleway.com/en/docs/compute/elastic-metal/how-to/use-private-networks/)
	PrivateNetworks BareMetalServerPrivateNetworkArrayInput
	// `projectId`) The ID of the project the server is associated with.
	ProjectId pulumi.StringPtrInput
	// If True, this boolean allows to reinstall the server on install config changes.
	// > **Important:** Updates to `sshKeyIds`, `user`, `password`, `serviceUser` or `servicePassword` will not take effect on the server, it requires to reinstall it. To do so please set 'reinstall_on_config_changes' argument to true.
	ReinstallOnConfigChanges pulumi.BoolPtrInput
	// Password used for the service to install. May be required depending on used os.
	ServicePassword pulumi.StringPtrInput
	// User used for the service to install.
	ServiceUser pulumi.StringPtrInput
	// List of SSH keys allowed to connect to the server.
	SshKeyIds pulumi.StringArrayInput
	// The tags associated with the server.
	Tags pulumi.StringArrayInput
	// User used for the installation.
	User pulumi.StringPtrInput
	// `zone`) The zone in which the server should be created.
	Zone pulumi.StringPtrInput
}

func (BareMetalServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bareMetalServerArgs)(nil)).Elem()
}

type BareMetalServerInput interface {
	pulumi.Input

	ToBareMetalServerOutput() BareMetalServerOutput
	ToBareMetalServerOutputWithContext(ctx context.Context) BareMetalServerOutput
}

func (*BareMetalServer) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalServer)(nil)).Elem()
}

func (i *BareMetalServer) ToBareMetalServerOutput() BareMetalServerOutput {
	return i.ToBareMetalServerOutputWithContext(context.Background())
}

func (i *BareMetalServer) ToBareMetalServerOutputWithContext(ctx context.Context) BareMetalServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalServerOutput)
}

// BareMetalServerArrayInput is an input type that accepts BareMetalServerArray and BareMetalServerArrayOutput values.
// You can construct a concrete instance of `BareMetalServerArrayInput` via:
//
//	BareMetalServerArray{ BareMetalServerArgs{...} }
type BareMetalServerArrayInput interface {
	pulumi.Input

	ToBareMetalServerArrayOutput() BareMetalServerArrayOutput
	ToBareMetalServerArrayOutputWithContext(context.Context) BareMetalServerArrayOutput
}

type BareMetalServerArray []BareMetalServerInput

func (BareMetalServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BareMetalServer)(nil)).Elem()
}

func (i BareMetalServerArray) ToBareMetalServerArrayOutput() BareMetalServerArrayOutput {
	return i.ToBareMetalServerArrayOutputWithContext(context.Background())
}

func (i BareMetalServerArray) ToBareMetalServerArrayOutputWithContext(ctx context.Context) BareMetalServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalServerArrayOutput)
}

// BareMetalServerMapInput is an input type that accepts BareMetalServerMap and BareMetalServerMapOutput values.
// You can construct a concrete instance of `BareMetalServerMapInput` via:
//
//	BareMetalServerMap{ "key": BareMetalServerArgs{...} }
type BareMetalServerMapInput interface {
	pulumi.Input

	ToBareMetalServerMapOutput() BareMetalServerMapOutput
	ToBareMetalServerMapOutputWithContext(context.Context) BareMetalServerMapOutput
}

type BareMetalServerMap map[string]BareMetalServerInput

func (BareMetalServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BareMetalServer)(nil)).Elem()
}

func (i BareMetalServerMap) ToBareMetalServerMapOutput() BareMetalServerMapOutput {
	return i.ToBareMetalServerMapOutputWithContext(context.Background())
}

func (i BareMetalServerMap) ToBareMetalServerMapOutputWithContext(ctx context.Context) BareMetalServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalServerMapOutput)
}

type BareMetalServerOutput struct{ *pulumi.OutputState }

func (BareMetalServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalServer)(nil)).Elem()
}

func (o BareMetalServerOutput) ToBareMetalServerOutput() BareMetalServerOutput {
	return o
}

func (o BareMetalServerOutput) ToBareMetalServerOutputWithContext(ctx context.Context) BareMetalServerOutput {
	return o
}

// A description for the server.
func (o BareMetalServerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BareMetalServer) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The domain of the server.
func (o BareMetalServerOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *BareMetalServer) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// The hostname of the server.
func (o BareMetalServerOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BareMetalServer) pulumi.StringPtrOutput { return v.Hostname }).(pulumi.StringPtrOutput)
}

// If True, this boolean allows to create a server without the install config if you want to provide it later.
func (o BareMetalServerOutput) InstallConfigAfterward() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BareMetalServer) pulumi.BoolPtrOutput { return v.InstallConfigAfterward }).(pulumi.BoolPtrOutput)
}

// (List of) The IPs of the server.
func (o BareMetalServerOutput) Ips() BareMetalServerIpArrayOutput {
	return o.ApplyT(func(v *BareMetalServer) BareMetalServerIpArrayOutput { return v.Ips }).(BareMetalServerIpArrayOutput)
}

// (List of) The IPv4 addresses of the server.
func (o BareMetalServerOutput) Ipv4s() BareMetalServerIpv4ArrayOutput {
	return o.ApplyT(func(v *BareMetalServer) BareMetalServerIpv4ArrayOutput { return v.Ipv4s }).(BareMetalServerIpv4ArrayOutput)
}

// (List of) The IPv6 addresses of the server.
func (o BareMetalServerOutput) Ipv6s() BareMetalServerIpv6ArrayOutput {
	return o.ApplyT(func(v *BareMetalServer) BareMetalServerIpv6ArrayOutput { return v.Ipv6s }).(BareMetalServerIpv6ArrayOutput)
}

// The name of the server.
func (o BareMetalServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BareMetalServer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The offer name or UUID of the baremetal server.
// Use [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-334154) to find the right offer.
//
// > **Important:** Updates to `offer` will recreate the server.
func (o BareMetalServerOutput) Offer() pulumi.StringOutput {
	return o.ApplyT(func(v *BareMetalServer) pulumi.StringOutput { return v.Offer }).(pulumi.StringOutput)
}

// The ID of the offer.
func (o BareMetalServerOutput) OfferId() pulumi.StringOutput {
	return o.ApplyT(func(v *BareMetalServer) pulumi.StringOutput { return v.OfferId }).(pulumi.StringOutput)
}

// The name of the offer.
func (o BareMetalServerOutput) OfferName() pulumi.StringOutput {
	return o.ApplyT(func(v *BareMetalServer) pulumi.StringOutput { return v.OfferName }).(pulumi.StringOutput)
}

// The options to enable on the server.
// > The `options` block supports:
func (o BareMetalServerOutput) Options() BareMetalServerOptionArrayOutput {
	return o.ApplyT(func(v *BareMetalServer) BareMetalServerOptionArrayOutput { return v.Options }).(BareMetalServerOptionArrayOutput)
}

// The organization ID the server is associated with.
func (o BareMetalServerOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *BareMetalServer) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The UUID of the os to install on the server.
// Use [this endpoint](https://developers.scaleway.com/en/products/baremetal/api/#get-87598a) to find the right OS ID.
// > **Important:** Updates to `os` will reinstall the server.
func (o BareMetalServerOutput) Os() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BareMetalServer) pulumi.StringPtrOutput { return v.Os }).(pulumi.StringPtrOutput)
}

// The name of the os.
func (o BareMetalServerOutput) OsName() pulumi.StringOutput {
	return o.ApplyT(func(v *BareMetalServer) pulumi.StringOutput { return v.OsName }).(pulumi.StringOutput)
}

// Password used for the installation. May be required depending on used os.
func (o BareMetalServerOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BareMetalServer) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The private networks to attach to the server. For more information, see [the documentation](https://www.scaleway.com/en/docs/compute/elastic-metal/how-to/use-private-networks/)
func (o BareMetalServerOutput) PrivateNetworks() BareMetalServerPrivateNetworkArrayOutput {
	return o.ApplyT(func(v *BareMetalServer) BareMetalServerPrivateNetworkArrayOutput { return v.PrivateNetworks }).(BareMetalServerPrivateNetworkArrayOutput)
}

// `projectId`) The ID of the project the server is associated with.
func (o BareMetalServerOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *BareMetalServer) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// If True, this boolean allows to reinstall the server on install config changes.
// > **Important:** Updates to `sshKeyIds`, `user`, `password`, `serviceUser` or `servicePassword` will not take effect on the server, it requires to reinstall it. To do so please set 'reinstall_on_config_changes' argument to true.
func (o BareMetalServerOutput) ReinstallOnConfigChanges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BareMetalServer) pulumi.BoolPtrOutput { return v.ReinstallOnConfigChanges }).(pulumi.BoolPtrOutput)
}

// Password used for the service to install. May be required depending on used os.
func (o BareMetalServerOutput) ServicePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BareMetalServer) pulumi.StringPtrOutput { return v.ServicePassword }).(pulumi.StringPtrOutput)
}

// User used for the service to install.
func (o BareMetalServerOutput) ServiceUser() pulumi.StringOutput {
	return o.ApplyT(func(v *BareMetalServer) pulumi.StringOutput { return v.ServiceUser }).(pulumi.StringOutput)
}

// List of SSH keys allowed to connect to the server.
func (o BareMetalServerOutput) SshKeyIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BareMetalServer) pulumi.StringArrayOutput { return v.SshKeyIds }).(pulumi.StringArrayOutput)
}

// The tags associated with the server.
func (o BareMetalServerOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BareMetalServer) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// User used for the installation.
func (o BareMetalServerOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *BareMetalServer) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

// `zone`) The zone in which the server should be created.
func (o BareMetalServerOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *BareMetalServer) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type BareMetalServerArrayOutput struct{ *pulumi.OutputState }

func (BareMetalServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BareMetalServer)(nil)).Elem()
}

func (o BareMetalServerArrayOutput) ToBareMetalServerArrayOutput() BareMetalServerArrayOutput {
	return o
}

func (o BareMetalServerArrayOutput) ToBareMetalServerArrayOutputWithContext(ctx context.Context) BareMetalServerArrayOutput {
	return o
}

func (o BareMetalServerArrayOutput) Index(i pulumi.IntInput) BareMetalServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BareMetalServer {
		return vs[0].([]*BareMetalServer)[vs[1].(int)]
	}).(BareMetalServerOutput)
}

type BareMetalServerMapOutput struct{ *pulumi.OutputState }

func (BareMetalServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BareMetalServer)(nil)).Elem()
}

func (o BareMetalServerMapOutput) ToBareMetalServerMapOutput() BareMetalServerMapOutput {
	return o
}

func (o BareMetalServerMapOutput) ToBareMetalServerMapOutputWithContext(ctx context.Context) BareMetalServerMapOutput {
	return o
}

func (o BareMetalServerMapOutput) MapIndex(k pulumi.StringInput) BareMetalServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BareMetalServer {
		return vs[0].(map[string]*BareMetalServer)[vs[1].(string)]
	}).(BareMetalServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalServerInput)(nil)).Elem(), &BareMetalServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalServerArrayInput)(nil)).Elem(), BareMetalServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalServerMapInput)(nil)).Elem(), BareMetalServerMap{})
	pulumi.RegisterOutputType(BareMetalServerOutput{})
	pulumi.RegisterOutputType(BareMetalServerArrayOutput{})
	pulumi.RegisterOutputType(BareMetalServerMapOutput{})
}
