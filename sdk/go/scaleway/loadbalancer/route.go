// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package loadbalancer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Load-Balancer Routes.
// For more information, see [the documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-route).
//
// ## Example Usage
// ### With SNI for direction to TCP backends
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/loadbalancer"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			ip01, err := loadbalancer.NewIP(ctx, "ip01", nil)
//			if err != nil {
//				return err
//			}
//			lb01, err := loadbalancer.NewLoadBalancer(ctx, "lb01", &loadbalancer.LoadBalancerArgs{
//				IpId: ip01.ID(),
//				Type: pulumi.String("lb-s"),
//			})
//			if err != nil {
//				return err
//			}
//			bkd01, err := loadbalancer.NewBackend(ctx, "bkd01", &loadbalancer.BackendArgs{
//				LbId:            lb01.ID(),
//				ForwardProtocol: pulumi.String("tcp"),
//				ForwardPort:     pulumi.Int(80),
//				ProxyProtocol:   pulumi.String("none"),
//			})
//			if err != nil {
//				return err
//			}
//			frt01, err := loadbalancer.NewFrontend(ctx, "frt01", &loadbalancer.FrontendArgs{
//				LbId:        lb01.ID(),
//				BackendId:   bkd01.ID(),
//				InboundPort: pulumi.Int(80),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = loadbalancer.NewRoute(ctx, "rt01", &loadbalancer.RouteArgs{
//				FrontendId: frt01.ID(),
//				BackendId:  bkd01.ID(),
//				MatchSni:   pulumi.String("sni.scaleway.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### With host-header for direction to HTTP backends
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/loadbalancer"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			ip01, err := loadbalancer.NewIP(ctx, "ip01", nil)
//			if err != nil {
//				return err
//			}
//			lb01, err := loadbalancer.NewLoadBalancer(ctx, "lb01", &loadbalancer.LoadBalancerArgs{
//				IpId: ip01.ID(),
//				Type: pulumi.String("lb-s"),
//			})
//			if err != nil {
//				return err
//			}
//			bkd01, err := loadbalancer.NewBackend(ctx, "bkd01", &loadbalancer.BackendArgs{
//				LbId:            lb01.ID(),
//				ForwardProtocol: pulumi.String("http"),
//				ForwardPort:     pulumi.Int(80),
//				ProxyProtocol:   pulumi.String("none"),
//			})
//			if err != nil {
//				return err
//			}
//			frt01, err := loadbalancer.NewFrontend(ctx, "frt01", &loadbalancer.FrontendArgs{
//				LbId:        lb01.ID(),
//				BackendId:   bkd01.ID(),
//				InboundPort: pulumi.Int(80),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = loadbalancer.NewRoute(ctx, "rt01", &loadbalancer.RouteArgs{
//				FrontendId:      frt01.ID(),
//				BackendId:       bkd01.ID(),
//				MatchHostHeader: pulumi.String("host.scaleway.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Load-Balancer frontend can be imported using the `{zone}/{id}`, e.g. bash
//
// ```sh
//
//	$ pulumi import scaleway:loadbalancer/route:Route main fr-par-1/11111111-1111-1111-1111-111111111111
//
// ```
type Route struct {
	pulumi.CustomResourceState

	// The ID of the backend to which the route is associated.
	BackendId pulumi.StringOutput `pulumi:"backendId"`
	// The date at which the route was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The ID of the frontend to which the route is associated.
	FrontendId pulumi.StringOutput `pulumi:"frontendId"`
	// The HTTP host header to match. Value to match in the HTTP Host request header from an incoming connection.
	// Only one of `matchSni` and `matchHostHeader` should be specified.
	//
	// > **Important:** This field should be set for routes on HTTP Load Balancers.
	MatchHostHeader pulumi.StringPtrOutput `pulumi:"matchHostHeader"`
	// The Server Name Indication (SNI) value to match. Value to match in the Server Name Indication TLS extension (SNI) field from an incoming connection made via an SSL/TLS transport layer.
	// Only one of `matchSni` and `matchHostHeader` should be specified.
	//
	// > **Important:** This field should be set for routes on TCP Load Balancers.
	MatchSni pulumi.StringPtrOutput `pulumi:"matchSni"`
	// The date at which the route was last updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewRoute registers a new resource with the given unique name, arguments, and options.
func NewRoute(ctx *pulumi.Context,
	name string, args *RouteArgs, opts ...pulumi.ResourceOption) (*Route, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackendId == nil {
		return nil, errors.New("invalid value for required argument 'BackendId'")
	}
	if args.FrontendId == nil {
		return nil, errors.New("invalid value for required argument 'FrontendId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Route
	err := ctx.RegisterResource("scaleway:loadbalancer/route:Route", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoute gets an existing Route resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteState, opts ...pulumi.ResourceOption) (*Route, error) {
	var resource Route
	err := ctx.ReadResource("scaleway:loadbalancer/route:Route", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Route resources.
type routeState struct {
	// The ID of the backend to which the route is associated.
	BackendId *string `pulumi:"backendId"`
	// The date at which the route was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The ID of the frontend to which the route is associated.
	FrontendId *string `pulumi:"frontendId"`
	// The HTTP host header to match. Value to match in the HTTP Host request header from an incoming connection.
	// Only one of `matchSni` and `matchHostHeader` should be specified.
	//
	// > **Important:** This field should be set for routes on HTTP Load Balancers.
	MatchHostHeader *string `pulumi:"matchHostHeader"`
	// The Server Name Indication (SNI) value to match. Value to match in the Server Name Indication TLS extension (SNI) field from an incoming connection made via an SSL/TLS transport layer.
	// Only one of `matchSni` and `matchHostHeader` should be specified.
	//
	// > **Important:** This field should be set for routes on TCP Load Balancers.
	MatchSni *string `pulumi:"matchSni"`
	// The date at which the route was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type RouteState struct {
	// The ID of the backend to which the route is associated.
	BackendId pulumi.StringPtrInput
	// The date at which the route was created.
	CreatedAt pulumi.StringPtrInput
	// The ID of the frontend to which the route is associated.
	FrontendId pulumi.StringPtrInput
	// The HTTP host header to match. Value to match in the HTTP Host request header from an incoming connection.
	// Only one of `matchSni` and `matchHostHeader` should be specified.
	//
	// > **Important:** This field should be set for routes on HTTP Load Balancers.
	MatchHostHeader pulumi.StringPtrInput
	// The Server Name Indication (SNI) value to match. Value to match in the Server Name Indication TLS extension (SNI) field from an incoming connection made via an SSL/TLS transport layer.
	// Only one of `matchSni` and `matchHostHeader` should be specified.
	//
	// > **Important:** This field should be set for routes on TCP Load Balancers.
	MatchSni pulumi.StringPtrInput
	// The date at which the route was last updated.
	UpdatedAt pulumi.StringPtrInput
}

func (RouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeState)(nil)).Elem()
}

type routeArgs struct {
	// The ID of the backend to which the route is associated.
	BackendId string `pulumi:"backendId"`
	// The ID of the frontend to which the route is associated.
	FrontendId string `pulumi:"frontendId"`
	// The HTTP host header to match. Value to match in the HTTP Host request header from an incoming connection.
	// Only one of `matchSni` and `matchHostHeader` should be specified.
	//
	// > **Important:** This field should be set for routes on HTTP Load Balancers.
	MatchHostHeader *string `pulumi:"matchHostHeader"`
	// The Server Name Indication (SNI) value to match. Value to match in the Server Name Indication TLS extension (SNI) field from an incoming connection made via an SSL/TLS transport layer.
	// Only one of `matchSni` and `matchHostHeader` should be specified.
	//
	// > **Important:** This field should be set for routes on TCP Load Balancers.
	MatchSni *string `pulumi:"matchSni"`
}

// The set of arguments for constructing a Route resource.
type RouteArgs struct {
	// The ID of the backend to which the route is associated.
	BackendId pulumi.StringInput
	// The ID of the frontend to which the route is associated.
	FrontendId pulumi.StringInput
	// The HTTP host header to match. Value to match in the HTTP Host request header from an incoming connection.
	// Only one of `matchSni` and `matchHostHeader` should be specified.
	//
	// > **Important:** This field should be set for routes on HTTP Load Balancers.
	MatchHostHeader pulumi.StringPtrInput
	// The Server Name Indication (SNI) value to match. Value to match in the Server Name Indication TLS extension (SNI) field from an incoming connection made via an SSL/TLS transport layer.
	// Only one of `matchSni` and `matchHostHeader` should be specified.
	//
	// > **Important:** This field should be set for routes on TCP Load Balancers.
	MatchSni pulumi.StringPtrInput
}

func (RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeArgs)(nil)).Elem()
}

type RouteInput interface {
	pulumi.Input

	ToRouteOutput() RouteOutput
	ToRouteOutputWithContext(ctx context.Context) RouteOutput
}

func (*Route) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (i *Route) ToRouteOutput() RouteOutput {
	return i.ToRouteOutputWithContext(context.Background())
}

func (i *Route) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteOutput)
}

// RouteArrayInput is an input type that accepts RouteArray and RouteArrayOutput values.
// You can construct a concrete instance of `RouteArrayInput` via:
//
//	RouteArray{ RouteArgs{...} }
type RouteArrayInput interface {
	pulumi.Input

	ToRouteArrayOutput() RouteArrayOutput
	ToRouteArrayOutputWithContext(context.Context) RouteArrayOutput
}

type RouteArray []RouteInput

func (RouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Route)(nil)).Elem()
}

func (i RouteArray) ToRouteArrayOutput() RouteArrayOutput {
	return i.ToRouteArrayOutputWithContext(context.Background())
}

func (i RouteArray) ToRouteArrayOutputWithContext(ctx context.Context) RouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteArrayOutput)
}

// RouteMapInput is an input type that accepts RouteMap and RouteMapOutput values.
// You can construct a concrete instance of `RouteMapInput` via:
//
//	RouteMap{ "key": RouteArgs{...} }
type RouteMapInput interface {
	pulumi.Input

	ToRouteMapOutput() RouteMapOutput
	ToRouteMapOutputWithContext(context.Context) RouteMapOutput
}

type RouteMap map[string]RouteInput

func (RouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Route)(nil)).Elem()
}

func (i RouteMap) ToRouteMapOutput() RouteMapOutput {
	return i.ToRouteMapOutputWithContext(context.Background())
}

func (i RouteMap) ToRouteMapOutputWithContext(ctx context.Context) RouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteMapOutput)
}

type RouteOutput struct{ *pulumi.OutputState }

func (RouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (o RouteOutput) ToRouteOutput() RouteOutput {
	return o
}

func (o RouteOutput) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return o
}

// The ID of the backend to which the route is associated.
func (o RouteOutput) BackendId() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.BackendId }).(pulumi.StringOutput)
}

// The date at which the route was created.
func (o RouteOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ID of the frontend to which the route is associated.
func (o RouteOutput) FrontendId() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.FrontendId }).(pulumi.StringOutput)
}

// The HTTP host header to match. Value to match in the HTTP Host request header from an incoming connection.
// Only one of `matchSni` and `matchHostHeader` should be specified.
//
// > **Important:** This field should be set for routes on HTTP Load Balancers.
func (o RouteOutput) MatchHostHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.MatchHostHeader }).(pulumi.StringPtrOutput)
}

// The Server Name Indication (SNI) value to match. Value to match in the Server Name Indication TLS extension (SNI) field from an incoming connection made via an SSL/TLS transport layer.
// Only one of `matchSni` and `matchHostHeader` should be specified.
//
// > **Important:** This field should be set for routes on TCP Load Balancers.
func (o RouteOutput) MatchSni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.MatchSni }).(pulumi.StringPtrOutput)
}

// The date at which the route was last updated.
func (o RouteOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type RouteArrayOutput struct{ *pulumi.OutputState }

func (RouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Route)(nil)).Elem()
}

func (o RouteArrayOutput) ToRouteArrayOutput() RouteArrayOutput {
	return o
}

func (o RouteArrayOutput) ToRouteArrayOutputWithContext(ctx context.Context) RouteArrayOutput {
	return o
}

func (o RouteArrayOutput) Index(i pulumi.IntInput) RouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Route {
		return vs[0].([]*Route)[vs[1].(int)]
	}).(RouteOutput)
}

type RouteMapOutput struct{ *pulumi.OutputState }

func (RouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Route)(nil)).Elem()
}

func (o RouteMapOutput) ToRouteMapOutput() RouteMapOutput {
	return o
}

func (o RouteMapOutput) ToRouteMapOutputWithContext(ctx context.Context) RouteMapOutput {
	return o
}

func (o RouteMapOutput) MapIndex(k pulumi.StringInput) RouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Route {
		return vs[0].(map[string]*Route)[vs[1].(string)]
	}).(RouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteInput)(nil)).Elem(), &Route{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteArrayInput)(nil)).Elem(), RouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteMapInput)(nil)).Elem(), RouteMap{})
	pulumi.RegisterOutputType(RouteOutput{})
	pulumi.RegisterOutputType(RouteArrayOutput{})
	pulumi.RegisterOutputType(RouteMapOutput{})
}
