// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package loadbalancer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Creates and manages Scaleway Load-Balancer Backends.
// For more information, see [the documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-backends).
//
// ## Example Usage
// ### Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/loadbalancer"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := loadbalancer.NewBackend(ctx, "backend01", &loadbalancer.BackendArgs{
//				LbId:            pulumi.Any(scaleway_lb.Lb01.Id),
//				ForwardProtocol: pulumi.String("http"),
//				ForwardPort:     pulumi.Int(80),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### With HTTP Health Check
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/loadbalancer"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := loadbalancer.NewBackend(ctx, "backend01", &loadbalancer.BackendArgs{
//				LbId:            pulumi.Any(scaleway_lb.Lb01.Id),
//				ForwardProtocol: pulumi.String("http"),
//				ForwardPort:     pulumi.Int(80),
//				HealthCheckHttp: &loadbalancer.BackendHealthCheckHttpArgs{
//					Uri: pulumi.String("www.test.com/health"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Load-Balancer backend can be imported using the `{zone}/{id}`, e.g. bash
//
// ```sh
//
//	$ pulumi import scaleway:loadbalancer/backend:Backend backend01 fr-par-1/11111111-1111-1111-1111-111111111111
//
// ```
type Backend struct {
	pulumi.CustomResourceState

	// Scaleway S3 bucket website to be served in case all backend servers are down.
	// > **Note:** Only the host part of the Scaleway S3 bucket website is expected:
	// e.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL is 'https://failover-website.s3-website.fr-par.scw.cloud/'.
	FailoverHost pulumi.StringPtrOutput `pulumi:"failoverHost"`
	// User sessions will be forwarded to this port of backend servers.
	ForwardPort pulumi.IntOutput `pulumi:"forwardPort"`
	// Load balancing algorithm. Possible values are: `roundrobin`, `leastconn` and `first`.
	ForwardPortAlgorithm pulumi.StringPtrOutput `pulumi:"forwardPortAlgorithm"`
	// Backend protocol. Possible values are: `tcp` or `http`.
	ForwardProtocol pulumi.StringOutput `pulumi:"forwardProtocol"`
	// Interval between two HC requests.
	HealthCheckDelay pulumi.StringPtrOutput `pulumi:"healthCheckDelay"`
	// This block enable HTTP health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckHttp BackendHealthCheckHttpPtrOutput `pulumi:"healthCheckHttp"`
	// This block enable HTTPS health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckHttps BackendHealthCheckHttpsPtrOutput `pulumi:"healthCheckHttps"`
	// Number of allowed failed HC requests before the backend server is marked down.
	HealthCheckMaxRetries pulumi.IntPtrOutput `pulumi:"healthCheckMaxRetries"`
	// Port the HC requests will be send to.
	HealthCheckPort pulumi.IntOutput `pulumi:"healthCheckPort"`
	// Defines whether proxy protocol should be activated for the health check.
	HealthCheckSendProxy pulumi.BoolPtrOutput `pulumi:"healthCheckSendProxy"`
	// This block enable TCP health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckTcp BackendHealthCheckTcpOutput `pulumi:"healthCheckTcp"`
	// Timeout before we consider a HC request failed.
	HealthCheckTimeout pulumi.StringPtrOutput `pulumi:"healthCheckTimeout"`
	// The time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN).
	HealthCheckTransientDelay pulumi.StringPtrOutput `pulumi:"healthCheckTransientDelay"`
	// Specifies whether the Load Balancer should check the backend serverâ€™s certificate before initiating a connection.
	IgnoreSslServerVerify pulumi.BoolPtrOutput `pulumi:"ignoreSslServerVerify"`
	// The load-balancer ID this backend is attached to.
	// > **Important:** Updates to `lbId` will recreate the backend.
	LbId pulumi.StringOutput `pulumi:"lbId"`
	// Maximum number of connections allowed per backend server.
	MaxConnections pulumi.IntPtrOutput `pulumi:"maxConnections"`
	// Number of retries when a backend server connection failed.
	MaxRetries pulumi.IntPtrOutput `pulumi:"maxRetries"`
	// The name of the load-balancer backend.
	Name pulumi.StringOutput `pulumi:"name"`
	// Modify what occurs when a backend server is marked down. Possible values are: `none` and `shutdownSessions`.
	OnMarkedDownAction pulumi.StringPtrOutput `pulumi:"onMarkedDownAction"`
	// Choose the type of PROXY protocol to enable (`none`, `v1`, `v2`, `v2Ssl`, `v2SslCn`)
	ProxyProtocol pulumi.StringPtrOutput `pulumi:"proxyProtocol"`
	// Whether to use another backend server on each attempt.
	RedispatchAttemptCount pulumi.IntPtrOutput `pulumi:"redispatchAttemptCount"`
	// DEPRECATED please use `proxyProtocol` instead - (Default: `false`) Enables PROXY protocol version 2.
	//
	// Deprecated: Please use proxy_protocol instead
	SendProxyV2 pulumi.BoolOutput `pulumi:"sendProxyV2"`
	// List of backend server IP addresses. Addresses can be either IPv4 or IPv6.
	ServerIps pulumi.StringArrayOutput `pulumi:"serverIps"`
	// Enables SSL between load balancer and backend servers.
	SslBridging pulumi.BoolPtrOutput `pulumi:"sslBridging"`
	// The type of sticky sessions. The only current possible values are: `none`, `cookie` and `table`.
	StickySessions pulumi.StringPtrOutput `pulumi:"stickySessions"`
	// Cookie name for sticky sessions. Only applicable when stickySessions is set to `cookie`.
	StickySessionsCookieName pulumi.StringPtrOutput `pulumi:"stickySessionsCookieName"`
	// Maximum initial server connection establishment time. (e.g.: `1s`)
	TimeoutConnect pulumi.StringPtrOutput `pulumi:"timeoutConnect"`
	// Maximum time for a request to be left pending in queue when `maxConnections` is reached. (e.g.: `1s`)
	TimeoutQueue pulumi.StringPtrOutput `pulumi:"timeoutQueue"`
	// Maximum server connection inactivity time. (e.g.: `1s`)
	TimeoutServer pulumi.StringPtrOutput `pulumi:"timeoutServer"`
	// Maximum tunnel inactivity time. (e.g.: `1s`)
	TimeoutTunnel pulumi.StringPtrOutput `pulumi:"timeoutTunnel"`
}

// NewBackend registers a new resource with the given unique name, arguments, and options.
func NewBackend(ctx *pulumi.Context,
	name string, args *BackendArgs, opts ...pulumi.ResourceOption) (*Backend, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ForwardPort == nil {
		return nil, errors.New("invalid value for required argument 'ForwardPort'")
	}
	if args.ForwardProtocol == nil {
		return nil, errors.New("invalid value for required argument 'ForwardProtocol'")
	}
	if args.LbId == nil {
		return nil, errors.New("invalid value for required argument 'LbId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Backend
	err := ctx.RegisterResource("scaleway:loadbalancer/backend:Backend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackend gets an existing Backend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackendState, opts ...pulumi.ResourceOption) (*Backend, error) {
	var resource Backend
	err := ctx.ReadResource("scaleway:loadbalancer/backend:Backend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Backend resources.
type backendState struct {
	// Scaleway S3 bucket website to be served in case all backend servers are down.
	// > **Note:** Only the host part of the Scaleway S3 bucket website is expected:
	// e.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL is 'https://failover-website.s3-website.fr-par.scw.cloud/'.
	FailoverHost *string `pulumi:"failoverHost"`
	// User sessions will be forwarded to this port of backend servers.
	ForwardPort *int `pulumi:"forwardPort"`
	// Load balancing algorithm. Possible values are: `roundrobin`, `leastconn` and `first`.
	ForwardPortAlgorithm *string `pulumi:"forwardPortAlgorithm"`
	// Backend protocol. Possible values are: `tcp` or `http`.
	ForwardProtocol *string `pulumi:"forwardProtocol"`
	// Interval between two HC requests.
	HealthCheckDelay *string `pulumi:"healthCheckDelay"`
	// This block enable HTTP health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckHttp *BackendHealthCheckHttp `pulumi:"healthCheckHttp"`
	// This block enable HTTPS health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckHttps *BackendHealthCheckHttps `pulumi:"healthCheckHttps"`
	// Number of allowed failed HC requests before the backend server is marked down.
	HealthCheckMaxRetries *int `pulumi:"healthCheckMaxRetries"`
	// Port the HC requests will be send to.
	HealthCheckPort *int `pulumi:"healthCheckPort"`
	// Defines whether proxy protocol should be activated for the health check.
	HealthCheckSendProxy *bool `pulumi:"healthCheckSendProxy"`
	// This block enable TCP health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckTcp *BackendHealthCheckTcp `pulumi:"healthCheckTcp"`
	// Timeout before we consider a HC request failed.
	HealthCheckTimeout *string `pulumi:"healthCheckTimeout"`
	// The time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN).
	HealthCheckTransientDelay *string `pulumi:"healthCheckTransientDelay"`
	// Specifies whether the Load Balancer should check the backend serverâ€™s certificate before initiating a connection.
	IgnoreSslServerVerify *bool `pulumi:"ignoreSslServerVerify"`
	// The load-balancer ID this backend is attached to.
	// > **Important:** Updates to `lbId` will recreate the backend.
	LbId *string `pulumi:"lbId"`
	// Maximum number of connections allowed per backend server.
	MaxConnections *int `pulumi:"maxConnections"`
	// Number of retries when a backend server connection failed.
	MaxRetries *int `pulumi:"maxRetries"`
	// The name of the load-balancer backend.
	Name *string `pulumi:"name"`
	// Modify what occurs when a backend server is marked down. Possible values are: `none` and `shutdownSessions`.
	OnMarkedDownAction *string `pulumi:"onMarkedDownAction"`
	// Choose the type of PROXY protocol to enable (`none`, `v1`, `v2`, `v2Ssl`, `v2SslCn`)
	ProxyProtocol *string `pulumi:"proxyProtocol"`
	// Whether to use another backend server on each attempt.
	RedispatchAttemptCount *int `pulumi:"redispatchAttemptCount"`
	// DEPRECATED please use `proxyProtocol` instead - (Default: `false`) Enables PROXY protocol version 2.
	//
	// Deprecated: Please use proxy_protocol instead
	SendProxyV2 *bool `pulumi:"sendProxyV2"`
	// List of backend server IP addresses. Addresses can be either IPv4 or IPv6.
	ServerIps []string `pulumi:"serverIps"`
	// Enables SSL between load balancer and backend servers.
	SslBridging *bool `pulumi:"sslBridging"`
	// The type of sticky sessions. The only current possible values are: `none`, `cookie` and `table`.
	StickySessions *string `pulumi:"stickySessions"`
	// Cookie name for sticky sessions. Only applicable when stickySessions is set to `cookie`.
	StickySessionsCookieName *string `pulumi:"stickySessionsCookieName"`
	// Maximum initial server connection establishment time. (e.g.: `1s`)
	TimeoutConnect *string `pulumi:"timeoutConnect"`
	// Maximum time for a request to be left pending in queue when `maxConnections` is reached. (e.g.: `1s`)
	TimeoutQueue *string `pulumi:"timeoutQueue"`
	// Maximum server connection inactivity time. (e.g.: `1s`)
	TimeoutServer *string `pulumi:"timeoutServer"`
	// Maximum tunnel inactivity time. (e.g.: `1s`)
	TimeoutTunnel *string `pulumi:"timeoutTunnel"`
}

type BackendState struct {
	// Scaleway S3 bucket website to be served in case all backend servers are down.
	// > **Note:** Only the host part of the Scaleway S3 bucket website is expected:
	// e.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL is 'https://failover-website.s3-website.fr-par.scw.cloud/'.
	FailoverHost pulumi.StringPtrInput
	// User sessions will be forwarded to this port of backend servers.
	ForwardPort pulumi.IntPtrInput
	// Load balancing algorithm. Possible values are: `roundrobin`, `leastconn` and `first`.
	ForwardPortAlgorithm pulumi.StringPtrInput
	// Backend protocol. Possible values are: `tcp` or `http`.
	ForwardProtocol pulumi.StringPtrInput
	// Interval between two HC requests.
	HealthCheckDelay pulumi.StringPtrInput
	// This block enable HTTP health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckHttp BackendHealthCheckHttpPtrInput
	// This block enable HTTPS health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckHttps BackendHealthCheckHttpsPtrInput
	// Number of allowed failed HC requests before the backend server is marked down.
	HealthCheckMaxRetries pulumi.IntPtrInput
	// Port the HC requests will be send to.
	HealthCheckPort pulumi.IntPtrInput
	// Defines whether proxy protocol should be activated for the health check.
	HealthCheckSendProxy pulumi.BoolPtrInput
	// This block enable TCP health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckTcp BackendHealthCheckTcpPtrInput
	// Timeout before we consider a HC request failed.
	HealthCheckTimeout pulumi.StringPtrInput
	// The time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN).
	HealthCheckTransientDelay pulumi.StringPtrInput
	// Specifies whether the Load Balancer should check the backend serverâ€™s certificate before initiating a connection.
	IgnoreSslServerVerify pulumi.BoolPtrInput
	// The load-balancer ID this backend is attached to.
	// > **Important:** Updates to `lbId` will recreate the backend.
	LbId pulumi.StringPtrInput
	// Maximum number of connections allowed per backend server.
	MaxConnections pulumi.IntPtrInput
	// Number of retries when a backend server connection failed.
	MaxRetries pulumi.IntPtrInput
	// The name of the load-balancer backend.
	Name pulumi.StringPtrInput
	// Modify what occurs when a backend server is marked down. Possible values are: `none` and `shutdownSessions`.
	OnMarkedDownAction pulumi.StringPtrInput
	// Choose the type of PROXY protocol to enable (`none`, `v1`, `v2`, `v2Ssl`, `v2SslCn`)
	ProxyProtocol pulumi.StringPtrInput
	// Whether to use another backend server on each attempt.
	RedispatchAttemptCount pulumi.IntPtrInput
	// DEPRECATED please use `proxyProtocol` instead - (Default: `false`) Enables PROXY protocol version 2.
	//
	// Deprecated: Please use proxy_protocol instead
	SendProxyV2 pulumi.BoolPtrInput
	// List of backend server IP addresses. Addresses can be either IPv4 or IPv6.
	ServerIps pulumi.StringArrayInput
	// Enables SSL between load balancer and backend servers.
	SslBridging pulumi.BoolPtrInput
	// The type of sticky sessions. The only current possible values are: `none`, `cookie` and `table`.
	StickySessions pulumi.StringPtrInput
	// Cookie name for sticky sessions. Only applicable when stickySessions is set to `cookie`.
	StickySessionsCookieName pulumi.StringPtrInput
	// Maximum initial server connection establishment time. (e.g.: `1s`)
	TimeoutConnect pulumi.StringPtrInput
	// Maximum time for a request to be left pending in queue when `maxConnections` is reached. (e.g.: `1s`)
	TimeoutQueue pulumi.StringPtrInput
	// Maximum server connection inactivity time. (e.g.: `1s`)
	TimeoutServer pulumi.StringPtrInput
	// Maximum tunnel inactivity time. (e.g.: `1s`)
	TimeoutTunnel pulumi.StringPtrInput
}

func (BackendState) ElementType() reflect.Type {
	return reflect.TypeOf((*backendState)(nil)).Elem()
}

type backendArgs struct {
	// Scaleway S3 bucket website to be served in case all backend servers are down.
	// > **Note:** Only the host part of the Scaleway S3 bucket website is expected:
	// e.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL is 'https://failover-website.s3-website.fr-par.scw.cloud/'.
	FailoverHost *string `pulumi:"failoverHost"`
	// User sessions will be forwarded to this port of backend servers.
	ForwardPort int `pulumi:"forwardPort"`
	// Load balancing algorithm. Possible values are: `roundrobin`, `leastconn` and `first`.
	ForwardPortAlgorithm *string `pulumi:"forwardPortAlgorithm"`
	// Backend protocol. Possible values are: `tcp` or `http`.
	ForwardProtocol string `pulumi:"forwardProtocol"`
	// Interval between two HC requests.
	HealthCheckDelay *string `pulumi:"healthCheckDelay"`
	// This block enable HTTP health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckHttp *BackendHealthCheckHttp `pulumi:"healthCheckHttp"`
	// This block enable HTTPS health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckHttps *BackendHealthCheckHttps `pulumi:"healthCheckHttps"`
	// Number of allowed failed HC requests before the backend server is marked down.
	HealthCheckMaxRetries *int `pulumi:"healthCheckMaxRetries"`
	// Port the HC requests will be send to.
	HealthCheckPort *int `pulumi:"healthCheckPort"`
	// Defines whether proxy protocol should be activated for the health check.
	HealthCheckSendProxy *bool `pulumi:"healthCheckSendProxy"`
	// This block enable TCP health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckTcp *BackendHealthCheckTcp `pulumi:"healthCheckTcp"`
	// Timeout before we consider a HC request failed.
	HealthCheckTimeout *string `pulumi:"healthCheckTimeout"`
	// The time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN).
	HealthCheckTransientDelay *string `pulumi:"healthCheckTransientDelay"`
	// Specifies whether the Load Balancer should check the backend serverâ€™s certificate before initiating a connection.
	IgnoreSslServerVerify *bool `pulumi:"ignoreSslServerVerify"`
	// The load-balancer ID this backend is attached to.
	// > **Important:** Updates to `lbId` will recreate the backend.
	LbId string `pulumi:"lbId"`
	// Maximum number of connections allowed per backend server.
	MaxConnections *int `pulumi:"maxConnections"`
	// Number of retries when a backend server connection failed.
	MaxRetries *int `pulumi:"maxRetries"`
	// The name of the load-balancer backend.
	Name *string `pulumi:"name"`
	// Modify what occurs when a backend server is marked down. Possible values are: `none` and `shutdownSessions`.
	OnMarkedDownAction *string `pulumi:"onMarkedDownAction"`
	// Choose the type of PROXY protocol to enable (`none`, `v1`, `v2`, `v2Ssl`, `v2SslCn`)
	ProxyProtocol *string `pulumi:"proxyProtocol"`
	// Whether to use another backend server on each attempt.
	RedispatchAttemptCount *int `pulumi:"redispatchAttemptCount"`
	// DEPRECATED please use `proxyProtocol` instead - (Default: `false`) Enables PROXY protocol version 2.
	//
	// Deprecated: Please use proxy_protocol instead
	SendProxyV2 *bool `pulumi:"sendProxyV2"`
	// List of backend server IP addresses. Addresses can be either IPv4 or IPv6.
	ServerIps []string `pulumi:"serverIps"`
	// Enables SSL between load balancer and backend servers.
	SslBridging *bool `pulumi:"sslBridging"`
	// The type of sticky sessions. The only current possible values are: `none`, `cookie` and `table`.
	StickySessions *string `pulumi:"stickySessions"`
	// Cookie name for sticky sessions. Only applicable when stickySessions is set to `cookie`.
	StickySessionsCookieName *string `pulumi:"stickySessionsCookieName"`
	// Maximum initial server connection establishment time. (e.g.: `1s`)
	TimeoutConnect *string `pulumi:"timeoutConnect"`
	// Maximum time for a request to be left pending in queue when `maxConnections` is reached. (e.g.: `1s`)
	TimeoutQueue *string `pulumi:"timeoutQueue"`
	// Maximum server connection inactivity time. (e.g.: `1s`)
	TimeoutServer *string `pulumi:"timeoutServer"`
	// Maximum tunnel inactivity time. (e.g.: `1s`)
	TimeoutTunnel *string `pulumi:"timeoutTunnel"`
}

// The set of arguments for constructing a Backend resource.
type BackendArgs struct {
	// Scaleway S3 bucket website to be served in case all backend servers are down.
	// > **Note:** Only the host part of the Scaleway S3 bucket website is expected:
	// e.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL is 'https://failover-website.s3-website.fr-par.scw.cloud/'.
	FailoverHost pulumi.StringPtrInput
	// User sessions will be forwarded to this port of backend servers.
	ForwardPort pulumi.IntInput
	// Load balancing algorithm. Possible values are: `roundrobin`, `leastconn` and `first`.
	ForwardPortAlgorithm pulumi.StringPtrInput
	// Backend protocol. Possible values are: `tcp` or `http`.
	ForwardProtocol pulumi.StringInput
	// Interval between two HC requests.
	HealthCheckDelay pulumi.StringPtrInput
	// This block enable HTTP health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckHttp BackendHealthCheckHttpPtrInput
	// This block enable HTTPS health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckHttps BackendHealthCheckHttpsPtrInput
	// Number of allowed failed HC requests before the backend server is marked down.
	HealthCheckMaxRetries pulumi.IntPtrInput
	// Port the HC requests will be send to.
	HealthCheckPort pulumi.IntPtrInput
	// Defines whether proxy protocol should be activated for the health check.
	HealthCheckSendProxy pulumi.BoolPtrInput
	// This block enable TCP health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
	HealthCheckTcp BackendHealthCheckTcpPtrInput
	// Timeout before we consider a HC request failed.
	HealthCheckTimeout pulumi.StringPtrInput
	// The time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN).
	HealthCheckTransientDelay pulumi.StringPtrInput
	// Specifies whether the Load Balancer should check the backend serverâ€™s certificate before initiating a connection.
	IgnoreSslServerVerify pulumi.BoolPtrInput
	// The load-balancer ID this backend is attached to.
	// > **Important:** Updates to `lbId` will recreate the backend.
	LbId pulumi.StringInput
	// Maximum number of connections allowed per backend server.
	MaxConnections pulumi.IntPtrInput
	// Number of retries when a backend server connection failed.
	MaxRetries pulumi.IntPtrInput
	// The name of the load-balancer backend.
	Name pulumi.StringPtrInput
	// Modify what occurs when a backend server is marked down. Possible values are: `none` and `shutdownSessions`.
	OnMarkedDownAction pulumi.StringPtrInput
	// Choose the type of PROXY protocol to enable (`none`, `v1`, `v2`, `v2Ssl`, `v2SslCn`)
	ProxyProtocol pulumi.StringPtrInput
	// Whether to use another backend server on each attempt.
	RedispatchAttemptCount pulumi.IntPtrInput
	// DEPRECATED please use `proxyProtocol` instead - (Default: `false`) Enables PROXY protocol version 2.
	//
	// Deprecated: Please use proxy_protocol instead
	SendProxyV2 pulumi.BoolPtrInput
	// List of backend server IP addresses. Addresses can be either IPv4 or IPv6.
	ServerIps pulumi.StringArrayInput
	// Enables SSL between load balancer and backend servers.
	SslBridging pulumi.BoolPtrInput
	// The type of sticky sessions. The only current possible values are: `none`, `cookie` and `table`.
	StickySessions pulumi.StringPtrInput
	// Cookie name for sticky sessions. Only applicable when stickySessions is set to `cookie`.
	StickySessionsCookieName pulumi.StringPtrInput
	// Maximum initial server connection establishment time. (e.g.: `1s`)
	TimeoutConnect pulumi.StringPtrInput
	// Maximum time for a request to be left pending in queue when `maxConnections` is reached. (e.g.: `1s`)
	TimeoutQueue pulumi.StringPtrInput
	// Maximum server connection inactivity time. (e.g.: `1s`)
	TimeoutServer pulumi.StringPtrInput
	// Maximum tunnel inactivity time. (e.g.: `1s`)
	TimeoutTunnel pulumi.StringPtrInput
}

func (BackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backendArgs)(nil)).Elem()
}

type BackendInput interface {
	pulumi.Input

	ToBackendOutput() BackendOutput
	ToBackendOutputWithContext(ctx context.Context) BackendOutput
}

func (*Backend) ElementType() reflect.Type {
	return reflect.TypeOf((**Backend)(nil)).Elem()
}

func (i *Backend) ToBackendOutput() BackendOutput {
	return i.ToBackendOutputWithContext(context.Background())
}

func (i *Backend) ToBackendOutputWithContext(ctx context.Context) BackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendOutput)
}

// BackendArrayInput is an input type that accepts BackendArray and BackendArrayOutput values.
// You can construct a concrete instance of `BackendArrayInput` via:
//
//	BackendArray{ BackendArgs{...} }
type BackendArrayInput interface {
	pulumi.Input

	ToBackendArrayOutput() BackendArrayOutput
	ToBackendArrayOutputWithContext(context.Context) BackendArrayOutput
}

type BackendArray []BackendInput

func (BackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Backend)(nil)).Elem()
}

func (i BackendArray) ToBackendArrayOutput() BackendArrayOutput {
	return i.ToBackendArrayOutputWithContext(context.Background())
}

func (i BackendArray) ToBackendArrayOutputWithContext(ctx context.Context) BackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendArrayOutput)
}

// BackendMapInput is an input type that accepts BackendMap and BackendMapOutput values.
// You can construct a concrete instance of `BackendMapInput` via:
//
//	BackendMap{ "key": BackendArgs{...} }
type BackendMapInput interface {
	pulumi.Input

	ToBackendMapOutput() BackendMapOutput
	ToBackendMapOutputWithContext(context.Context) BackendMapOutput
}

type BackendMap map[string]BackendInput

func (BackendMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Backend)(nil)).Elem()
}

func (i BackendMap) ToBackendMapOutput() BackendMapOutput {
	return i.ToBackendMapOutputWithContext(context.Background())
}

func (i BackendMap) ToBackendMapOutputWithContext(ctx context.Context) BackendMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendMapOutput)
}

type BackendOutput struct{ *pulumi.OutputState }

func (BackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Backend)(nil)).Elem()
}

func (o BackendOutput) ToBackendOutput() BackendOutput {
	return o
}

func (o BackendOutput) ToBackendOutputWithContext(ctx context.Context) BackendOutput {
	return o
}

// Scaleway S3 bucket website to be served in case all backend servers are down.
// > **Note:** Only the host part of the Scaleway S3 bucket website is expected:
// e.g. 'failover-website.s3-website.fr-par.scw.cloud' if your bucket website URL is 'https://failover-website.s3-website.fr-par.scw.cloud/'.
func (o BackendOutput) FailoverHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringPtrOutput { return v.FailoverHost }).(pulumi.StringPtrOutput)
}

// User sessions will be forwarded to this port of backend servers.
func (o BackendOutput) ForwardPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Backend) pulumi.IntOutput { return v.ForwardPort }).(pulumi.IntOutput)
}

// Load balancing algorithm. Possible values are: `roundrobin`, `leastconn` and `first`.
func (o BackendOutput) ForwardPortAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringPtrOutput { return v.ForwardPortAlgorithm }).(pulumi.StringPtrOutput)
}

// Backend protocol. Possible values are: `tcp` or `http`.
func (o BackendOutput) ForwardProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringOutput { return v.ForwardProtocol }).(pulumi.StringOutput)
}

// Interval between two HC requests.
func (o BackendOutput) HealthCheckDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringPtrOutput { return v.HealthCheckDelay }).(pulumi.StringPtrOutput)
}

// This block enable HTTP health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
func (o BackendOutput) HealthCheckHttp() BackendHealthCheckHttpPtrOutput {
	return o.ApplyT(func(v *Backend) BackendHealthCheckHttpPtrOutput { return v.HealthCheckHttp }).(BackendHealthCheckHttpPtrOutput)
}

// This block enable HTTPS health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
func (o BackendOutput) HealthCheckHttps() BackendHealthCheckHttpsPtrOutput {
	return o.ApplyT(func(v *Backend) BackendHealthCheckHttpsPtrOutput { return v.HealthCheckHttps }).(BackendHealthCheckHttpsPtrOutput)
}

// Number of allowed failed HC requests before the backend server is marked down.
func (o BackendOutput) HealthCheckMaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.IntPtrOutput { return v.HealthCheckMaxRetries }).(pulumi.IntPtrOutput)
}

// Port the HC requests will be send to.
func (o BackendOutput) HealthCheckPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Backend) pulumi.IntOutput { return v.HealthCheckPort }).(pulumi.IntOutput)
}

// Defines whether proxy protocol should be activated for the health check.
func (o BackendOutput) HealthCheckSendProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.BoolPtrOutput { return v.HealthCheckSendProxy }).(pulumi.BoolPtrOutput)
}

// This block enable TCP health check. Only one of `healthCheckTcp`, `healthCheckHttp` and `healthCheckHttps` should be specified.
func (o BackendOutput) HealthCheckTcp() BackendHealthCheckTcpOutput {
	return o.ApplyT(func(v *Backend) BackendHealthCheckTcpOutput { return v.HealthCheckTcp }).(BackendHealthCheckTcpOutput)
}

// Timeout before we consider a HC request failed.
func (o BackendOutput) HealthCheckTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringPtrOutput { return v.HealthCheckTimeout }).(pulumi.StringPtrOutput)
}

// The time to wait between two consecutive health checks when a backend server is in a transient state (going UP or DOWN).
func (o BackendOutput) HealthCheckTransientDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringPtrOutput { return v.HealthCheckTransientDelay }).(pulumi.StringPtrOutput)
}

// Specifies whether the Load Balancer should check the backend serverâ€™s certificate before initiating a connection.
func (o BackendOutput) IgnoreSslServerVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.BoolPtrOutput { return v.IgnoreSslServerVerify }).(pulumi.BoolPtrOutput)
}

// The load-balancer ID this backend is attached to.
// > **Important:** Updates to `lbId` will recreate the backend.
func (o BackendOutput) LbId() pulumi.StringOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringOutput { return v.LbId }).(pulumi.StringOutput)
}

// Maximum number of connections allowed per backend server.
func (o BackendOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.IntPtrOutput { return v.MaxConnections }).(pulumi.IntPtrOutput)
}

// Number of retries when a backend server connection failed.
func (o BackendOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.IntPtrOutput { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

// The name of the load-balancer backend.
func (o BackendOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Modify what occurs when a backend server is marked down. Possible values are: `none` and `shutdownSessions`.
func (o BackendOutput) OnMarkedDownAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringPtrOutput { return v.OnMarkedDownAction }).(pulumi.StringPtrOutput)
}

// Choose the type of PROXY protocol to enable (`none`, `v1`, `v2`, `v2Ssl`, `v2SslCn`)
func (o BackendOutput) ProxyProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringPtrOutput { return v.ProxyProtocol }).(pulumi.StringPtrOutput)
}

// Whether to use another backend server on each attempt.
func (o BackendOutput) RedispatchAttemptCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.IntPtrOutput { return v.RedispatchAttemptCount }).(pulumi.IntPtrOutput)
}

// DEPRECATED please use `proxyProtocol` instead - (Default: `false`) Enables PROXY protocol version 2.
//
// Deprecated: Please use proxy_protocol instead
func (o BackendOutput) SendProxyV2() pulumi.BoolOutput {
	return o.ApplyT(func(v *Backend) pulumi.BoolOutput { return v.SendProxyV2 }).(pulumi.BoolOutput)
}

// List of backend server IP addresses. Addresses can be either IPv4 or IPv6.
func (o BackendOutput) ServerIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringArrayOutput { return v.ServerIps }).(pulumi.StringArrayOutput)
}

// Enables SSL between load balancer and backend servers.
func (o BackendOutput) SslBridging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.BoolPtrOutput { return v.SslBridging }).(pulumi.BoolPtrOutput)
}

// The type of sticky sessions. The only current possible values are: `none`, `cookie` and `table`.
func (o BackendOutput) StickySessions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringPtrOutput { return v.StickySessions }).(pulumi.StringPtrOutput)
}

// Cookie name for sticky sessions. Only applicable when stickySessions is set to `cookie`.
func (o BackendOutput) StickySessionsCookieName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringPtrOutput { return v.StickySessionsCookieName }).(pulumi.StringPtrOutput)
}

// Maximum initial server connection establishment time. (e.g.: `1s`)
func (o BackendOutput) TimeoutConnect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringPtrOutput { return v.TimeoutConnect }).(pulumi.StringPtrOutput)
}

// Maximum time for a request to be left pending in queue when `maxConnections` is reached. (e.g.: `1s`)
func (o BackendOutput) TimeoutQueue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringPtrOutput { return v.TimeoutQueue }).(pulumi.StringPtrOutput)
}

// Maximum server connection inactivity time. (e.g.: `1s`)
func (o BackendOutput) TimeoutServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringPtrOutput { return v.TimeoutServer }).(pulumi.StringPtrOutput)
}

// Maximum tunnel inactivity time. (e.g.: `1s`)
func (o BackendOutput) TimeoutTunnel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backend) pulumi.StringPtrOutput { return v.TimeoutTunnel }).(pulumi.StringPtrOutput)
}

type BackendArrayOutput struct{ *pulumi.OutputState }

func (BackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Backend)(nil)).Elem()
}

func (o BackendArrayOutput) ToBackendArrayOutput() BackendArrayOutput {
	return o
}

func (o BackendArrayOutput) ToBackendArrayOutputWithContext(ctx context.Context) BackendArrayOutput {
	return o
}

func (o BackendArrayOutput) Index(i pulumi.IntInput) BackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Backend {
		return vs[0].([]*Backend)[vs[1].(int)]
	}).(BackendOutput)
}

type BackendMapOutput struct{ *pulumi.OutputState }

func (BackendMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Backend)(nil)).Elem()
}

func (o BackendMapOutput) ToBackendMapOutput() BackendMapOutput {
	return o
}

func (o BackendMapOutput) ToBackendMapOutputWithContext(ctx context.Context) BackendMapOutput {
	return o
}

func (o BackendMapOutput) MapIndex(k pulumi.StringInput) BackendOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Backend {
		return vs[0].(map[string]*Backend)[vs[1].(string)]
	}).(BackendOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackendInput)(nil)).Elem(), &Backend{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendArrayInput)(nil)).Elem(), BackendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendMapInput)(nil)).Elem(), BackendMap{})
	pulumi.RegisterOutputType(BackendOutput{})
	pulumi.RegisterOutputType(BackendArrayOutput{})
	pulumi.RegisterOutputType(BackendMapOutput{})
}
