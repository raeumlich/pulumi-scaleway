// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package loadbalancer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Get information about Scaleway Load-Balancer Backends.
// For more information, see [the documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-backends).
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/loadbalancer"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			mainIP, err := loadbalancer.NewIP(ctx, "mainIP", nil)
//			if err != nil {
//				return err
//			}
//			mainLoadBalancer, err := loadbalancer.NewLoadBalancer(ctx, "mainLoadBalancer", &loadbalancer.LoadBalancerArgs{
//				IpId: mainIP.ID(),
//				Type: pulumi.String("LB-S"),
//			})
//			if err != nil {
//				return err
//			}
//			mainBackend, err := loadbalancer.NewBackend(ctx, "mainBackend", &loadbalancer.BackendArgs{
//				LbId:            mainLoadBalancer.ID(),
//				ForwardProtocol: pulumi.String("http"),
//				ForwardPort:     pulumi.Int(80),
//			})
//			if err != nil {
//				return err
//			}
//			_ = loadbalancer.LookupBackendOutput(ctx, loadbalancer.GetBackendOutputArgs{
//				BackendId: mainBackend.ID(),
//			}, nil)
//			_ = loadbalancer.LookupBackendOutput(ctx, loadbalancer.GetBackendOutputArgs{
//				Name: mainBackend.Name,
//				LbId: mainLoadBalancer.ID(),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupBackend(ctx *pulumi.Context, args *LookupBackendArgs, opts ...pulumi.InvokeOption) (*LookupBackendResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupBackendResult
	err := ctx.Invoke("scaleway:loadbalancer/getBackend:getBackend", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBackend.
type LookupBackendArgs struct {
	// The backend id.
	// - Only one of `name` and `backendId` should be specified.
	BackendId *string `pulumi:"backendId"`
	// The load-balancer ID this backend is attached to.
	LbId *string `pulumi:"lbId"`
	// The name of the backend.
	// - When using the `name` you should specify the `lb-id`
	Name *string `pulumi:"name"`
}

// A collection of values returned by getBackend.
type LookupBackendResult struct {
	BackendId                 *string                     `pulumi:"backendId"`
	FailoverHost              string                      `pulumi:"failoverHost"`
	ForwardPort               int                         `pulumi:"forwardPort"`
	ForwardPortAlgorithm      string                      `pulumi:"forwardPortAlgorithm"`
	ForwardProtocol           string                      `pulumi:"forwardProtocol"`
	HealthCheckDelay          string                      `pulumi:"healthCheckDelay"`
	HealthCheckHttp           []GetBackendHealthCheckHttp `pulumi:"healthCheckHttp"`
	HealthCheckHttps          []GetBackendHealthCheckHttp `pulumi:"healthCheckHttps"`
	HealthCheckMaxRetries     int                         `pulumi:"healthCheckMaxRetries"`
	HealthCheckPort           int                         `pulumi:"healthCheckPort"`
	HealthCheckSendProxy      bool                        `pulumi:"healthCheckSendProxy"`
	HealthCheckTcps           []GetBackendHealthCheckTcp  `pulumi:"healthCheckTcps"`
	HealthCheckTimeout        string                      `pulumi:"healthCheckTimeout"`
	HealthCheckTransientDelay string                      `pulumi:"healthCheckTransientDelay"`
	// The provider-assigned unique ID for this managed resource.
	Id                       string   `pulumi:"id"`
	IgnoreSslServerVerify    bool     `pulumi:"ignoreSslServerVerify"`
	LbId                     *string  `pulumi:"lbId"`
	MaxConnections           int      `pulumi:"maxConnections"`
	MaxRetries               int      `pulumi:"maxRetries"`
	Name                     *string  `pulumi:"name"`
	OnMarkedDownAction       string   `pulumi:"onMarkedDownAction"`
	ProxyProtocol            string   `pulumi:"proxyProtocol"`
	RedispatchAttemptCount   int      `pulumi:"redispatchAttemptCount"`
	SendProxyV2              bool     `pulumi:"sendProxyV2"`
	ServerIps                []string `pulumi:"serverIps"`
	SslBridging              bool     `pulumi:"sslBridging"`
	StickySessions           string   `pulumi:"stickySessions"`
	StickySessionsCookieName string   `pulumi:"stickySessionsCookieName"`
	TimeoutConnect           string   `pulumi:"timeoutConnect"`
	TimeoutQueue             string   `pulumi:"timeoutQueue"`
	TimeoutServer            string   `pulumi:"timeoutServer"`
	TimeoutTunnel            string   `pulumi:"timeoutTunnel"`
}

func LookupBackendOutput(ctx *pulumi.Context, args LookupBackendOutputArgs, opts ...pulumi.InvokeOption) LookupBackendResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupBackendResult, error) {
			args := v.(LookupBackendArgs)
			r, err := LookupBackend(ctx, &args, opts...)
			var s LookupBackendResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupBackendResultOutput)
}

// A collection of arguments for invoking getBackend.
type LookupBackendOutputArgs struct {
	// The backend id.
	// - Only one of `name` and `backendId` should be specified.
	BackendId pulumi.StringPtrInput `pulumi:"backendId"`
	// The load-balancer ID this backend is attached to.
	LbId pulumi.StringPtrInput `pulumi:"lbId"`
	// The name of the backend.
	// - When using the `name` you should specify the `lb-id`
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupBackendOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBackendArgs)(nil)).Elem()
}

// A collection of values returned by getBackend.
type LookupBackendResultOutput struct{ *pulumi.OutputState }

func (LookupBackendResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBackendResult)(nil)).Elem()
}

func (o LookupBackendResultOutput) ToLookupBackendResultOutput() LookupBackendResultOutput {
	return o
}

func (o LookupBackendResultOutput) ToLookupBackendResultOutputWithContext(ctx context.Context) LookupBackendResultOutput {
	return o
}

func (o LookupBackendResultOutput) BackendId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBackendResult) *string { return v.BackendId }).(pulumi.StringPtrOutput)
}

func (o LookupBackendResultOutput) FailoverHost() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackendResult) string { return v.FailoverHost }).(pulumi.StringOutput)
}

func (o LookupBackendResultOutput) ForwardPort() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBackendResult) int { return v.ForwardPort }).(pulumi.IntOutput)
}

func (o LookupBackendResultOutput) ForwardPortAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackendResult) string { return v.ForwardPortAlgorithm }).(pulumi.StringOutput)
}

func (o LookupBackendResultOutput) ForwardProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackendResult) string { return v.ForwardProtocol }).(pulumi.StringOutput)
}

func (o LookupBackendResultOutput) HealthCheckDelay() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackendResult) string { return v.HealthCheckDelay }).(pulumi.StringOutput)
}

func (o LookupBackendResultOutput) HealthCheckHttp() GetBackendHealthCheckHttpArrayOutput {
	return o.ApplyT(func(v LookupBackendResult) []GetBackendHealthCheckHttp { return v.HealthCheckHttp }).(GetBackendHealthCheckHttpArrayOutput)
}

func (o LookupBackendResultOutput) HealthCheckHttps() GetBackendHealthCheckHttpArrayOutput {
	return o.ApplyT(func(v LookupBackendResult) []GetBackendHealthCheckHttp { return v.HealthCheckHttps }).(GetBackendHealthCheckHttpArrayOutput)
}

func (o LookupBackendResultOutput) HealthCheckMaxRetries() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBackendResult) int { return v.HealthCheckMaxRetries }).(pulumi.IntOutput)
}

func (o LookupBackendResultOutput) HealthCheckPort() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBackendResult) int { return v.HealthCheckPort }).(pulumi.IntOutput)
}

func (o LookupBackendResultOutput) HealthCheckSendProxy() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBackendResult) bool { return v.HealthCheckSendProxy }).(pulumi.BoolOutput)
}

func (o LookupBackendResultOutput) HealthCheckTcps() GetBackendHealthCheckTcpArrayOutput {
	return o.ApplyT(func(v LookupBackendResult) []GetBackendHealthCheckTcp { return v.HealthCheckTcps }).(GetBackendHealthCheckTcpArrayOutput)
}

func (o LookupBackendResultOutput) HealthCheckTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackendResult) string { return v.HealthCheckTimeout }).(pulumi.StringOutput)
}

func (o LookupBackendResultOutput) HealthCheckTransientDelay() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackendResult) string { return v.HealthCheckTransientDelay }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupBackendResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackendResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupBackendResultOutput) IgnoreSslServerVerify() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBackendResult) bool { return v.IgnoreSslServerVerify }).(pulumi.BoolOutput)
}

func (o LookupBackendResultOutput) LbId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBackendResult) *string { return v.LbId }).(pulumi.StringPtrOutput)
}

func (o LookupBackendResultOutput) MaxConnections() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBackendResult) int { return v.MaxConnections }).(pulumi.IntOutput)
}

func (o LookupBackendResultOutput) MaxRetries() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBackendResult) int { return v.MaxRetries }).(pulumi.IntOutput)
}

func (o LookupBackendResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBackendResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupBackendResultOutput) OnMarkedDownAction() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackendResult) string { return v.OnMarkedDownAction }).(pulumi.StringOutput)
}

func (o LookupBackendResultOutput) ProxyProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackendResult) string { return v.ProxyProtocol }).(pulumi.StringOutput)
}

func (o LookupBackendResultOutput) RedispatchAttemptCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBackendResult) int { return v.RedispatchAttemptCount }).(pulumi.IntOutput)
}

func (o LookupBackendResultOutput) SendProxyV2() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBackendResult) bool { return v.SendProxyV2 }).(pulumi.BoolOutput)
}

func (o LookupBackendResultOutput) ServerIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupBackendResult) []string { return v.ServerIps }).(pulumi.StringArrayOutput)
}

func (o LookupBackendResultOutput) SslBridging() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBackendResult) bool { return v.SslBridging }).(pulumi.BoolOutput)
}

func (o LookupBackendResultOutput) StickySessions() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackendResult) string { return v.StickySessions }).(pulumi.StringOutput)
}

func (o LookupBackendResultOutput) StickySessionsCookieName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackendResult) string { return v.StickySessionsCookieName }).(pulumi.StringOutput)
}

func (o LookupBackendResultOutput) TimeoutConnect() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackendResult) string { return v.TimeoutConnect }).(pulumi.StringOutput)
}

func (o LookupBackendResultOutput) TimeoutQueue() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackendResult) string { return v.TimeoutQueue }).(pulumi.StringOutput)
}

func (o LookupBackendResultOutput) TimeoutServer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackendResult) string { return v.TimeoutServer }).(pulumi.StringOutput)
}

func (o LookupBackendResultOutput) TimeoutTunnel() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackendResult) string { return v.TimeoutTunnel }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBackendResultOutput{})
}
