// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package loadbalancer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

var _ = internal.GetEnvOrDefault

type ACLAction struct {
	// Redirect parameters when using an ACL with `redirect` action.
	Redirects []ACLActionRedirect `pulumi:"redirects"`
	// The redirect type. Possible values are: `location` or `scheme`.
	Type string `pulumi:"type"`
}

// ACLActionInput is an input type that accepts ACLActionArgs and ACLActionOutput values.
// You can construct a concrete instance of `ACLActionInput` via:
//
//	ACLActionArgs{...}
type ACLActionInput interface {
	pulumi.Input

	ToACLActionOutput() ACLActionOutput
	ToACLActionOutputWithContext(context.Context) ACLActionOutput
}

type ACLActionArgs struct {
	// Redirect parameters when using an ACL with `redirect` action.
	Redirects ACLActionRedirectArrayInput `pulumi:"redirects"`
	// The redirect type. Possible values are: `location` or `scheme`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ACLActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACLAction)(nil)).Elem()
}

func (i ACLActionArgs) ToACLActionOutput() ACLActionOutput {
	return i.ToACLActionOutputWithContext(context.Background())
}

func (i ACLActionArgs) ToACLActionOutputWithContext(ctx context.Context) ACLActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACLActionOutput)
}

func (i ACLActionArgs) ToACLActionPtrOutput() ACLActionPtrOutput {
	return i.ToACLActionPtrOutputWithContext(context.Background())
}

func (i ACLActionArgs) ToACLActionPtrOutputWithContext(ctx context.Context) ACLActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACLActionOutput).ToACLActionPtrOutputWithContext(ctx)
}

// ACLActionPtrInput is an input type that accepts ACLActionArgs, ACLActionPtr and ACLActionPtrOutput values.
// You can construct a concrete instance of `ACLActionPtrInput` via:
//
//	        ACLActionArgs{...}
//
//	or:
//
//	        nil
type ACLActionPtrInput interface {
	pulumi.Input

	ToACLActionPtrOutput() ACLActionPtrOutput
	ToACLActionPtrOutputWithContext(context.Context) ACLActionPtrOutput
}

type aclactionPtrType ACLActionArgs

func ACLActionPtr(v *ACLActionArgs) ACLActionPtrInput {
	return (*aclactionPtrType)(v)
}

func (*aclactionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACLAction)(nil)).Elem()
}

func (i *aclactionPtrType) ToACLActionPtrOutput() ACLActionPtrOutput {
	return i.ToACLActionPtrOutputWithContext(context.Background())
}

func (i *aclactionPtrType) ToACLActionPtrOutputWithContext(ctx context.Context) ACLActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACLActionPtrOutput)
}

type ACLActionOutput struct{ *pulumi.OutputState }

func (ACLActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACLAction)(nil)).Elem()
}

func (o ACLActionOutput) ToACLActionOutput() ACLActionOutput {
	return o
}

func (o ACLActionOutput) ToACLActionOutputWithContext(ctx context.Context) ACLActionOutput {
	return o
}

func (o ACLActionOutput) ToACLActionPtrOutput() ACLActionPtrOutput {
	return o.ToACLActionPtrOutputWithContext(context.Background())
}

func (o ACLActionOutput) ToACLActionPtrOutputWithContext(ctx context.Context) ACLActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACLAction) *ACLAction {
		return &v
	}).(ACLActionPtrOutput)
}

// Redirect parameters when using an ACL with `redirect` action.
func (o ACLActionOutput) Redirects() ACLActionRedirectArrayOutput {
	return o.ApplyT(func(v ACLAction) []ACLActionRedirect { return v.Redirects }).(ACLActionRedirectArrayOutput)
}

// The redirect type. Possible values are: `location` or `scheme`.
func (o ACLActionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ACLAction) string { return v.Type }).(pulumi.StringOutput)
}

type ACLActionPtrOutput struct{ *pulumi.OutputState }

func (ACLActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACLAction)(nil)).Elem()
}

func (o ACLActionPtrOutput) ToACLActionPtrOutput() ACLActionPtrOutput {
	return o
}

func (o ACLActionPtrOutput) ToACLActionPtrOutputWithContext(ctx context.Context) ACLActionPtrOutput {
	return o
}

func (o ACLActionPtrOutput) Elem() ACLActionOutput {
	return o.ApplyT(func(v *ACLAction) ACLAction {
		if v != nil {
			return *v
		}
		var ret ACLAction
		return ret
	}).(ACLActionOutput)
}

// Redirect parameters when using an ACL with `redirect` action.
func (o ACLActionPtrOutput) Redirects() ACLActionRedirectArrayOutput {
	return o.ApplyT(func(v *ACLAction) []ACLActionRedirect {
		if v == nil {
			return nil
		}
		return v.Redirects
	}).(ACLActionRedirectArrayOutput)
}

// The redirect type. Possible values are: `location` or `scheme`.
func (o ACLActionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACLAction) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ACLActionRedirect struct {
	// The HTTP redirect code to use. Valid values are `301`, `302`, `303`, `307` and `308`.
	Code *int `pulumi:"code"`
	// An URL can be used in case of a location redirect (e.g. `https://scaleway.com` will redirect to this same URL). A scheme name (e.g. `https`, `http`, `ftp`, `git`) will replace the request's original scheme.
	Target *string `pulumi:"target"`
	// The redirect type. Possible values are: `location` or `scheme`.
	Type *string `pulumi:"type"`
}

// ACLActionRedirectInput is an input type that accepts ACLActionRedirectArgs and ACLActionRedirectOutput values.
// You can construct a concrete instance of `ACLActionRedirectInput` via:
//
//	ACLActionRedirectArgs{...}
type ACLActionRedirectInput interface {
	pulumi.Input

	ToACLActionRedirectOutput() ACLActionRedirectOutput
	ToACLActionRedirectOutputWithContext(context.Context) ACLActionRedirectOutput
}

type ACLActionRedirectArgs struct {
	// The HTTP redirect code to use. Valid values are `301`, `302`, `303`, `307` and `308`.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// An URL can be used in case of a location redirect (e.g. `https://scaleway.com` will redirect to this same URL). A scheme name (e.g. `https`, `http`, `ftp`, `git`) will replace the request's original scheme.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// The redirect type. Possible values are: `location` or `scheme`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ACLActionRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACLActionRedirect)(nil)).Elem()
}

func (i ACLActionRedirectArgs) ToACLActionRedirectOutput() ACLActionRedirectOutput {
	return i.ToACLActionRedirectOutputWithContext(context.Background())
}

func (i ACLActionRedirectArgs) ToACLActionRedirectOutputWithContext(ctx context.Context) ACLActionRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACLActionRedirectOutput)
}

// ACLActionRedirectArrayInput is an input type that accepts ACLActionRedirectArray and ACLActionRedirectArrayOutput values.
// You can construct a concrete instance of `ACLActionRedirectArrayInput` via:
//
//	ACLActionRedirectArray{ ACLActionRedirectArgs{...} }
type ACLActionRedirectArrayInput interface {
	pulumi.Input

	ToACLActionRedirectArrayOutput() ACLActionRedirectArrayOutput
	ToACLActionRedirectArrayOutputWithContext(context.Context) ACLActionRedirectArrayOutput
}

type ACLActionRedirectArray []ACLActionRedirectInput

func (ACLActionRedirectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ACLActionRedirect)(nil)).Elem()
}

func (i ACLActionRedirectArray) ToACLActionRedirectArrayOutput() ACLActionRedirectArrayOutput {
	return i.ToACLActionRedirectArrayOutputWithContext(context.Background())
}

func (i ACLActionRedirectArray) ToACLActionRedirectArrayOutputWithContext(ctx context.Context) ACLActionRedirectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACLActionRedirectArrayOutput)
}

type ACLActionRedirectOutput struct{ *pulumi.OutputState }

func (ACLActionRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACLActionRedirect)(nil)).Elem()
}

func (o ACLActionRedirectOutput) ToACLActionRedirectOutput() ACLActionRedirectOutput {
	return o
}

func (o ACLActionRedirectOutput) ToACLActionRedirectOutputWithContext(ctx context.Context) ACLActionRedirectOutput {
	return o
}

// The HTTP redirect code to use. Valid values are `301`, `302`, `303`, `307` and `308`.
func (o ACLActionRedirectOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ACLActionRedirect) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// An URL can be used in case of a location redirect (e.g. `https://scaleway.com` will redirect to this same URL). A scheme name (e.g. `https`, `http`, `ftp`, `git`) will replace the request's original scheme.
func (o ACLActionRedirectOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACLActionRedirect) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// The redirect type. Possible values are: `location` or `scheme`.
func (o ACLActionRedirectOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACLActionRedirect) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ACLActionRedirectArrayOutput struct{ *pulumi.OutputState }

func (ACLActionRedirectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ACLActionRedirect)(nil)).Elem()
}

func (o ACLActionRedirectArrayOutput) ToACLActionRedirectArrayOutput() ACLActionRedirectArrayOutput {
	return o
}

func (o ACLActionRedirectArrayOutput) ToACLActionRedirectArrayOutputWithContext(ctx context.Context) ACLActionRedirectArrayOutput {
	return o
}

func (o ACLActionRedirectArrayOutput) Index(i pulumi.IntInput) ACLActionRedirectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ACLActionRedirect {
		return vs[0].([]ACLActionRedirect)[vs[1].(int)]
	}).(ACLActionRedirectOutput)
}

type ACLMatch struct {
	// The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.
	// It extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).
	// Possible values are: `aclHttpFilterNone`, `pathBegin`, `pathEnd`, `httpHeaderMatch` or `regex`.
	HttpFilter *string `pulumi:"httpFilter"`
	// If you have `httpFilter` at `httpHeaderMatch`, you can use this field to filter on the HTTP header's value.
	HttpFilterOption *string `pulumi:"httpFilterOption"`
	// A list of possible values to match for the given HTTP filter.
	// Keep in mind that in the case of `httpHeaderMatch` the HTTP header field name is case-insensitive.
	HttpFilterValues []string `pulumi:"httpFilterValues"`
	// If set to `true`, the condition will be of type "unless".
	Invert *bool `pulumi:"invert"`
	// A list of IPs or CIDR v4/v6 addresses of the client of the session to match.
	IpSubnets []string `pulumi:"ipSubnets"`
}

// ACLMatchInput is an input type that accepts ACLMatchArgs and ACLMatchOutput values.
// You can construct a concrete instance of `ACLMatchInput` via:
//
//	ACLMatchArgs{...}
type ACLMatchInput interface {
	pulumi.Input

	ToACLMatchOutput() ACLMatchOutput
	ToACLMatchOutputWithContext(context.Context) ACLMatchOutput
}

type ACLMatchArgs struct {
	// The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.
	// It extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).
	// Possible values are: `aclHttpFilterNone`, `pathBegin`, `pathEnd`, `httpHeaderMatch` or `regex`.
	HttpFilter pulumi.StringPtrInput `pulumi:"httpFilter"`
	// If you have `httpFilter` at `httpHeaderMatch`, you can use this field to filter on the HTTP header's value.
	HttpFilterOption pulumi.StringPtrInput `pulumi:"httpFilterOption"`
	// A list of possible values to match for the given HTTP filter.
	// Keep in mind that in the case of `httpHeaderMatch` the HTTP header field name is case-insensitive.
	HttpFilterValues pulumi.StringArrayInput `pulumi:"httpFilterValues"`
	// If set to `true`, the condition will be of type "unless".
	Invert pulumi.BoolPtrInput `pulumi:"invert"`
	// A list of IPs or CIDR v4/v6 addresses of the client of the session to match.
	IpSubnets pulumi.StringArrayInput `pulumi:"ipSubnets"`
}

func (ACLMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACLMatch)(nil)).Elem()
}

func (i ACLMatchArgs) ToACLMatchOutput() ACLMatchOutput {
	return i.ToACLMatchOutputWithContext(context.Background())
}

func (i ACLMatchArgs) ToACLMatchOutputWithContext(ctx context.Context) ACLMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACLMatchOutput)
}

func (i ACLMatchArgs) ToACLMatchPtrOutput() ACLMatchPtrOutput {
	return i.ToACLMatchPtrOutputWithContext(context.Background())
}

func (i ACLMatchArgs) ToACLMatchPtrOutputWithContext(ctx context.Context) ACLMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACLMatchOutput).ToACLMatchPtrOutputWithContext(ctx)
}

// ACLMatchPtrInput is an input type that accepts ACLMatchArgs, ACLMatchPtr and ACLMatchPtrOutput values.
// You can construct a concrete instance of `ACLMatchPtrInput` via:
//
//	        ACLMatchArgs{...}
//
//	or:
//
//	        nil
type ACLMatchPtrInput interface {
	pulumi.Input

	ToACLMatchPtrOutput() ACLMatchPtrOutput
	ToACLMatchPtrOutputWithContext(context.Context) ACLMatchPtrOutput
}

type aclmatchPtrType ACLMatchArgs

func ACLMatchPtr(v *ACLMatchArgs) ACLMatchPtrInput {
	return (*aclmatchPtrType)(v)
}

func (*aclmatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACLMatch)(nil)).Elem()
}

func (i *aclmatchPtrType) ToACLMatchPtrOutput() ACLMatchPtrOutput {
	return i.ToACLMatchPtrOutputWithContext(context.Background())
}

func (i *aclmatchPtrType) ToACLMatchPtrOutputWithContext(ctx context.Context) ACLMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACLMatchPtrOutput)
}

type ACLMatchOutput struct{ *pulumi.OutputState }

func (ACLMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACLMatch)(nil)).Elem()
}

func (o ACLMatchOutput) ToACLMatchOutput() ACLMatchOutput {
	return o
}

func (o ACLMatchOutput) ToACLMatchOutputWithContext(ctx context.Context) ACLMatchOutput {
	return o
}

func (o ACLMatchOutput) ToACLMatchPtrOutput() ACLMatchPtrOutput {
	return o.ToACLMatchPtrOutputWithContext(context.Background())
}

func (o ACLMatchOutput) ToACLMatchPtrOutputWithContext(ctx context.Context) ACLMatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACLMatch) *ACLMatch {
		return &v
	}).(ACLMatchPtrOutput)
}

// The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.
// It extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).
// Possible values are: `aclHttpFilterNone`, `pathBegin`, `pathEnd`, `httpHeaderMatch` or `regex`.
func (o ACLMatchOutput) HttpFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACLMatch) *string { return v.HttpFilter }).(pulumi.StringPtrOutput)
}

// If you have `httpFilter` at `httpHeaderMatch`, you can use this field to filter on the HTTP header's value.
func (o ACLMatchOutput) HttpFilterOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACLMatch) *string { return v.HttpFilterOption }).(pulumi.StringPtrOutput)
}

// A list of possible values to match for the given HTTP filter.
// Keep in mind that in the case of `httpHeaderMatch` the HTTP header field name is case-insensitive.
func (o ACLMatchOutput) HttpFilterValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ACLMatch) []string { return v.HttpFilterValues }).(pulumi.StringArrayOutput)
}

// If set to `true`, the condition will be of type "unless".
func (o ACLMatchOutput) Invert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ACLMatch) *bool { return v.Invert }).(pulumi.BoolPtrOutput)
}

// A list of IPs or CIDR v4/v6 addresses of the client of the session to match.
func (o ACLMatchOutput) IpSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ACLMatch) []string { return v.IpSubnets }).(pulumi.StringArrayOutput)
}

type ACLMatchPtrOutput struct{ *pulumi.OutputState }

func (ACLMatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACLMatch)(nil)).Elem()
}

func (o ACLMatchPtrOutput) ToACLMatchPtrOutput() ACLMatchPtrOutput {
	return o
}

func (o ACLMatchPtrOutput) ToACLMatchPtrOutputWithContext(ctx context.Context) ACLMatchPtrOutput {
	return o
}

func (o ACLMatchPtrOutput) Elem() ACLMatchOutput {
	return o.ApplyT(func(v *ACLMatch) ACLMatch {
		if v != nil {
			return *v
		}
		var ret ACLMatch
		return ret
	}).(ACLMatchOutput)
}

// The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.
// It extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).
// Possible values are: `aclHttpFilterNone`, `pathBegin`, `pathEnd`, `httpHeaderMatch` or `regex`.
func (o ACLMatchPtrOutput) HttpFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACLMatch) *string {
		if v == nil {
			return nil
		}
		return v.HttpFilter
	}).(pulumi.StringPtrOutput)
}

// If you have `httpFilter` at `httpHeaderMatch`, you can use this field to filter on the HTTP header's value.
func (o ACLMatchPtrOutput) HttpFilterOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACLMatch) *string {
		if v == nil {
			return nil
		}
		return v.HttpFilterOption
	}).(pulumi.StringPtrOutput)
}

// A list of possible values to match for the given HTTP filter.
// Keep in mind that in the case of `httpHeaderMatch` the HTTP header field name is case-insensitive.
func (o ACLMatchPtrOutput) HttpFilterValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ACLMatch) []string {
		if v == nil {
			return nil
		}
		return v.HttpFilterValues
	}).(pulumi.StringArrayOutput)
}

// If set to `true`, the condition will be of type "unless".
func (o ACLMatchPtrOutput) Invert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ACLMatch) *bool {
		if v == nil {
			return nil
		}
		return v.Invert
	}).(pulumi.BoolPtrOutput)
}

// A list of IPs or CIDR v4/v6 addresses of the client of the session to match.
func (o ACLMatchPtrOutput) IpSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ACLMatch) []string {
		if v == nil {
			return nil
		}
		return v.IpSubnets
	}).(pulumi.StringArrayOutput)
}

type BackendHealthCheckHttp struct {
	// The expected HTTP status code.
	Code *int `pulumi:"code"`
	// The HTTP host header to use for HC requests.
	HostHeader *string `pulumi:"hostHeader"`
	// The HTTP method to use for HC requests.
	Method *string `pulumi:"method"`
	// The HTTPS endpoint URL to call for HC requests.
	Uri string `pulumi:"uri"`
}

// BackendHealthCheckHttpInput is an input type that accepts BackendHealthCheckHttpArgs and BackendHealthCheckHttpOutput values.
// You can construct a concrete instance of `BackendHealthCheckHttpInput` via:
//
//	BackendHealthCheckHttpArgs{...}
type BackendHealthCheckHttpInput interface {
	pulumi.Input

	ToBackendHealthCheckHttpOutput() BackendHealthCheckHttpOutput
	ToBackendHealthCheckHttpOutputWithContext(context.Context) BackendHealthCheckHttpOutput
}

type BackendHealthCheckHttpArgs struct {
	// The expected HTTP status code.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// The HTTP host header to use for HC requests.
	HostHeader pulumi.StringPtrInput `pulumi:"hostHeader"`
	// The HTTP method to use for HC requests.
	Method pulumi.StringPtrInput `pulumi:"method"`
	// The HTTPS endpoint URL to call for HC requests.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (BackendHealthCheckHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendHealthCheckHttp)(nil)).Elem()
}

func (i BackendHealthCheckHttpArgs) ToBackendHealthCheckHttpOutput() BackendHealthCheckHttpOutput {
	return i.ToBackendHealthCheckHttpOutputWithContext(context.Background())
}

func (i BackendHealthCheckHttpArgs) ToBackendHealthCheckHttpOutputWithContext(ctx context.Context) BackendHealthCheckHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendHealthCheckHttpOutput)
}

func (i BackendHealthCheckHttpArgs) ToBackendHealthCheckHttpPtrOutput() BackendHealthCheckHttpPtrOutput {
	return i.ToBackendHealthCheckHttpPtrOutputWithContext(context.Background())
}

func (i BackendHealthCheckHttpArgs) ToBackendHealthCheckHttpPtrOutputWithContext(ctx context.Context) BackendHealthCheckHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendHealthCheckHttpOutput).ToBackendHealthCheckHttpPtrOutputWithContext(ctx)
}

// BackendHealthCheckHttpPtrInput is an input type that accepts BackendHealthCheckHttpArgs, BackendHealthCheckHttpPtr and BackendHealthCheckHttpPtrOutput values.
// You can construct a concrete instance of `BackendHealthCheckHttpPtrInput` via:
//
//	        BackendHealthCheckHttpArgs{...}
//
//	or:
//
//	        nil
type BackendHealthCheckHttpPtrInput interface {
	pulumi.Input

	ToBackendHealthCheckHttpPtrOutput() BackendHealthCheckHttpPtrOutput
	ToBackendHealthCheckHttpPtrOutputWithContext(context.Context) BackendHealthCheckHttpPtrOutput
}

type backendHealthCheckHttpPtrType BackendHealthCheckHttpArgs

func BackendHealthCheckHttpPtr(v *BackendHealthCheckHttpArgs) BackendHealthCheckHttpPtrInput {
	return (*backendHealthCheckHttpPtrType)(v)
}

func (*backendHealthCheckHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendHealthCheckHttp)(nil)).Elem()
}

func (i *backendHealthCheckHttpPtrType) ToBackendHealthCheckHttpPtrOutput() BackendHealthCheckHttpPtrOutput {
	return i.ToBackendHealthCheckHttpPtrOutputWithContext(context.Background())
}

func (i *backendHealthCheckHttpPtrType) ToBackendHealthCheckHttpPtrOutputWithContext(ctx context.Context) BackendHealthCheckHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendHealthCheckHttpPtrOutput)
}

type BackendHealthCheckHttpOutput struct{ *pulumi.OutputState }

func (BackendHealthCheckHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendHealthCheckHttp)(nil)).Elem()
}

func (o BackendHealthCheckHttpOutput) ToBackendHealthCheckHttpOutput() BackendHealthCheckHttpOutput {
	return o
}

func (o BackendHealthCheckHttpOutput) ToBackendHealthCheckHttpOutputWithContext(ctx context.Context) BackendHealthCheckHttpOutput {
	return o
}

func (o BackendHealthCheckHttpOutput) ToBackendHealthCheckHttpPtrOutput() BackendHealthCheckHttpPtrOutput {
	return o.ToBackendHealthCheckHttpPtrOutputWithContext(context.Background())
}

func (o BackendHealthCheckHttpOutput) ToBackendHealthCheckHttpPtrOutputWithContext(ctx context.Context) BackendHealthCheckHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackendHealthCheckHttp) *BackendHealthCheckHttp {
		return &v
	}).(BackendHealthCheckHttpPtrOutput)
}

// The expected HTTP status code.
func (o BackendHealthCheckHttpOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendHealthCheckHttp) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// The HTTP host header to use for HC requests.
func (o BackendHealthCheckHttpOutput) HostHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendHealthCheckHttp) *string { return v.HostHeader }).(pulumi.StringPtrOutput)
}

// The HTTP method to use for HC requests.
func (o BackendHealthCheckHttpOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendHealthCheckHttp) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// The HTTPS endpoint URL to call for HC requests.
func (o BackendHealthCheckHttpOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v BackendHealthCheckHttp) string { return v.Uri }).(pulumi.StringOutput)
}

type BackendHealthCheckHttpPtrOutput struct{ *pulumi.OutputState }

func (BackendHealthCheckHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendHealthCheckHttp)(nil)).Elem()
}

func (o BackendHealthCheckHttpPtrOutput) ToBackendHealthCheckHttpPtrOutput() BackendHealthCheckHttpPtrOutput {
	return o
}

func (o BackendHealthCheckHttpPtrOutput) ToBackendHealthCheckHttpPtrOutputWithContext(ctx context.Context) BackendHealthCheckHttpPtrOutput {
	return o
}

func (o BackendHealthCheckHttpPtrOutput) Elem() BackendHealthCheckHttpOutput {
	return o.ApplyT(func(v *BackendHealthCheckHttp) BackendHealthCheckHttp {
		if v != nil {
			return *v
		}
		var ret BackendHealthCheckHttp
		return ret
	}).(BackendHealthCheckHttpOutput)
}

// The expected HTTP status code.
func (o BackendHealthCheckHttpPtrOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendHealthCheckHttp) *int {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.IntPtrOutput)
}

// The HTTP host header to use for HC requests.
func (o BackendHealthCheckHttpPtrOutput) HostHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendHealthCheckHttp) *string {
		if v == nil {
			return nil
		}
		return v.HostHeader
	}).(pulumi.StringPtrOutput)
}

// The HTTP method to use for HC requests.
func (o BackendHealthCheckHttpPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendHealthCheckHttp) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// The HTTPS endpoint URL to call for HC requests.
func (o BackendHealthCheckHttpPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendHealthCheckHttp) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type BackendHealthCheckHttps struct {
	// The expected HTTP status code.
	Code *int `pulumi:"code"`
	// The HTTP host header to use for HC requests.
	HostHeader *string `pulumi:"hostHeader"`
	// The HTTP method to use for HC requests.
	Method *string `pulumi:"method"`
	// The SNI to use for HC requests over SSL.
	Sni *string `pulumi:"sni"`
	// The HTTPS endpoint URL to call for HC requests.
	Uri string `pulumi:"uri"`
}

// BackendHealthCheckHttpsInput is an input type that accepts BackendHealthCheckHttpsArgs and BackendHealthCheckHttpsOutput values.
// You can construct a concrete instance of `BackendHealthCheckHttpsInput` via:
//
//	BackendHealthCheckHttpsArgs{...}
type BackendHealthCheckHttpsInput interface {
	pulumi.Input

	ToBackendHealthCheckHttpsOutput() BackendHealthCheckHttpsOutput
	ToBackendHealthCheckHttpsOutputWithContext(context.Context) BackendHealthCheckHttpsOutput
}

type BackendHealthCheckHttpsArgs struct {
	// The expected HTTP status code.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// The HTTP host header to use for HC requests.
	HostHeader pulumi.StringPtrInput `pulumi:"hostHeader"`
	// The HTTP method to use for HC requests.
	Method pulumi.StringPtrInput `pulumi:"method"`
	// The SNI to use for HC requests over SSL.
	Sni pulumi.StringPtrInput `pulumi:"sni"`
	// The HTTPS endpoint URL to call for HC requests.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (BackendHealthCheckHttpsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendHealthCheckHttps)(nil)).Elem()
}

func (i BackendHealthCheckHttpsArgs) ToBackendHealthCheckHttpsOutput() BackendHealthCheckHttpsOutput {
	return i.ToBackendHealthCheckHttpsOutputWithContext(context.Background())
}

func (i BackendHealthCheckHttpsArgs) ToBackendHealthCheckHttpsOutputWithContext(ctx context.Context) BackendHealthCheckHttpsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendHealthCheckHttpsOutput)
}

func (i BackendHealthCheckHttpsArgs) ToBackendHealthCheckHttpsPtrOutput() BackendHealthCheckHttpsPtrOutput {
	return i.ToBackendHealthCheckHttpsPtrOutputWithContext(context.Background())
}

func (i BackendHealthCheckHttpsArgs) ToBackendHealthCheckHttpsPtrOutputWithContext(ctx context.Context) BackendHealthCheckHttpsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendHealthCheckHttpsOutput).ToBackendHealthCheckHttpsPtrOutputWithContext(ctx)
}

// BackendHealthCheckHttpsPtrInput is an input type that accepts BackendHealthCheckHttpsArgs, BackendHealthCheckHttpsPtr and BackendHealthCheckHttpsPtrOutput values.
// You can construct a concrete instance of `BackendHealthCheckHttpsPtrInput` via:
//
//	        BackendHealthCheckHttpsArgs{...}
//
//	or:
//
//	        nil
type BackendHealthCheckHttpsPtrInput interface {
	pulumi.Input

	ToBackendHealthCheckHttpsPtrOutput() BackendHealthCheckHttpsPtrOutput
	ToBackendHealthCheckHttpsPtrOutputWithContext(context.Context) BackendHealthCheckHttpsPtrOutput
}

type backendHealthCheckHttpsPtrType BackendHealthCheckHttpsArgs

func BackendHealthCheckHttpsPtr(v *BackendHealthCheckHttpsArgs) BackendHealthCheckHttpsPtrInput {
	return (*backendHealthCheckHttpsPtrType)(v)
}

func (*backendHealthCheckHttpsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendHealthCheckHttps)(nil)).Elem()
}

func (i *backendHealthCheckHttpsPtrType) ToBackendHealthCheckHttpsPtrOutput() BackendHealthCheckHttpsPtrOutput {
	return i.ToBackendHealthCheckHttpsPtrOutputWithContext(context.Background())
}

func (i *backendHealthCheckHttpsPtrType) ToBackendHealthCheckHttpsPtrOutputWithContext(ctx context.Context) BackendHealthCheckHttpsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendHealthCheckHttpsPtrOutput)
}

type BackendHealthCheckHttpsOutput struct{ *pulumi.OutputState }

func (BackendHealthCheckHttpsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendHealthCheckHttps)(nil)).Elem()
}

func (o BackendHealthCheckHttpsOutput) ToBackendHealthCheckHttpsOutput() BackendHealthCheckHttpsOutput {
	return o
}

func (o BackendHealthCheckHttpsOutput) ToBackendHealthCheckHttpsOutputWithContext(ctx context.Context) BackendHealthCheckHttpsOutput {
	return o
}

func (o BackendHealthCheckHttpsOutput) ToBackendHealthCheckHttpsPtrOutput() BackendHealthCheckHttpsPtrOutput {
	return o.ToBackendHealthCheckHttpsPtrOutputWithContext(context.Background())
}

func (o BackendHealthCheckHttpsOutput) ToBackendHealthCheckHttpsPtrOutputWithContext(ctx context.Context) BackendHealthCheckHttpsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackendHealthCheckHttps) *BackendHealthCheckHttps {
		return &v
	}).(BackendHealthCheckHttpsPtrOutput)
}

// The expected HTTP status code.
func (o BackendHealthCheckHttpsOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendHealthCheckHttps) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// The HTTP host header to use for HC requests.
func (o BackendHealthCheckHttpsOutput) HostHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendHealthCheckHttps) *string { return v.HostHeader }).(pulumi.StringPtrOutput)
}

// The HTTP method to use for HC requests.
func (o BackendHealthCheckHttpsOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendHealthCheckHttps) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// The SNI to use for HC requests over SSL.
func (o BackendHealthCheckHttpsOutput) Sni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendHealthCheckHttps) *string { return v.Sni }).(pulumi.StringPtrOutput)
}

// The HTTPS endpoint URL to call for HC requests.
func (o BackendHealthCheckHttpsOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v BackendHealthCheckHttps) string { return v.Uri }).(pulumi.StringOutput)
}

type BackendHealthCheckHttpsPtrOutput struct{ *pulumi.OutputState }

func (BackendHealthCheckHttpsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendHealthCheckHttps)(nil)).Elem()
}

func (o BackendHealthCheckHttpsPtrOutput) ToBackendHealthCheckHttpsPtrOutput() BackendHealthCheckHttpsPtrOutput {
	return o
}

func (o BackendHealthCheckHttpsPtrOutput) ToBackendHealthCheckHttpsPtrOutputWithContext(ctx context.Context) BackendHealthCheckHttpsPtrOutput {
	return o
}

func (o BackendHealthCheckHttpsPtrOutput) Elem() BackendHealthCheckHttpsOutput {
	return o.ApplyT(func(v *BackendHealthCheckHttps) BackendHealthCheckHttps {
		if v != nil {
			return *v
		}
		var ret BackendHealthCheckHttps
		return ret
	}).(BackendHealthCheckHttpsOutput)
}

// The expected HTTP status code.
func (o BackendHealthCheckHttpsPtrOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendHealthCheckHttps) *int {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.IntPtrOutput)
}

// The HTTP host header to use for HC requests.
func (o BackendHealthCheckHttpsPtrOutput) HostHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendHealthCheckHttps) *string {
		if v == nil {
			return nil
		}
		return v.HostHeader
	}).(pulumi.StringPtrOutput)
}

// The HTTP method to use for HC requests.
func (o BackendHealthCheckHttpsPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendHealthCheckHttps) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// The SNI to use for HC requests over SSL.
func (o BackendHealthCheckHttpsPtrOutput) Sni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendHealthCheckHttps) *string {
		if v == nil {
			return nil
		}
		return v.Sni
	}).(pulumi.StringPtrOutput)
}

// The HTTPS endpoint URL to call for HC requests.
func (o BackendHealthCheckHttpsPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendHealthCheckHttps) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type BackendHealthCheckTcp struct {
}

// BackendHealthCheckTcpInput is an input type that accepts BackendHealthCheckTcpArgs and BackendHealthCheckTcpOutput values.
// You can construct a concrete instance of `BackendHealthCheckTcpInput` via:
//
//	BackendHealthCheckTcpArgs{...}
type BackendHealthCheckTcpInput interface {
	pulumi.Input

	ToBackendHealthCheckTcpOutput() BackendHealthCheckTcpOutput
	ToBackendHealthCheckTcpOutputWithContext(context.Context) BackendHealthCheckTcpOutput
}

type BackendHealthCheckTcpArgs struct {
}

func (BackendHealthCheckTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendHealthCheckTcp)(nil)).Elem()
}

func (i BackendHealthCheckTcpArgs) ToBackendHealthCheckTcpOutput() BackendHealthCheckTcpOutput {
	return i.ToBackendHealthCheckTcpOutputWithContext(context.Background())
}

func (i BackendHealthCheckTcpArgs) ToBackendHealthCheckTcpOutputWithContext(ctx context.Context) BackendHealthCheckTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendHealthCheckTcpOutput)
}

func (i BackendHealthCheckTcpArgs) ToBackendHealthCheckTcpPtrOutput() BackendHealthCheckTcpPtrOutput {
	return i.ToBackendHealthCheckTcpPtrOutputWithContext(context.Background())
}

func (i BackendHealthCheckTcpArgs) ToBackendHealthCheckTcpPtrOutputWithContext(ctx context.Context) BackendHealthCheckTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendHealthCheckTcpOutput).ToBackendHealthCheckTcpPtrOutputWithContext(ctx)
}

// BackendHealthCheckTcpPtrInput is an input type that accepts BackendHealthCheckTcpArgs, BackendHealthCheckTcpPtr and BackendHealthCheckTcpPtrOutput values.
// You can construct a concrete instance of `BackendHealthCheckTcpPtrInput` via:
//
//	        BackendHealthCheckTcpArgs{...}
//
//	or:
//
//	        nil
type BackendHealthCheckTcpPtrInput interface {
	pulumi.Input

	ToBackendHealthCheckTcpPtrOutput() BackendHealthCheckTcpPtrOutput
	ToBackendHealthCheckTcpPtrOutputWithContext(context.Context) BackendHealthCheckTcpPtrOutput
}

type backendHealthCheckTcpPtrType BackendHealthCheckTcpArgs

func BackendHealthCheckTcpPtr(v *BackendHealthCheckTcpArgs) BackendHealthCheckTcpPtrInput {
	return (*backendHealthCheckTcpPtrType)(v)
}

func (*backendHealthCheckTcpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendHealthCheckTcp)(nil)).Elem()
}

func (i *backendHealthCheckTcpPtrType) ToBackendHealthCheckTcpPtrOutput() BackendHealthCheckTcpPtrOutput {
	return i.ToBackendHealthCheckTcpPtrOutputWithContext(context.Background())
}

func (i *backendHealthCheckTcpPtrType) ToBackendHealthCheckTcpPtrOutputWithContext(ctx context.Context) BackendHealthCheckTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendHealthCheckTcpPtrOutput)
}

type BackendHealthCheckTcpOutput struct{ *pulumi.OutputState }

func (BackendHealthCheckTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendHealthCheckTcp)(nil)).Elem()
}

func (o BackendHealthCheckTcpOutput) ToBackendHealthCheckTcpOutput() BackendHealthCheckTcpOutput {
	return o
}

func (o BackendHealthCheckTcpOutput) ToBackendHealthCheckTcpOutputWithContext(ctx context.Context) BackendHealthCheckTcpOutput {
	return o
}

func (o BackendHealthCheckTcpOutput) ToBackendHealthCheckTcpPtrOutput() BackendHealthCheckTcpPtrOutput {
	return o.ToBackendHealthCheckTcpPtrOutputWithContext(context.Background())
}

func (o BackendHealthCheckTcpOutput) ToBackendHealthCheckTcpPtrOutputWithContext(ctx context.Context) BackendHealthCheckTcpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackendHealthCheckTcp) *BackendHealthCheckTcp {
		return &v
	}).(BackendHealthCheckTcpPtrOutput)
}

type BackendHealthCheckTcpPtrOutput struct{ *pulumi.OutputState }

func (BackendHealthCheckTcpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendHealthCheckTcp)(nil)).Elem()
}

func (o BackendHealthCheckTcpPtrOutput) ToBackendHealthCheckTcpPtrOutput() BackendHealthCheckTcpPtrOutput {
	return o
}

func (o BackendHealthCheckTcpPtrOutput) ToBackendHealthCheckTcpPtrOutputWithContext(ctx context.Context) BackendHealthCheckTcpPtrOutput {
	return o
}

func (o BackendHealthCheckTcpPtrOutput) Elem() BackendHealthCheckTcpOutput {
	return o.ApplyT(func(v *BackendHealthCheckTcp) BackendHealthCheckTcp {
		if v != nil {
			return *v
		}
		var ret BackendHealthCheckTcp
		return ret
	}).(BackendHealthCheckTcpOutput)
}

type CertficateCustomCertificate struct {
	// Full PEM-formatted certificate chain.
	//
	// > **Important:** Updates to `customCertificate` will recreate the load-balancer certificate.
	CertificateChain string `pulumi:"certificateChain"`
}

// CertficateCustomCertificateInput is an input type that accepts CertficateCustomCertificateArgs and CertficateCustomCertificateOutput values.
// You can construct a concrete instance of `CertficateCustomCertificateInput` via:
//
//	CertficateCustomCertificateArgs{...}
type CertficateCustomCertificateInput interface {
	pulumi.Input

	ToCertficateCustomCertificateOutput() CertficateCustomCertificateOutput
	ToCertficateCustomCertificateOutputWithContext(context.Context) CertficateCustomCertificateOutput
}

type CertficateCustomCertificateArgs struct {
	// Full PEM-formatted certificate chain.
	//
	// > **Important:** Updates to `customCertificate` will recreate the load-balancer certificate.
	CertificateChain pulumi.StringInput `pulumi:"certificateChain"`
}

func (CertficateCustomCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertficateCustomCertificate)(nil)).Elem()
}

func (i CertficateCustomCertificateArgs) ToCertficateCustomCertificateOutput() CertficateCustomCertificateOutput {
	return i.ToCertficateCustomCertificateOutputWithContext(context.Background())
}

func (i CertficateCustomCertificateArgs) ToCertficateCustomCertificateOutputWithContext(ctx context.Context) CertficateCustomCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertficateCustomCertificateOutput)
}

func (i CertficateCustomCertificateArgs) ToCertficateCustomCertificatePtrOutput() CertficateCustomCertificatePtrOutput {
	return i.ToCertficateCustomCertificatePtrOutputWithContext(context.Background())
}

func (i CertficateCustomCertificateArgs) ToCertficateCustomCertificatePtrOutputWithContext(ctx context.Context) CertficateCustomCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertficateCustomCertificateOutput).ToCertficateCustomCertificatePtrOutputWithContext(ctx)
}

// CertficateCustomCertificatePtrInput is an input type that accepts CertficateCustomCertificateArgs, CertficateCustomCertificatePtr and CertficateCustomCertificatePtrOutput values.
// You can construct a concrete instance of `CertficateCustomCertificatePtrInput` via:
//
//	        CertficateCustomCertificateArgs{...}
//
//	or:
//
//	        nil
type CertficateCustomCertificatePtrInput interface {
	pulumi.Input

	ToCertficateCustomCertificatePtrOutput() CertficateCustomCertificatePtrOutput
	ToCertficateCustomCertificatePtrOutputWithContext(context.Context) CertficateCustomCertificatePtrOutput
}

type certficateCustomCertificatePtrType CertficateCustomCertificateArgs

func CertficateCustomCertificatePtr(v *CertficateCustomCertificateArgs) CertficateCustomCertificatePtrInput {
	return (*certficateCustomCertificatePtrType)(v)
}

func (*certficateCustomCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertficateCustomCertificate)(nil)).Elem()
}

func (i *certficateCustomCertificatePtrType) ToCertficateCustomCertificatePtrOutput() CertficateCustomCertificatePtrOutput {
	return i.ToCertficateCustomCertificatePtrOutputWithContext(context.Background())
}

func (i *certficateCustomCertificatePtrType) ToCertficateCustomCertificatePtrOutputWithContext(ctx context.Context) CertficateCustomCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertficateCustomCertificatePtrOutput)
}

type CertficateCustomCertificateOutput struct{ *pulumi.OutputState }

func (CertficateCustomCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertficateCustomCertificate)(nil)).Elem()
}

func (o CertficateCustomCertificateOutput) ToCertficateCustomCertificateOutput() CertficateCustomCertificateOutput {
	return o
}

func (o CertficateCustomCertificateOutput) ToCertficateCustomCertificateOutputWithContext(ctx context.Context) CertficateCustomCertificateOutput {
	return o
}

func (o CertficateCustomCertificateOutput) ToCertficateCustomCertificatePtrOutput() CertficateCustomCertificatePtrOutput {
	return o.ToCertficateCustomCertificatePtrOutputWithContext(context.Background())
}

func (o CertficateCustomCertificateOutput) ToCertficateCustomCertificatePtrOutputWithContext(ctx context.Context) CertficateCustomCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertficateCustomCertificate) *CertficateCustomCertificate {
		return &v
	}).(CertficateCustomCertificatePtrOutput)
}

// Full PEM-formatted certificate chain.
//
// > **Important:** Updates to `customCertificate` will recreate the load-balancer certificate.
func (o CertficateCustomCertificateOutput) CertificateChain() pulumi.StringOutput {
	return o.ApplyT(func(v CertficateCustomCertificate) string { return v.CertificateChain }).(pulumi.StringOutput)
}

type CertficateCustomCertificatePtrOutput struct{ *pulumi.OutputState }

func (CertficateCustomCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertficateCustomCertificate)(nil)).Elem()
}

func (o CertficateCustomCertificatePtrOutput) ToCertficateCustomCertificatePtrOutput() CertficateCustomCertificatePtrOutput {
	return o
}

func (o CertficateCustomCertificatePtrOutput) ToCertficateCustomCertificatePtrOutputWithContext(ctx context.Context) CertficateCustomCertificatePtrOutput {
	return o
}

func (o CertficateCustomCertificatePtrOutput) Elem() CertficateCustomCertificateOutput {
	return o.ApplyT(func(v *CertficateCustomCertificate) CertficateCustomCertificate {
		if v != nil {
			return *v
		}
		var ret CertficateCustomCertificate
		return ret
	}).(CertficateCustomCertificateOutput)
}

// Full PEM-formatted certificate chain.
//
// > **Important:** Updates to `customCertificate` will recreate the load-balancer certificate.
func (o CertficateCustomCertificatePtrOutput) CertificateChain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertficateCustomCertificate) *string {
		if v == nil {
			return nil
		}
		return &v.CertificateChain
	}).(pulumi.StringPtrOutput)
}

type CertficateLetsencrypt struct {
	// Main domain of the certificate. A new certificate will be created if this field is changed.
	CommonName string `pulumi:"commonName"`
	// Array of alternative domain names.  A new certificate will be created if this field is changed.
	//
	// > **Important:** Updates to `letsencrypt` will recreate the load-balancer certificate.
	SubjectAlternativeNames []string `pulumi:"subjectAlternativeNames"`
}

// CertficateLetsencryptInput is an input type that accepts CertficateLetsencryptArgs and CertficateLetsencryptOutput values.
// You can construct a concrete instance of `CertficateLetsencryptInput` via:
//
//	CertficateLetsencryptArgs{...}
type CertficateLetsencryptInput interface {
	pulumi.Input

	ToCertficateLetsencryptOutput() CertficateLetsencryptOutput
	ToCertficateLetsencryptOutputWithContext(context.Context) CertficateLetsencryptOutput
}

type CertficateLetsencryptArgs struct {
	// Main domain of the certificate. A new certificate will be created if this field is changed.
	CommonName pulumi.StringInput `pulumi:"commonName"`
	// Array of alternative domain names.  A new certificate will be created if this field is changed.
	//
	// > **Important:** Updates to `letsencrypt` will recreate the load-balancer certificate.
	SubjectAlternativeNames pulumi.StringArrayInput `pulumi:"subjectAlternativeNames"`
}

func (CertficateLetsencryptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertficateLetsencrypt)(nil)).Elem()
}

func (i CertficateLetsencryptArgs) ToCertficateLetsencryptOutput() CertficateLetsencryptOutput {
	return i.ToCertficateLetsencryptOutputWithContext(context.Background())
}

func (i CertficateLetsencryptArgs) ToCertficateLetsencryptOutputWithContext(ctx context.Context) CertficateLetsencryptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertficateLetsencryptOutput)
}

func (i CertficateLetsencryptArgs) ToCertficateLetsencryptPtrOutput() CertficateLetsencryptPtrOutput {
	return i.ToCertficateLetsencryptPtrOutputWithContext(context.Background())
}

func (i CertficateLetsencryptArgs) ToCertficateLetsencryptPtrOutputWithContext(ctx context.Context) CertficateLetsencryptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertficateLetsencryptOutput).ToCertficateLetsencryptPtrOutputWithContext(ctx)
}

// CertficateLetsencryptPtrInput is an input type that accepts CertficateLetsencryptArgs, CertficateLetsencryptPtr and CertficateLetsencryptPtrOutput values.
// You can construct a concrete instance of `CertficateLetsencryptPtrInput` via:
//
//	        CertficateLetsencryptArgs{...}
//
//	or:
//
//	        nil
type CertficateLetsencryptPtrInput interface {
	pulumi.Input

	ToCertficateLetsencryptPtrOutput() CertficateLetsencryptPtrOutput
	ToCertficateLetsencryptPtrOutputWithContext(context.Context) CertficateLetsencryptPtrOutput
}

type certficateLetsencryptPtrType CertficateLetsencryptArgs

func CertficateLetsencryptPtr(v *CertficateLetsencryptArgs) CertficateLetsencryptPtrInput {
	return (*certficateLetsencryptPtrType)(v)
}

func (*certficateLetsencryptPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertficateLetsencrypt)(nil)).Elem()
}

func (i *certficateLetsencryptPtrType) ToCertficateLetsencryptPtrOutput() CertficateLetsencryptPtrOutput {
	return i.ToCertficateLetsencryptPtrOutputWithContext(context.Background())
}

func (i *certficateLetsencryptPtrType) ToCertficateLetsencryptPtrOutputWithContext(ctx context.Context) CertficateLetsencryptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertficateLetsencryptPtrOutput)
}

type CertficateLetsencryptOutput struct{ *pulumi.OutputState }

func (CertficateLetsencryptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertficateLetsencrypt)(nil)).Elem()
}

func (o CertficateLetsencryptOutput) ToCertficateLetsencryptOutput() CertficateLetsencryptOutput {
	return o
}

func (o CertficateLetsencryptOutput) ToCertficateLetsencryptOutputWithContext(ctx context.Context) CertficateLetsencryptOutput {
	return o
}

func (o CertficateLetsencryptOutput) ToCertficateLetsencryptPtrOutput() CertficateLetsencryptPtrOutput {
	return o.ToCertficateLetsencryptPtrOutputWithContext(context.Background())
}

func (o CertficateLetsencryptOutput) ToCertficateLetsencryptPtrOutputWithContext(ctx context.Context) CertficateLetsencryptPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertficateLetsencrypt) *CertficateLetsencrypt {
		return &v
	}).(CertficateLetsencryptPtrOutput)
}

// Main domain of the certificate. A new certificate will be created if this field is changed.
func (o CertficateLetsencryptOutput) CommonName() pulumi.StringOutput {
	return o.ApplyT(func(v CertficateLetsencrypt) string { return v.CommonName }).(pulumi.StringOutput)
}

// Array of alternative domain names.  A new certificate will be created if this field is changed.
//
// > **Important:** Updates to `letsencrypt` will recreate the load-balancer certificate.
func (o CertficateLetsencryptOutput) SubjectAlternativeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertficateLetsencrypt) []string { return v.SubjectAlternativeNames }).(pulumi.StringArrayOutput)
}

type CertficateLetsencryptPtrOutput struct{ *pulumi.OutputState }

func (CertficateLetsencryptPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertficateLetsencrypt)(nil)).Elem()
}

func (o CertficateLetsencryptPtrOutput) ToCertficateLetsencryptPtrOutput() CertficateLetsencryptPtrOutput {
	return o
}

func (o CertficateLetsencryptPtrOutput) ToCertficateLetsencryptPtrOutputWithContext(ctx context.Context) CertficateLetsencryptPtrOutput {
	return o
}

func (o CertficateLetsencryptPtrOutput) Elem() CertficateLetsencryptOutput {
	return o.ApplyT(func(v *CertficateLetsencrypt) CertficateLetsencrypt {
		if v != nil {
			return *v
		}
		var ret CertficateLetsencrypt
		return ret
	}).(CertficateLetsencryptOutput)
}

// Main domain of the certificate. A new certificate will be created if this field is changed.
func (o CertficateLetsencryptPtrOutput) CommonName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertficateLetsencrypt) *string {
		if v == nil {
			return nil
		}
		return &v.CommonName
	}).(pulumi.StringPtrOutput)
}

// Array of alternative domain names.  A new certificate will be created if this field is changed.
//
// > **Important:** Updates to `letsencrypt` will recreate the load-balancer certificate.
func (o CertficateLetsencryptPtrOutput) SubjectAlternativeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertficateLetsencrypt) []string {
		if v == nil {
			return nil
		}
		return v.SubjectAlternativeNames
	}).(pulumi.StringArrayOutput)
}

type FrontendAcl struct {
	// Action to undertake when an ACL filter matches.
	Action      FrontendAclAction `pulumi:"action"`
	CreatedAt   *string           `pulumi:"createdAt"`
	Description *string           `pulumi:"description"`
	// The ACL match rule. At least `ipSubnet` or `httpFilter` and `httpFilterValue` are required.
	Match FrontendAclMatch `pulumi:"match"`
	// The ACL name. If not provided it will be randomly generated.
	Name      *string `pulumi:"name"`
	UpdatedAt *string `pulumi:"updatedAt"`
}

// FrontendAclInput is an input type that accepts FrontendAclArgs and FrontendAclOutput values.
// You can construct a concrete instance of `FrontendAclInput` via:
//
//	FrontendAclArgs{...}
type FrontendAclInput interface {
	pulumi.Input

	ToFrontendAclOutput() FrontendAclOutput
	ToFrontendAclOutputWithContext(context.Context) FrontendAclOutput
}

type FrontendAclArgs struct {
	// Action to undertake when an ACL filter matches.
	Action      FrontendAclActionInput `pulumi:"action"`
	CreatedAt   pulumi.StringPtrInput  `pulumi:"createdAt"`
	Description pulumi.StringPtrInput  `pulumi:"description"`
	// The ACL match rule. At least `ipSubnet` or `httpFilter` and `httpFilterValue` are required.
	Match FrontendAclMatchInput `pulumi:"match"`
	// The ACL name. If not provided it will be randomly generated.
	Name      pulumi.StringPtrInput `pulumi:"name"`
	UpdatedAt pulumi.StringPtrInput `pulumi:"updatedAt"`
}

func (FrontendAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendAcl)(nil)).Elem()
}

func (i FrontendAclArgs) ToFrontendAclOutput() FrontendAclOutput {
	return i.ToFrontendAclOutputWithContext(context.Background())
}

func (i FrontendAclArgs) ToFrontendAclOutputWithContext(ctx context.Context) FrontendAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendAclOutput)
}

// FrontendAclArrayInput is an input type that accepts FrontendAclArray and FrontendAclArrayOutput values.
// You can construct a concrete instance of `FrontendAclArrayInput` via:
//
//	FrontendAclArray{ FrontendAclArgs{...} }
type FrontendAclArrayInput interface {
	pulumi.Input

	ToFrontendAclArrayOutput() FrontendAclArrayOutput
	ToFrontendAclArrayOutputWithContext(context.Context) FrontendAclArrayOutput
}

type FrontendAclArray []FrontendAclInput

func (FrontendAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontendAcl)(nil)).Elem()
}

func (i FrontendAclArray) ToFrontendAclArrayOutput() FrontendAclArrayOutput {
	return i.ToFrontendAclArrayOutputWithContext(context.Background())
}

func (i FrontendAclArray) ToFrontendAclArrayOutputWithContext(ctx context.Context) FrontendAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendAclArrayOutput)
}

type FrontendAclOutput struct{ *pulumi.OutputState }

func (FrontendAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendAcl)(nil)).Elem()
}

func (o FrontendAclOutput) ToFrontendAclOutput() FrontendAclOutput {
	return o
}

func (o FrontendAclOutput) ToFrontendAclOutputWithContext(ctx context.Context) FrontendAclOutput {
	return o
}

// Action to undertake when an ACL filter matches.
func (o FrontendAclOutput) Action() FrontendAclActionOutput {
	return o.ApplyT(func(v FrontendAcl) FrontendAclAction { return v.Action }).(FrontendAclActionOutput)
}

func (o FrontendAclOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendAcl) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

func (o FrontendAclOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendAcl) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The ACL match rule. At least `ipSubnet` or `httpFilter` and `httpFilterValue` are required.
func (o FrontendAclOutput) Match() FrontendAclMatchOutput {
	return o.ApplyT(func(v FrontendAcl) FrontendAclMatch { return v.Match }).(FrontendAclMatchOutput)
}

// The ACL name. If not provided it will be randomly generated.
func (o FrontendAclOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendAcl) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o FrontendAclOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendAcl) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

type FrontendAclArrayOutput struct{ *pulumi.OutputState }

func (FrontendAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontendAcl)(nil)).Elem()
}

func (o FrontendAclArrayOutput) ToFrontendAclArrayOutput() FrontendAclArrayOutput {
	return o
}

func (o FrontendAclArrayOutput) ToFrontendAclArrayOutputWithContext(ctx context.Context) FrontendAclArrayOutput {
	return o
}

func (o FrontendAclArrayOutput) Index(i pulumi.IntInput) FrontendAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FrontendAcl {
		return vs[0].([]FrontendAcl)[vs[1].(int)]
	}).(FrontendAclOutput)
}

type FrontendAclAction struct {
	// Redirect parameters when using an ACL with `redirect` action.
	Redirects []FrontendAclActionRedirect `pulumi:"redirects"`
	// The redirect type. Possible values are: `location` or `scheme`.
	Type string `pulumi:"type"`
}

// FrontendAclActionInput is an input type that accepts FrontendAclActionArgs and FrontendAclActionOutput values.
// You can construct a concrete instance of `FrontendAclActionInput` via:
//
//	FrontendAclActionArgs{...}
type FrontendAclActionInput interface {
	pulumi.Input

	ToFrontendAclActionOutput() FrontendAclActionOutput
	ToFrontendAclActionOutputWithContext(context.Context) FrontendAclActionOutput
}

type FrontendAclActionArgs struct {
	// Redirect parameters when using an ACL with `redirect` action.
	Redirects FrontendAclActionRedirectArrayInput `pulumi:"redirects"`
	// The redirect type. Possible values are: `location` or `scheme`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FrontendAclActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendAclAction)(nil)).Elem()
}

func (i FrontendAclActionArgs) ToFrontendAclActionOutput() FrontendAclActionOutput {
	return i.ToFrontendAclActionOutputWithContext(context.Background())
}

func (i FrontendAclActionArgs) ToFrontendAclActionOutputWithContext(ctx context.Context) FrontendAclActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendAclActionOutput)
}

type FrontendAclActionOutput struct{ *pulumi.OutputState }

func (FrontendAclActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendAclAction)(nil)).Elem()
}

func (o FrontendAclActionOutput) ToFrontendAclActionOutput() FrontendAclActionOutput {
	return o
}

func (o FrontendAclActionOutput) ToFrontendAclActionOutputWithContext(ctx context.Context) FrontendAclActionOutput {
	return o
}

// Redirect parameters when using an ACL with `redirect` action.
func (o FrontendAclActionOutput) Redirects() FrontendAclActionRedirectArrayOutput {
	return o.ApplyT(func(v FrontendAclAction) []FrontendAclActionRedirect { return v.Redirects }).(FrontendAclActionRedirectArrayOutput)
}

// The redirect type. Possible values are: `location` or `scheme`.
func (o FrontendAclActionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FrontendAclAction) string { return v.Type }).(pulumi.StringOutput)
}

type FrontendAclActionRedirect struct {
	// The HTTP redirect code to use. Valid values are `301`, `302`, `303`, `307` and `308`.
	Code *int `pulumi:"code"`
	// An URL can be used in case of a location redirect (e.g. `https://scaleway.com` will redirect to this same URL). A scheme name (e.g. `https`, `http`, `ftp`, `git`) will replace the request's original scheme.
	Target *string `pulumi:"target"`
	// The redirect type. Possible values are: `location` or `scheme`.
	Type *string `pulumi:"type"`
}

// FrontendAclActionRedirectInput is an input type that accepts FrontendAclActionRedirectArgs and FrontendAclActionRedirectOutput values.
// You can construct a concrete instance of `FrontendAclActionRedirectInput` via:
//
//	FrontendAclActionRedirectArgs{...}
type FrontendAclActionRedirectInput interface {
	pulumi.Input

	ToFrontendAclActionRedirectOutput() FrontendAclActionRedirectOutput
	ToFrontendAclActionRedirectOutputWithContext(context.Context) FrontendAclActionRedirectOutput
}

type FrontendAclActionRedirectArgs struct {
	// The HTTP redirect code to use. Valid values are `301`, `302`, `303`, `307` and `308`.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// An URL can be used in case of a location redirect (e.g. `https://scaleway.com` will redirect to this same URL). A scheme name (e.g. `https`, `http`, `ftp`, `git`) will replace the request's original scheme.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// The redirect type. Possible values are: `location` or `scheme`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (FrontendAclActionRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendAclActionRedirect)(nil)).Elem()
}

func (i FrontendAclActionRedirectArgs) ToFrontendAclActionRedirectOutput() FrontendAclActionRedirectOutput {
	return i.ToFrontendAclActionRedirectOutputWithContext(context.Background())
}

func (i FrontendAclActionRedirectArgs) ToFrontendAclActionRedirectOutputWithContext(ctx context.Context) FrontendAclActionRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendAclActionRedirectOutput)
}

// FrontendAclActionRedirectArrayInput is an input type that accepts FrontendAclActionRedirectArray and FrontendAclActionRedirectArrayOutput values.
// You can construct a concrete instance of `FrontendAclActionRedirectArrayInput` via:
//
//	FrontendAclActionRedirectArray{ FrontendAclActionRedirectArgs{...} }
type FrontendAclActionRedirectArrayInput interface {
	pulumi.Input

	ToFrontendAclActionRedirectArrayOutput() FrontendAclActionRedirectArrayOutput
	ToFrontendAclActionRedirectArrayOutputWithContext(context.Context) FrontendAclActionRedirectArrayOutput
}

type FrontendAclActionRedirectArray []FrontendAclActionRedirectInput

func (FrontendAclActionRedirectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontendAclActionRedirect)(nil)).Elem()
}

func (i FrontendAclActionRedirectArray) ToFrontendAclActionRedirectArrayOutput() FrontendAclActionRedirectArrayOutput {
	return i.ToFrontendAclActionRedirectArrayOutputWithContext(context.Background())
}

func (i FrontendAclActionRedirectArray) ToFrontendAclActionRedirectArrayOutputWithContext(ctx context.Context) FrontendAclActionRedirectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendAclActionRedirectArrayOutput)
}

type FrontendAclActionRedirectOutput struct{ *pulumi.OutputState }

func (FrontendAclActionRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendAclActionRedirect)(nil)).Elem()
}

func (o FrontendAclActionRedirectOutput) ToFrontendAclActionRedirectOutput() FrontendAclActionRedirectOutput {
	return o
}

func (o FrontendAclActionRedirectOutput) ToFrontendAclActionRedirectOutputWithContext(ctx context.Context) FrontendAclActionRedirectOutput {
	return o
}

// The HTTP redirect code to use. Valid values are `301`, `302`, `303`, `307` and `308`.
func (o FrontendAclActionRedirectOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FrontendAclActionRedirect) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// An URL can be used in case of a location redirect (e.g. `https://scaleway.com` will redirect to this same URL). A scheme name (e.g. `https`, `http`, `ftp`, `git`) will replace the request's original scheme.
func (o FrontendAclActionRedirectOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendAclActionRedirect) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// The redirect type. Possible values are: `location` or `scheme`.
func (o FrontendAclActionRedirectOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendAclActionRedirect) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type FrontendAclActionRedirectArrayOutput struct{ *pulumi.OutputState }

func (FrontendAclActionRedirectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontendAclActionRedirect)(nil)).Elem()
}

func (o FrontendAclActionRedirectArrayOutput) ToFrontendAclActionRedirectArrayOutput() FrontendAclActionRedirectArrayOutput {
	return o
}

func (o FrontendAclActionRedirectArrayOutput) ToFrontendAclActionRedirectArrayOutputWithContext(ctx context.Context) FrontendAclActionRedirectArrayOutput {
	return o
}

func (o FrontendAclActionRedirectArrayOutput) Index(i pulumi.IntInput) FrontendAclActionRedirectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FrontendAclActionRedirect {
		return vs[0].([]FrontendAclActionRedirect)[vs[1].(int)]
	}).(FrontendAclActionRedirectOutput)
}

type FrontendAclMatch struct {
	// The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.
	// It extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).
	// Possible values are: `aclHttpFilterNone`, `pathBegin`, `pathEnd`, `httpHeaderMatch` or `regex`.
	HttpFilter *string `pulumi:"httpFilter"`
	// If you have `httpFilter` at `httpHeaderMatch`, you can use this field to filter on the HTTP header's value.
	HttpFilterOption *string `pulumi:"httpFilterOption"`
	// A list of possible values to match for the given HTTP filter.
	// Keep in mind that in the case of `httpHeaderMatch` the HTTP header field name is case-insensitive.
	HttpFilterValues []string `pulumi:"httpFilterValues"`
	// If set to `true`, the condition will be of type "unless".
	Invert *bool `pulumi:"invert"`
	// A list of IPs or CIDR v4/v6 addresses of the client of the session to match.
	IpSubnets []string `pulumi:"ipSubnets"`
}

// FrontendAclMatchInput is an input type that accepts FrontendAclMatchArgs and FrontendAclMatchOutput values.
// You can construct a concrete instance of `FrontendAclMatchInput` via:
//
//	FrontendAclMatchArgs{...}
type FrontendAclMatchInput interface {
	pulumi.Input

	ToFrontendAclMatchOutput() FrontendAclMatchOutput
	ToFrontendAclMatchOutputWithContext(context.Context) FrontendAclMatchOutput
}

type FrontendAclMatchArgs struct {
	// The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.
	// It extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).
	// Possible values are: `aclHttpFilterNone`, `pathBegin`, `pathEnd`, `httpHeaderMatch` or `regex`.
	HttpFilter pulumi.StringPtrInput `pulumi:"httpFilter"`
	// If you have `httpFilter` at `httpHeaderMatch`, you can use this field to filter on the HTTP header's value.
	HttpFilterOption pulumi.StringPtrInput `pulumi:"httpFilterOption"`
	// A list of possible values to match for the given HTTP filter.
	// Keep in mind that in the case of `httpHeaderMatch` the HTTP header field name is case-insensitive.
	HttpFilterValues pulumi.StringArrayInput `pulumi:"httpFilterValues"`
	// If set to `true`, the condition will be of type "unless".
	Invert pulumi.BoolPtrInput `pulumi:"invert"`
	// A list of IPs or CIDR v4/v6 addresses of the client of the session to match.
	IpSubnets pulumi.StringArrayInput `pulumi:"ipSubnets"`
}

func (FrontendAclMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendAclMatch)(nil)).Elem()
}

func (i FrontendAclMatchArgs) ToFrontendAclMatchOutput() FrontendAclMatchOutput {
	return i.ToFrontendAclMatchOutputWithContext(context.Background())
}

func (i FrontendAclMatchArgs) ToFrontendAclMatchOutputWithContext(ctx context.Context) FrontendAclMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendAclMatchOutput)
}

type FrontendAclMatchOutput struct{ *pulumi.OutputState }

func (FrontendAclMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendAclMatch)(nil)).Elem()
}

func (o FrontendAclMatchOutput) ToFrontendAclMatchOutput() FrontendAclMatchOutput {
	return o
}

func (o FrontendAclMatchOutput) ToFrontendAclMatchOutputWithContext(ctx context.Context) FrontendAclMatchOutput {
	return o
}

// The HTTP filter to match. This filter is supported only if your backend protocol has an HTTP forward protocol.
// It extracts the request's URL path, which starts at the first slash and ends before the question mark (without the host part).
// Possible values are: `aclHttpFilterNone`, `pathBegin`, `pathEnd`, `httpHeaderMatch` or `regex`.
func (o FrontendAclMatchOutput) HttpFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendAclMatch) *string { return v.HttpFilter }).(pulumi.StringPtrOutput)
}

// If you have `httpFilter` at `httpHeaderMatch`, you can use this field to filter on the HTTP header's value.
func (o FrontendAclMatchOutput) HttpFilterOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendAclMatch) *string { return v.HttpFilterOption }).(pulumi.StringPtrOutput)
}

// A list of possible values to match for the given HTTP filter.
// Keep in mind that in the case of `httpHeaderMatch` the HTTP header field name is case-insensitive.
func (o FrontendAclMatchOutput) HttpFilterValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FrontendAclMatch) []string { return v.HttpFilterValues }).(pulumi.StringArrayOutput)
}

// If set to `true`, the condition will be of type "unless".
func (o FrontendAclMatchOutput) Invert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FrontendAclMatch) *bool { return v.Invert }).(pulumi.BoolPtrOutput)
}

// A list of IPs or CIDR v4/v6 addresses of the client of the session to match.
func (o FrontendAclMatchOutput) IpSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FrontendAclMatch) []string { return v.IpSubnets }).(pulumi.StringArrayOutput)
}

type LoadBalancerPrivateNetwork struct {
	// (Optional) Set to true if you want to let DHCP assign IP addresses. See below.
	DhcpConfig *bool `pulumi:"dhcpConfig"`
	// (Required) The ID of the Private Network to associate.
	PrivateNetworkId string `pulumi:"privateNetworkId"`
	// (Optional) Define a local ip address of your choice for the load balancer instance. See below.
	StaticConfig *string `pulumi:"staticConfig"`
	Status       *string `pulumi:"status"`
	// `zone`) The zone of the load-balancer.
	Zone *string `pulumi:"zone"`
}

// LoadBalancerPrivateNetworkInput is an input type that accepts LoadBalancerPrivateNetworkArgs and LoadBalancerPrivateNetworkOutput values.
// You can construct a concrete instance of `LoadBalancerPrivateNetworkInput` via:
//
//	LoadBalancerPrivateNetworkArgs{...}
type LoadBalancerPrivateNetworkInput interface {
	pulumi.Input

	ToLoadBalancerPrivateNetworkOutput() LoadBalancerPrivateNetworkOutput
	ToLoadBalancerPrivateNetworkOutputWithContext(context.Context) LoadBalancerPrivateNetworkOutput
}

type LoadBalancerPrivateNetworkArgs struct {
	// (Optional) Set to true if you want to let DHCP assign IP addresses. See below.
	DhcpConfig pulumi.BoolPtrInput `pulumi:"dhcpConfig"`
	// (Required) The ID of the Private Network to associate.
	PrivateNetworkId pulumi.StringInput `pulumi:"privateNetworkId"`
	// (Optional) Define a local ip address of your choice for the load balancer instance. See below.
	StaticConfig pulumi.StringPtrInput `pulumi:"staticConfig"`
	Status       pulumi.StringPtrInput `pulumi:"status"`
	// `zone`) The zone of the load-balancer.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (LoadBalancerPrivateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerPrivateNetwork)(nil)).Elem()
}

func (i LoadBalancerPrivateNetworkArgs) ToLoadBalancerPrivateNetworkOutput() LoadBalancerPrivateNetworkOutput {
	return i.ToLoadBalancerPrivateNetworkOutputWithContext(context.Background())
}

func (i LoadBalancerPrivateNetworkArgs) ToLoadBalancerPrivateNetworkOutputWithContext(ctx context.Context) LoadBalancerPrivateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerPrivateNetworkOutput)
}

// LoadBalancerPrivateNetworkArrayInput is an input type that accepts LoadBalancerPrivateNetworkArray and LoadBalancerPrivateNetworkArrayOutput values.
// You can construct a concrete instance of `LoadBalancerPrivateNetworkArrayInput` via:
//
//	LoadBalancerPrivateNetworkArray{ LoadBalancerPrivateNetworkArgs{...} }
type LoadBalancerPrivateNetworkArrayInput interface {
	pulumi.Input

	ToLoadBalancerPrivateNetworkArrayOutput() LoadBalancerPrivateNetworkArrayOutput
	ToLoadBalancerPrivateNetworkArrayOutputWithContext(context.Context) LoadBalancerPrivateNetworkArrayOutput
}

type LoadBalancerPrivateNetworkArray []LoadBalancerPrivateNetworkInput

func (LoadBalancerPrivateNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerPrivateNetwork)(nil)).Elem()
}

func (i LoadBalancerPrivateNetworkArray) ToLoadBalancerPrivateNetworkArrayOutput() LoadBalancerPrivateNetworkArrayOutput {
	return i.ToLoadBalancerPrivateNetworkArrayOutputWithContext(context.Background())
}

func (i LoadBalancerPrivateNetworkArray) ToLoadBalancerPrivateNetworkArrayOutputWithContext(ctx context.Context) LoadBalancerPrivateNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerPrivateNetworkArrayOutput)
}

type LoadBalancerPrivateNetworkOutput struct{ *pulumi.OutputState }

func (LoadBalancerPrivateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerPrivateNetwork)(nil)).Elem()
}

func (o LoadBalancerPrivateNetworkOutput) ToLoadBalancerPrivateNetworkOutput() LoadBalancerPrivateNetworkOutput {
	return o
}

func (o LoadBalancerPrivateNetworkOutput) ToLoadBalancerPrivateNetworkOutputWithContext(ctx context.Context) LoadBalancerPrivateNetworkOutput {
	return o
}

// (Optional) Set to true if you want to let DHCP assign IP addresses. See below.
func (o LoadBalancerPrivateNetworkOutput) DhcpConfig() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LoadBalancerPrivateNetwork) *bool { return v.DhcpConfig }).(pulumi.BoolPtrOutput)
}

// (Required) The ID of the Private Network to associate.
func (o LoadBalancerPrivateNetworkOutput) PrivateNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerPrivateNetwork) string { return v.PrivateNetworkId }).(pulumi.StringOutput)
}

// (Optional) Define a local ip address of your choice for the load balancer instance. See below.
func (o LoadBalancerPrivateNetworkOutput) StaticConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerPrivateNetwork) *string { return v.StaticConfig }).(pulumi.StringPtrOutput)
}

func (o LoadBalancerPrivateNetworkOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerPrivateNetwork) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// `zone`) The zone of the load-balancer.
func (o LoadBalancerPrivateNetworkOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerPrivateNetwork) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type LoadBalancerPrivateNetworkArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerPrivateNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerPrivateNetwork)(nil)).Elem()
}

func (o LoadBalancerPrivateNetworkArrayOutput) ToLoadBalancerPrivateNetworkArrayOutput() LoadBalancerPrivateNetworkArrayOutput {
	return o
}

func (o LoadBalancerPrivateNetworkArrayOutput) ToLoadBalancerPrivateNetworkArrayOutputWithContext(ctx context.Context) LoadBalancerPrivateNetworkArrayOutput {
	return o
}

func (o LoadBalancerPrivateNetworkArrayOutput) Index(i pulumi.IntInput) LoadBalancerPrivateNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerPrivateNetwork {
		return vs[0].([]LoadBalancerPrivateNetwork)[vs[1].(int)]
	}).(LoadBalancerPrivateNetworkOutput)
}

type GetACLsAcl struct {
	// The action that has been undertaken when an ACL filter had matched.
	Actions []GetACLsAclAction `pulumi:"actions"`
	// The date at which the ACL was created (RFC 3339 format).
	CreatedAt string `pulumi:"createdAt"`
	// The description of the ACL resource.
	Description string `pulumi:"description"`
	// The frontend ID this ACL is attached to. ACLs with a frontend ID like it are listed.
	// > **Important:** LB Frontends' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
	FrontendId string `pulumi:"frontendId"`
	// The associated ACL ID.
	// > **Important:** LB ACLs' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
	Id string `pulumi:"id"`
	// The order between the ACLs.
	Index int `pulumi:"index"`
	// The ACL match rule.
	Matches []GetACLsAclMatch `pulumi:"matches"`
	// The ACL name used as filter. ACLs with a name like it are listed.
	Name string `pulumi:"name"`
	// The date at which the ACL was last updated (RFC 3339 format).
	UpdateAt string `pulumi:"updateAt"`
}

// GetACLsAclInput is an input type that accepts GetACLsAclArgs and GetACLsAclOutput values.
// You can construct a concrete instance of `GetACLsAclInput` via:
//
//	GetACLsAclArgs{...}
type GetACLsAclInput interface {
	pulumi.Input

	ToGetACLsAclOutput() GetACLsAclOutput
	ToGetACLsAclOutputWithContext(context.Context) GetACLsAclOutput
}

type GetACLsAclArgs struct {
	// The action that has been undertaken when an ACL filter had matched.
	Actions GetACLsAclActionArrayInput `pulumi:"actions"`
	// The date at which the ACL was created (RFC 3339 format).
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of the ACL resource.
	Description pulumi.StringInput `pulumi:"description"`
	// The frontend ID this ACL is attached to. ACLs with a frontend ID like it are listed.
	// > **Important:** LB Frontends' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
	FrontendId pulumi.StringInput `pulumi:"frontendId"`
	// The associated ACL ID.
	// > **Important:** LB ACLs' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
	Id pulumi.StringInput `pulumi:"id"`
	// The order between the ACLs.
	Index pulumi.IntInput `pulumi:"index"`
	// The ACL match rule.
	Matches GetACLsAclMatchArrayInput `pulumi:"matches"`
	// The ACL name used as filter. ACLs with a name like it are listed.
	Name pulumi.StringInput `pulumi:"name"`
	// The date at which the ACL was last updated (RFC 3339 format).
	UpdateAt pulumi.StringInput `pulumi:"updateAt"`
}

func (GetACLsAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetACLsAcl)(nil)).Elem()
}

func (i GetACLsAclArgs) ToGetACLsAclOutput() GetACLsAclOutput {
	return i.ToGetACLsAclOutputWithContext(context.Background())
}

func (i GetACLsAclArgs) ToGetACLsAclOutputWithContext(ctx context.Context) GetACLsAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetACLsAclOutput)
}

// GetACLsAclArrayInput is an input type that accepts GetACLsAclArray and GetACLsAclArrayOutput values.
// You can construct a concrete instance of `GetACLsAclArrayInput` via:
//
//	GetACLsAclArray{ GetACLsAclArgs{...} }
type GetACLsAclArrayInput interface {
	pulumi.Input

	ToGetACLsAclArrayOutput() GetACLsAclArrayOutput
	ToGetACLsAclArrayOutputWithContext(context.Context) GetACLsAclArrayOutput
}

type GetACLsAclArray []GetACLsAclInput

func (GetACLsAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetACLsAcl)(nil)).Elem()
}

func (i GetACLsAclArray) ToGetACLsAclArrayOutput() GetACLsAclArrayOutput {
	return i.ToGetACLsAclArrayOutputWithContext(context.Background())
}

func (i GetACLsAclArray) ToGetACLsAclArrayOutputWithContext(ctx context.Context) GetACLsAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetACLsAclArrayOutput)
}

type GetACLsAclOutput struct{ *pulumi.OutputState }

func (GetACLsAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetACLsAcl)(nil)).Elem()
}

func (o GetACLsAclOutput) ToGetACLsAclOutput() GetACLsAclOutput {
	return o
}

func (o GetACLsAclOutput) ToGetACLsAclOutputWithContext(ctx context.Context) GetACLsAclOutput {
	return o
}

// The action that has been undertaken when an ACL filter had matched.
func (o GetACLsAclOutput) Actions() GetACLsAclActionArrayOutput {
	return o.ApplyT(func(v GetACLsAcl) []GetACLsAclAction { return v.Actions }).(GetACLsAclActionArrayOutput)
}

// The date at which the ACL was created (RFC 3339 format).
func (o GetACLsAclOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetACLsAcl) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the ACL resource.
func (o GetACLsAclOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetACLsAcl) string { return v.Description }).(pulumi.StringOutput)
}

// The frontend ID this ACL is attached to. ACLs with a frontend ID like it are listed.
// > **Important:** LB Frontends' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
func (o GetACLsAclOutput) FrontendId() pulumi.StringOutput {
	return o.ApplyT(func(v GetACLsAcl) string { return v.FrontendId }).(pulumi.StringOutput)
}

// The associated ACL ID.
// > **Important:** LB ACLs' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
func (o GetACLsAclOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetACLsAcl) string { return v.Id }).(pulumi.StringOutput)
}

// The order between the ACLs.
func (o GetACLsAclOutput) Index() pulumi.IntOutput {
	return o.ApplyT(func(v GetACLsAcl) int { return v.Index }).(pulumi.IntOutput)
}

// The ACL match rule.
func (o GetACLsAclOutput) Matches() GetACLsAclMatchArrayOutput {
	return o.ApplyT(func(v GetACLsAcl) []GetACLsAclMatch { return v.Matches }).(GetACLsAclMatchArrayOutput)
}

// The ACL name used as filter. ACLs with a name like it are listed.
func (o GetACLsAclOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetACLsAcl) string { return v.Name }).(pulumi.StringOutput)
}

// The date at which the ACL was last updated (RFC 3339 format).
func (o GetACLsAclOutput) UpdateAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetACLsAcl) string { return v.UpdateAt }).(pulumi.StringOutput)
}

type GetACLsAclArrayOutput struct{ *pulumi.OutputState }

func (GetACLsAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetACLsAcl)(nil)).Elem()
}

func (o GetACLsAclArrayOutput) ToGetACLsAclArrayOutput() GetACLsAclArrayOutput {
	return o
}

func (o GetACLsAclArrayOutput) ToGetACLsAclArrayOutputWithContext(ctx context.Context) GetACLsAclArrayOutput {
	return o
}

func (o GetACLsAclArrayOutput) Index(i pulumi.IntInput) GetACLsAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetACLsAcl {
		return vs[0].([]GetACLsAcl)[vs[1].(int)]
	}).(GetACLsAclOutput)
}

type GetACLsAclAction struct {
	// Redirect parameters when using an ACL with `redirect` action.
	Redirects []GetACLsAclActionRedirect `pulumi:"redirects"`
	// The redirect type.
	Type string `pulumi:"type"`
}

// GetACLsAclActionInput is an input type that accepts GetACLsAclActionArgs and GetACLsAclActionOutput values.
// You can construct a concrete instance of `GetACLsAclActionInput` via:
//
//	GetACLsAclActionArgs{...}
type GetACLsAclActionInput interface {
	pulumi.Input

	ToGetACLsAclActionOutput() GetACLsAclActionOutput
	ToGetACLsAclActionOutputWithContext(context.Context) GetACLsAclActionOutput
}

type GetACLsAclActionArgs struct {
	// Redirect parameters when using an ACL with `redirect` action.
	Redirects GetACLsAclActionRedirectArrayInput `pulumi:"redirects"`
	// The redirect type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetACLsAclActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetACLsAclAction)(nil)).Elem()
}

func (i GetACLsAclActionArgs) ToGetACLsAclActionOutput() GetACLsAclActionOutput {
	return i.ToGetACLsAclActionOutputWithContext(context.Background())
}

func (i GetACLsAclActionArgs) ToGetACLsAclActionOutputWithContext(ctx context.Context) GetACLsAclActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetACLsAclActionOutput)
}

// GetACLsAclActionArrayInput is an input type that accepts GetACLsAclActionArray and GetACLsAclActionArrayOutput values.
// You can construct a concrete instance of `GetACLsAclActionArrayInput` via:
//
//	GetACLsAclActionArray{ GetACLsAclActionArgs{...} }
type GetACLsAclActionArrayInput interface {
	pulumi.Input

	ToGetACLsAclActionArrayOutput() GetACLsAclActionArrayOutput
	ToGetACLsAclActionArrayOutputWithContext(context.Context) GetACLsAclActionArrayOutput
}

type GetACLsAclActionArray []GetACLsAclActionInput

func (GetACLsAclActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetACLsAclAction)(nil)).Elem()
}

func (i GetACLsAclActionArray) ToGetACLsAclActionArrayOutput() GetACLsAclActionArrayOutput {
	return i.ToGetACLsAclActionArrayOutputWithContext(context.Background())
}

func (i GetACLsAclActionArray) ToGetACLsAclActionArrayOutputWithContext(ctx context.Context) GetACLsAclActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetACLsAclActionArrayOutput)
}

type GetACLsAclActionOutput struct{ *pulumi.OutputState }

func (GetACLsAclActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetACLsAclAction)(nil)).Elem()
}

func (o GetACLsAclActionOutput) ToGetACLsAclActionOutput() GetACLsAclActionOutput {
	return o
}

func (o GetACLsAclActionOutput) ToGetACLsAclActionOutputWithContext(ctx context.Context) GetACLsAclActionOutput {
	return o
}

// Redirect parameters when using an ACL with `redirect` action.
func (o GetACLsAclActionOutput) Redirects() GetACLsAclActionRedirectArrayOutput {
	return o.ApplyT(func(v GetACLsAclAction) []GetACLsAclActionRedirect { return v.Redirects }).(GetACLsAclActionRedirectArrayOutput)
}

// The redirect type.
func (o GetACLsAclActionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetACLsAclAction) string { return v.Type }).(pulumi.StringOutput)
}

type GetACLsAclActionArrayOutput struct{ *pulumi.OutputState }

func (GetACLsAclActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetACLsAclAction)(nil)).Elem()
}

func (o GetACLsAclActionArrayOutput) ToGetACLsAclActionArrayOutput() GetACLsAclActionArrayOutput {
	return o
}

func (o GetACLsAclActionArrayOutput) ToGetACLsAclActionArrayOutputWithContext(ctx context.Context) GetACLsAclActionArrayOutput {
	return o
}

func (o GetACLsAclActionArrayOutput) Index(i pulumi.IntInput) GetACLsAclActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetACLsAclAction {
		return vs[0].([]GetACLsAclAction)[vs[1].(int)]
	}).(GetACLsAclActionOutput)
}

type GetACLsAclActionRedirect struct {
	// The HTTP redirect code used.
	Code int `pulumi:"code"`
	// The URL used in case of a location redirect or the scheme name that replaces the request's original scheme.
	Target string `pulumi:"target"`
	// The redirect type.
	Type string `pulumi:"type"`
}

// GetACLsAclActionRedirectInput is an input type that accepts GetACLsAclActionRedirectArgs and GetACLsAclActionRedirectOutput values.
// You can construct a concrete instance of `GetACLsAclActionRedirectInput` via:
//
//	GetACLsAclActionRedirectArgs{...}
type GetACLsAclActionRedirectInput interface {
	pulumi.Input

	ToGetACLsAclActionRedirectOutput() GetACLsAclActionRedirectOutput
	ToGetACLsAclActionRedirectOutputWithContext(context.Context) GetACLsAclActionRedirectOutput
}

type GetACLsAclActionRedirectArgs struct {
	// The HTTP redirect code used.
	Code pulumi.IntInput `pulumi:"code"`
	// The URL used in case of a location redirect or the scheme name that replaces the request's original scheme.
	Target pulumi.StringInput `pulumi:"target"`
	// The redirect type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetACLsAclActionRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetACLsAclActionRedirect)(nil)).Elem()
}

func (i GetACLsAclActionRedirectArgs) ToGetACLsAclActionRedirectOutput() GetACLsAclActionRedirectOutput {
	return i.ToGetACLsAclActionRedirectOutputWithContext(context.Background())
}

func (i GetACLsAclActionRedirectArgs) ToGetACLsAclActionRedirectOutputWithContext(ctx context.Context) GetACLsAclActionRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetACLsAclActionRedirectOutput)
}

// GetACLsAclActionRedirectArrayInput is an input type that accepts GetACLsAclActionRedirectArray and GetACLsAclActionRedirectArrayOutput values.
// You can construct a concrete instance of `GetACLsAclActionRedirectArrayInput` via:
//
//	GetACLsAclActionRedirectArray{ GetACLsAclActionRedirectArgs{...} }
type GetACLsAclActionRedirectArrayInput interface {
	pulumi.Input

	ToGetACLsAclActionRedirectArrayOutput() GetACLsAclActionRedirectArrayOutput
	ToGetACLsAclActionRedirectArrayOutputWithContext(context.Context) GetACLsAclActionRedirectArrayOutput
}

type GetACLsAclActionRedirectArray []GetACLsAclActionRedirectInput

func (GetACLsAclActionRedirectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetACLsAclActionRedirect)(nil)).Elem()
}

func (i GetACLsAclActionRedirectArray) ToGetACLsAclActionRedirectArrayOutput() GetACLsAclActionRedirectArrayOutput {
	return i.ToGetACLsAclActionRedirectArrayOutputWithContext(context.Background())
}

func (i GetACLsAclActionRedirectArray) ToGetACLsAclActionRedirectArrayOutputWithContext(ctx context.Context) GetACLsAclActionRedirectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetACLsAclActionRedirectArrayOutput)
}

type GetACLsAclActionRedirectOutput struct{ *pulumi.OutputState }

func (GetACLsAclActionRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetACLsAclActionRedirect)(nil)).Elem()
}

func (o GetACLsAclActionRedirectOutput) ToGetACLsAclActionRedirectOutput() GetACLsAclActionRedirectOutput {
	return o
}

func (o GetACLsAclActionRedirectOutput) ToGetACLsAclActionRedirectOutputWithContext(ctx context.Context) GetACLsAclActionRedirectOutput {
	return o
}

// The HTTP redirect code used.
func (o GetACLsAclActionRedirectOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v GetACLsAclActionRedirect) int { return v.Code }).(pulumi.IntOutput)
}

// The URL used in case of a location redirect or the scheme name that replaces the request's original scheme.
func (o GetACLsAclActionRedirectOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v GetACLsAclActionRedirect) string { return v.Target }).(pulumi.StringOutput)
}

// The redirect type.
func (o GetACLsAclActionRedirectOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetACLsAclActionRedirect) string { return v.Type }).(pulumi.StringOutput)
}

type GetACLsAclActionRedirectArrayOutput struct{ *pulumi.OutputState }

func (GetACLsAclActionRedirectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetACLsAclActionRedirect)(nil)).Elem()
}

func (o GetACLsAclActionRedirectArrayOutput) ToGetACLsAclActionRedirectArrayOutput() GetACLsAclActionRedirectArrayOutput {
	return o
}

func (o GetACLsAclActionRedirectArrayOutput) ToGetACLsAclActionRedirectArrayOutputWithContext(ctx context.Context) GetACLsAclActionRedirectArrayOutput {
	return o
}

func (o GetACLsAclActionRedirectArrayOutput) Index(i pulumi.IntInput) GetACLsAclActionRedirectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetACLsAclActionRedirect {
		return vs[0].([]GetACLsAclActionRedirect)[vs[1].(int)]
	}).(GetACLsAclActionRedirectOutput)
}

type GetACLsAclMatch struct {
	// The matched HTTP filter.
	HttpFilter string `pulumi:"httpFilter"`
	// A list of possible values for the HTTP filter based on the HTTP header.
	HttpFilterOption string `pulumi:"httpFilterOption"`
	// The possible values matched for a given HTTP filter.
	HttpFilterValues []string `pulumi:"httpFilterValues"`
	// The condition will be of type "unless" if invert is set to `true`
	Invert bool `pulumi:"invert"`
	// A list of matched IPs or CIDR v4/v6 addresses of the client of the session.
	IpSubnets []string `pulumi:"ipSubnets"`
}

// GetACLsAclMatchInput is an input type that accepts GetACLsAclMatchArgs and GetACLsAclMatchOutput values.
// You can construct a concrete instance of `GetACLsAclMatchInput` via:
//
//	GetACLsAclMatchArgs{...}
type GetACLsAclMatchInput interface {
	pulumi.Input

	ToGetACLsAclMatchOutput() GetACLsAclMatchOutput
	ToGetACLsAclMatchOutputWithContext(context.Context) GetACLsAclMatchOutput
}

type GetACLsAclMatchArgs struct {
	// The matched HTTP filter.
	HttpFilter pulumi.StringInput `pulumi:"httpFilter"`
	// A list of possible values for the HTTP filter based on the HTTP header.
	HttpFilterOption pulumi.StringInput `pulumi:"httpFilterOption"`
	// The possible values matched for a given HTTP filter.
	HttpFilterValues pulumi.StringArrayInput `pulumi:"httpFilterValues"`
	// The condition will be of type "unless" if invert is set to `true`
	Invert pulumi.BoolInput `pulumi:"invert"`
	// A list of matched IPs or CIDR v4/v6 addresses of the client of the session.
	IpSubnets pulumi.StringArrayInput `pulumi:"ipSubnets"`
}

func (GetACLsAclMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetACLsAclMatch)(nil)).Elem()
}

func (i GetACLsAclMatchArgs) ToGetACLsAclMatchOutput() GetACLsAclMatchOutput {
	return i.ToGetACLsAclMatchOutputWithContext(context.Background())
}

func (i GetACLsAclMatchArgs) ToGetACLsAclMatchOutputWithContext(ctx context.Context) GetACLsAclMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetACLsAclMatchOutput)
}

// GetACLsAclMatchArrayInput is an input type that accepts GetACLsAclMatchArray and GetACLsAclMatchArrayOutput values.
// You can construct a concrete instance of `GetACLsAclMatchArrayInput` via:
//
//	GetACLsAclMatchArray{ GetACLsAclMatchArgs{...} }
type GetACLsAclMatchArrayInput interface {
	pulumi.Input

	ToGetACLsAclMatchArrayOutput() GetACLsAclMatchArrayOutput
	ToGetACLsAclMatchArrayOutputWithContext(context.Context) GetACLsAclMatchArrayOutput
}

type GetACLsAclMatchArray []GetACLsAclMatchInput

func (GetACLsAclMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetACLsAclMatch)(nil)).Elem()
}

func (i GetACLsAclMatchArray) ToGetACLsAclMatchArrayOutput() GetACLsAclMatchArrayOutput {
	return i.ToGetACLsAclMatchArrayOutputWithContext(context.Background())
}

func (i GetACLsAclMatchArray) ToGetACLsAclMatchArrayOutputWithContext(ctx context.Context) GetACLsAclMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetACLsAclMatchArrayOutput)
}

type GetACLsAclMatchOutput struct{ *pulumi.OutputState }

func (GetACLsAclMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetACLsAclMatch)(nil)).Elem()
}

func (o GetACLsAclMatchOutput) ToGetACLsAclMatchOutput() GetACLsAclMatchOutput {
	return o
}

func (o GetACLsAclMatchOutput) ToGetACLsAclMatchOutputWithContext(ctx context.Context) GetACLsAclMatchOutput {
	return o
}

// The matched HTTP filter.
func (o GetACLsAclMatchOutput) HttpFilter() pulumi.StringOutput {
	return o.ApplyT(func(v GetACLsAclMatch) string { return v.HttpFilter }).(pulumi.StringOutput)
}

// A list of possible values for the HTTP filter based on the HTTP header.
func (o GetACLsAclMatchOutput) HttpFilterOption() pulumi.StringOutput {
	return o.ApplyT(func(v GetACLsAclMatch) string { return v.HttpFilterOption }).(pulumi.StringOutput)
}

// The possible values matched for a given HTTP filter.
func (o GetACLsAclMatchOutput) HttpFilterValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetACLsAclMatch) []string { return v.HttpFilterValues }).(pulumi.StringArrayOutput)
}

// The condition will be of type "unless" if invert is set to `true`
func (o GetACLsAclMatchOutput) Invert() pulumi.BoolOutput {
	return o.ApplyT(func(v GetACLsAclMatch) bool { return v.Invert }).(pulumi.BoolOutput)
}

// A list of matched IPs or CIDR v4/v6 addresses of the client of the session.
func (o GetACLsAclMatchOutput) IpSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetACLsAclMatch) []string { return v.IpSubnets }).(pulumi.StringArrayOutput)
}

type GetACLsAclMatchArrayOutput struct{ *pulumi.OutputState }

func (GetACLsAclMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetACLsAclMatch)(nil)).Elem()
}

func (o GetACLsAclMatchArrayOutput) ToGetACLsAclMatchArrayOutput() GetACLsAclMatchArrayOutput {
	return o
}

func (o GetACLsAclMatchArrayOutput) ToGetACLsAclMatchArrayOutputWithContext(ctx context.Context) GetACLsAclMatchArrayOutput {
	return o
}

func (o GetACLsAclMatchArrayOutput) Index(i pulumi.IntInput) GetACLsAclMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetACLsAclMatch {
		return vs[0].([]GetACLsAclMatch)[vs[1].(int)]
	}).(GetACLsAclMatchOutput)
}

type GetBackendHealthCheckHttp struct {
	Code       int    `pulumi:"code"`
	HostHeader string `pulumi:"hostHeader"`
	Method     string `pulumi:"method"`
	Sni        string `pulumi:"sni"`
	Uri        string `pulumi:"uri"`
}

// GetBackendHealthCheckHttpInput is an input type that accepts GetBackendHealthCheckHttpArgs and GetBackendHealthCheckHttpOutput values.
// You can construct a concrete instance of `GetBackendHealthCheckHttpInput` via:
//
//	GetBackendHealthCheckHttpArgs{...}
type GetBackendHealthCheckHttpInput interface {
	pulumi.Input

	ToGetBackendHealthCheckHttpOutput() GetBackendHealthCheckHttpOutput
	ToGetBackendHealthCheckHttpOutputWithContext(context.Context) GetBackendHealthCheckHttpOutput
}

type GetBackendHealthCheckHttpArgs struct {
	Code       pulumi.IntInput    `pulumi:"code"`
	HostHeader pulumi.StringInput `pulumi:"hostHeader"`
	Method     pulumi.StringInput `pulumi:"method"`
	Sni        pulumi.StringInput `pulumi:"sni"`
	Uri        pulumi.StringInput `pulumi:"uri"`
}

func (GetBackendHealthCheckHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendHealthCheckHttp)(nil)).Elem()
}

func (i GetBackendHealthCheckHttpArgs) ToGetBackendHealthCheckHttpOutput() GetBackendHealthCheckHttpOutput {
	return i.ToGetBackendHealthCheckHttpOutputWithContext(context.Background())
}

func (i GetBackendHealthCheckHttpArgs) ToGetBackendHealthCheckHttpOutputWithContext(ctx context.Context) GetBackendHealthCheckHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendHealthCheckHttpOutput)
}

// GetBackendHealthCheckHttpArrayInput is an input type that accepts GetBackendHealthCheckHttpArray and GetBackendHealthCheckHttpArrayOutput values.
// You can construct a concrete instance of `GetBackendHealthCheckHttpArrayInput` via:
//
//	GetBackendHealthCheckHttpArray{ GetBackendHealthCheckHttpArgs{...} }
type GetBackendHealthCheckHttpArrayInput interface {
	pulumi.Input

	ToGetBackendHealthCheckHttpArrayOutput() GetBackendHealthCheckHttpArrayOutput
	ToGetBackendHealthCheckHttpArrayOutputWithContext(context.Context) GetBackendHealthCheckHttpArrayOutput
}

type GetBackendHealthCheckHttpArray []GetBackendHealthCheckHttpInput

func (GetBackendHealthCheckHttpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendHealthCheckHttp)(nil)).Elem()
}

func (i GetBackendHealthCheckHttpArray) ToGetBackendHealthCheckHttpArrayOutput() GetBackendHealthCheckHttpArrayOutput {
	return i.ToGetBackendHealthCheckHttpArrayOutputWithContext(context.Background())
}

func (i GetBackendHealthCheckHttpArray) ToGetBackendHealthCheckHttpArrayOutputWithContext(ctx context.Context) GetBackendHealthCheckHttpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendHealthCheckHttpArrayOutput)
}

type GetBackendHealthCheckHttpOutput struct{ *pulumi.OutputState }

func (GetBackendHealthCheckHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendHealthCheckHttp)(nil)).Elem()
}

func (o GetBackendHealthCheckHttpOutput) ToGetBackendHealthCheckHttpOutput() GetBackendHealthCheckHttpOutput {
	return o
}

func (o GetBackendHealthCheckHttpOutput) ToGetBackendHealthCheckHttpOutputWithContext(ctx context.Context) GetBackendHealthCheckHttpOutput {
	return o
}

func (o GetBackendHealthCheckHttpOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendHealthCheckHttp) int { return v.Code }).(pulumi.IntOutput)
}

func (o GetBackendHealthCheckHttpOutput) HostHeader() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendHealthCheckHttp) string { return v.HostHeader }).(pulumi.StringOutput)
}

func (o GetBackendHealthCheckHttpOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendHealthCheckHttp) string { return v.Method }).(pulumi.StringOutput)
}

func (o GetBackendHealthCheckHttpOutput) Sni() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendHealthCheckHttp) string { return v.Sni }).(pulumi.StringOutput)
}

func (o GetBackendHealthCheckHttpOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendHealthCheckHttp) string { return v.Uri }).(pulumi.StringOutput)
}

type GetBackendHealthCheckHttpArrayOutput struct{ *pulumi.OutputState }

func (GetBackendHealthCheckHttpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendHealthCheckHttp)(nil)).Elem()
}

func (o GetBackendHealthCheckHttpArrayOutput) ToGetBackendHealthCheckHttpArrayOutput() GetBackendHealthCheckHttpArrayOutput {
	return o
}

func (o GetBackendHealthCheckHttpArrayOutput) ToGetBackendHealthCheckHttpArrayOutputWithContext(ctx context.Context) GetBackendHealthCheckHttpArrayOutput {
	return o
}

func (o GetBackendHealthCheckHttpArrayOutput) Index(i pulumi.IntInput) GetBackendHealthCheckHttpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackendHealthCheckHttp {
		return vs[0].([]GetBackendHealthCheckHttp)[vs[1].(int)]
	}).(GetBackendHealthCheckHttpOutput)
}

type GetBackendHealthCheckTcp struct {
}

// GetBackendHealthCheckTcpInput is an input type that accepts GetBackendHealthCheckTcpArgs and GetBackendHealthCheckTcpOutput values.
// You can construct a concrete instance of `GetBackendHealthCheckTcpInput` via:
//
//	GetBackendHealthCheckTcpArgs{...}
type GetBackendHealthCheckTcpInput interface {
	pulumi.Input

	ToGetBackendHealthCheckTcpOutput() GetBackendHealthCheckTcpOutput
	ToGetBackendHealthCheckTcpOutputWithContext(context.Context) GetBackendHealthCheckTcpOutput
}

type GetBackendHealthCheckTcpArgs struct {
}

func (GetBackendHealthCheckTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendHealthCheckTcp)(nil)).Elem()
}

func (i GetBackendHealthCheckTcpArgs) ToGetBackendHealthCheckTcpOutput() GetBackendHealthCheckTcpOutput {
	return i.ToGetBackendHealthCheckTcpOutputWithContext(context.Background())
}

func (i GetBackendHealthCheckTcpArgs) ToGetBackendHealthCheckTcpOutputWithContext(ctx context.Context) GetBackendHealthCheckTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendHealthCheckTcpOutput)
}

// GetBackendHealthCheckTcpArrayInput is an input type that accepts GetBackendHealthCheckTcpArray and GetBackendHealthCheckTcpArrayOutput values.
// You can construct a concrete instance of `GetBackendHealthCheckTcpArrayInput` via:
//
//	GetBackendHealthCheckTcpArray{ GetBackendHealthCheckTcpArgs{...} }
type GetBackendHealthCheckTcpArrayInput interface {
	pulumi.Input

	ToGetBackendHealthCheckTcpArrayOutput() GetBackendHealthCheckTcpArrayOutput
	ToGetBackendHealthCheckTcpArrayOutputWithContext(context.Context) GetBackendHealthCheckTcpArrayOutput
}

type GetBackendHealthCheckTcpArray []GetBackendHealthCheckTcpInput

func (GetBackendHealthCheckTcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendHealthCheckTcp)(nil)).Elem()
}

func (i GetBackendHealthCheckTcpArray) ToGetBackendHealthCheckTcpArrayOutput() GetBackendHealthCheckTcpArrayOutput {
	return i.ToGetBackendHealthCheckTcpArrayOutputWithContext(context.Background())
}

func (i GetBackendHealthCheckTcpArray) ToGetBackendHealthCheckTcpArrayOutputWithContext(ctx context.Context) GetBackendHealthCheckTcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendHealthCheckTcpArrayOutput)
}

type GetBackendHealthCheckTcpOutput struct{ *pulumi.OutputState }

func (GetBackendHealthCheckTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendHealthCheckTcp)(nil)).Elem()
}

func (o GetBackendHealthCheckTcpOutput) ToGetBackendHealthCheckTcpOutput() GetBackendHealthCheckTcpOutput {
	return o
}

func (o GetBackendHealthCheckTcpOutput) ToGetBackendHealthCheckTcpOutputWithContext(ctx context.Context) GetBackendHealthCheckTcpOutput {
	return o
}

type GetBackendHealthCheckTcpArrayOutput struct{ *pulumi.OutputState }

func (GetBackendHealthCheckTcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendHealthCheckTcp)(nil)).Elem()
}

func (o GetBackendHealthCheckTcpArrayOutput) ToGetBackendHealthCheckTcpArrayOutput() GetBackendHealthCheckTcpArrayOutput {
	return o
}

func (o GetBackendHealthCheckTcpArrayOutput) ToGetBackendHealthCheckTcpArrayOutputWithContext(ctx context.Context) GetBackendHealthCheckTcpArrayOutput {
	return o
}

func (o GetBackendHealthCheckTcpArrayOutput) Index(i pulumi.IntInput) GetBackendHealthCheckTcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackendHealthCheckTcp {
		return vs[0].([]GetBackendHealthCheckTcp)[vs[1].(int)]
	}).(GetBackendHealthCheckTcpOutput)
}

type GetBackendsBackend struct {
	// The date at which the backend was created (RFC 3339 format).
	CreatedAt string `pulumi:"createdAt"`
	// Scaleway S3 bucket website to be served in case all backend servers are down.
	FailoverHost string `pulumi:"failoverHost"`
	// User sessions will be forwarded to this port of backend servers.
	ForwardPort int `pulumi:"forwardPort"`
	// Load balancing algorithm.
	ForwardPortAlgorithm string `pulumi:"forwardPortAlgorithm"`
	// Backend protocol.
	ForwardProtocol string `pulumi:"forwardProtocol"`
	// Interval between two HC requests.
	HealthCheckDelay string `pulumi:"healthCheckDelay"`
	// This block enable HTTP health check.
	HealthCheckHttp []GetBackendsBackendHealthCheckHttp `pulumi:"healthCheckHttp"`
	// This block enable HTTPS health check.
	HealthCheckHttps []GetBackendsBackendHealthCheckHttp `pulumi:"healthCheckHttps"`
	// Number of allowed failed HC requests before the backend server is marked down.
	HealthCheckMaxRetries int `pulumi:"healthCheckMaxRetries"`
	// Port the HC requests will be sent to.
	HealthCheckPort int `pulumi:"healthCheckPort"`
	// This block enable TCP health check.
	HealthCheckTcps []GetBackendsBackendHealthCheckTcp `pulumi:"healthCheckTcps"`
	// Timeout before we consider a HC request failed.
	HealthCheckTimeout string `pulumi:"healthCheckTimeout"`
	// The associated backend ID.
	Id string `pulumi:"id"`
	// Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection.
	IgnoreSslServerVerify bool `pulumi:"ignoreSslServerVerify"`
	// The load-balancer ID this backend is attached to. backends with a LB ID like it are listed.
	LbId string `pulumi:"lbId"`
	// The backend name used as filter. Backends with a name like it are listed.
	Name string `pulumi:"name"`
	// Modify what occurs when a backend server is marked down.
	OnMarkedDownAction string `pulumi:"onMarkedDownAction"`
	// The type of PROXY protocol.
	ProxyProtocol string `pulumi:"proxyProtocol"`
	// List of backend server IP addresses.
	ServerIps []string `pulumi:"serverIps"`
	// Enables SSL between load balancer and backend servers.
	SslBridging bool `pulumi:"sslBridging"`
	// Enables cookie-based session persistence.
	StickySessions string `pulumi:"stickySessions"`
	// Cookie name for sticky sessions.
	StickySessionsCookieName string `pulumi:"stickySessionsCookieName"`
	// Maximum initial server connection establishment time.
	TimeoutConnect string `pulumi:"timeoutConnect"`
	// Maximum server connection inactivity time.
	TimeoutServer string `pulumi:"timeoutServer"`
	// Maximum tunnel inactivity time.
	TimeoutTunnel string `pulumi:"timeoutTunnel"`
	// The date at which the backend was last updated (RFC 3339 format).
	UpdateAt string `pulumi:"updateAt"`
}

// GetBackendsBackendInput is an input type that accepts GetBackendsBackendArgs and GetBackendsBackendOutput values.
// You can construct a concrete instance of `GetBackendsBackendInput` via:
//
//	GetBackendsBackendArgs{...}
type GetBackendsBackendInput interface {
	pulumi.Input

	ToGetBackendsBackendOutput() GetBackendsBackendOutput
	ToGetBackendsBackendOutputWithContext(context.Context) GetBackendsBackendOutput
}

type GetBackendsBackendArgs struct {
	// The date at which the backend was created (RFC 3339 format).
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Scaleway S3 bucket website to be served in case all backend servers are down.
	FailoverHost pulumi.StringInput `pulumi:"failoverHost"`
	// User sessions will be forwarded to this port of backend servers.
	ForwardPort pulumi.IntInput `pulumi:"forwardPort"`
	// Load balancing algorithm.
	ForwardPortAlgorithm pulumi.StringInput `pulumi:"forwardPortAlgorithm"`
	// Backend protocol.
	ForwardProtocol pulumi.StringInput `pulumi:"forwardProtocol"`
	// Interval between two HC requests.
	HealthCheckDelay pulumi.StringInput `pulumi:"healthCheckDelay"`
	// This block enable HTTP health check.
	HealthCheckHttp GetBackendsBackendHealthCheckHttpArrayInput `pulumi:"healthCheckHttp"`
	// This block enable HTTPS health check.
	HealthCheckHttps GetBackendsBackendHealthCheckHttpArrayInput `pulumi:"healthCheckHttps"`
	// Number of allowed failed HC requests before the backend server is marked down.
	HealthCheckMaxRetries pulumi.IntInput `pulumi:"healthCheckMaxRetries"`
	// Port the HC requests will be sent to.
	HealthCheckPort pulumi.IntInput `pulumi:"healthCheckPort"`
	// This block enable TCP health check.
	HealthCheckTcps GetBackendsBackendHealthCheckTcpArrayInput `pulumi:"healthCheckTcps"`
	// Timeout before we consider a HC request failed.
	HealthCheckTimeout pulumi.StringInput `pulumi:"healthCheckTimeout"`
	// The associated backend ID.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection.
	IgnoreSslServerVerify pulumi.BoolInput `pulumi:"ignoreSslServerVerify"`
	// The load-balancer ID this backend is attached to. backends with a LB ID like it are listed.
	LbId pulumi.StringInput `pulumi:"lbId"`
	// The backend name used as filter. Backends with a name like it are listed.
	Name pulumi.StringInput `pulumi:"name"`
	// Modify what occurs when a backend server is marked down.
	OnMarkedDownAction pulumi.StringInput `pulumi:"onMarkedDownAction"`
	// The type of PROXY protocol.
	ProxyProtocol pulumi.StringInput `pulumi:"proxyProtocol"`
	// List of backend server IP addresses.
	ServerIps pulumi.StringArrayInput `pulumi:"serverIps"`
	// Enables SSL between load balancer and backend servers.
	SslBridging pulumi.BoolInput `pulumi:"sslBridging"`
	// Enables cookie-based session persistence.
	StickySessions pulumi.StringInput `pulumi:"stickySessions"`
	// Cookie name for sticky sessions.
	StickySessionsCookieName pulumi.StringInput `pulumi:"stickySessionsCookieName"`
	// Maximum initial server connection establishment time.
	TimeoutConnect pulumi.StringInput `pulumi:"timeoutConnect"`
	// Maximum server connection inactivity time.
	TimeoutServer pulumi.StringInput `pulumi:"timeoutServer"`
	// Maximum tunnel inactivity time.
	TimeoutTunnel pulumi.StringInput `pulumi:"timeoutTunnel"`
	// The date at which the backend was last updated (RFC 3339 format).
	UpdateAt pulumi.StringInput `pulumi:"updateAt"`
}

func (GetBackendsBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendsBackend)(nil)).Elem()
}

func (i GetBackendsBackendArgs) ToGetBackendsBackendOutput() GetBackendsBackendOutput {
	return i.ToGetBackendsBackendOutputWithContext(context.Background())
}

func (i GetBackendsBackendArgs) ToGetBackendsBackendOutputWithContext(ctx context.Context) GetBackendsBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendsBackendOutput)
}

// GetBackendsBackendArrayInput is an input type that accepts GetBackendsBackendArray and GetBackendsBackendArrayOutput values.
// You can construct a concrete instance of `GetBackendsBackendArrayInput` via:
//
//	GetBackendsBackendArray{ GetBackendsBackendArgs{...} }
type GetBackendsBackendArrayInput interface {
	pulumi.Input

	ToGetBackendsBackendArrayOutput() GetBackendsBackendArrayOutput
	ToGetBackendsBackendArrayOutputWithContext(context.Context) GetBackendsBackendArrayOutput
}

type GetBackendsBackendArray []GetBackendsBackendInput

func (GetBackendsBackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendsBackend)(nil)).Elem()
}

func (i GetBackendsBackendArray) ToGetBackendsBackendArrayOutput() GetBackendsBackendArrayOutput {
	return i.ToGetBackendsBackendArrayOutputWithContext(context.Background())
}

func (i GetBackendsBackendArray) ToGetBackendsBackendArrayOutputWithContext(ctx context.Context) GetBackendsBackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendsBackendArrayOutput)
}

type GetBackendsBackendOutput struct{ *pulumi.OutputState }

func (GetBackendsBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendsBackend)(nil)).Elem()
}

func (o GetBackendsBackendOutput) ToGetBackendsBackendOutput() GetBackendsBackendOutput {
	return o
}

func (o GetBackendsBackendOutput) ToGetBackendsBackendOutputWithContext(ctx context.Context) GetBackendsBackendOutput {
	return o
}

// The date at which the backend was created (RFC 3339 format).
func (o GetBackendsBackendOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Scaleway S3 bucket website to be served in case all backend servers are down.
func (o GetBackendsBackendOutput) FailoverHost() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.FailoverHost }).(pulumi.StringOutput)
}

// User sessions will be forwarded to this port of backend servers.
func (o GetBackendsBackendOutput) ForwardPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendsBackend) int { return v.ForwardPort }).(pulumi.IntOutput)
}

// Load balancing algorithm.
func (o GetBackendsBackendOutput) ForwardPortAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.ForwardPortAlgorithm }).(pulumi.StringOutput)
}

// Backend protocol.
func (o GetBackendsBackendOutput) ForwardProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.ForwardProtocol }).(pulumi.StringOutput)
}

// Interval between two HC requests.
func (o GetBackendsBackendOutput) HealthCheckDelay() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.HealthCheckDelay }).(pulumi.StringOutput)
}

// This block enable HTTP health check.
func (o GetBackendsBackendOutput) HealthCheckHttp() GetBackendsBackendHealthCheckHttpArrayOutput {
	return o.ApplyT(func(v GetBackendsBackend) []GetBackendsBackendHealthCheckHttp { return v.HealthCheckHttp }).(GetBackendsBackendHealthCheckHttpArrayOutput)
}

// This block enable HTTPS health check.
func (o GetBackendsBackendOutput) HealthCheckHttps() GetBackendsBackendHealthCheckHttpArrayOutput {
	return o.ApplyT(func(v GetBackendsBackend) []GetBackendsBackendHealthCheckHttp { return v.HealthCheckHttps }).(GetBackendsBackendHealthCheckHttpArrayOutput)
}

// Number of allowed failed HC requests before the backend server is marked down.
func (o GetBackendsBackendOutput) HealthCheckMaxRetries() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendsBackend) int { return v.HealthCheckMaxRetries }).(pulumi.IntOutput)
}

// Port the HC requests will be sent to.
func (o GetBackendsBackendOutput) HealthCheckPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendsBackend) int { return v.HealthCheckPort }).(pulumi.IntOutput)
}

// This block enable TCP health check.
func (o GetBackendsBackendOutput) HealthCheckTcps() GetBackendsBackendHealthCheckTcpArrayOutput {
	return o.ApplyT(func(v GetBackendsBackend) []GetBackendsBackendHealthCheckTcp { return v.HealthCheckTcps }).(GetBackendsBackendHealthCheckTcpArrayOutput)
}

// Timeout before we consider a HC request failed.
func (o GetBackendsBackendOutput) HealthCheckTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.HealthCheckTimeout }).(pulumi.StringOutput)
}

// The associated backend ID.
func (o GetBackendsBackendOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies whether the Load Balancer should check the backend server’s certificate before initiating a connection.
func (o GetBackendsBackendOutput) IgnoreSslServerVerify() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBackendsBackend) bool { return v.IgnoreSslServerVerify }).(pulumi.BoolOutput)
}

// The load-balancer ID this backend is attached to. backends with a LB ID like it are listed.
func (o GetBackendsBackendOutput) LbId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.LbId }).(pulumi.StringOutput)
}

// The backend name used as filter. Backends with a name like it are listed.
func (o GetBackendsBackendOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.Name }).(pulumi.StringOutput)
}

// Modify what occurs when a backend server is marked down.
func (o GetBackendsBackendOutput) OnMarkedDownAction() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.OnMarkedDownAction }).(pulumi.StringOutput)
}

// The type of PROXY protocol.
func (o GetBackendsBackendOutput) ProxyProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.ProxyProtocol }).(pulumi.StringOutput)
}

// List of backend server IP addresses.
func (o GetBackendsBackendOutput) ServerIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetBackendsBackend) []string { return v.ServerIps }).(pulumi.StringArrayOutput)
}

// Enables SSL between load balancer and backend servers.
func (o GetBackendsBackendOutput) SslBridging() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBackendsBackend) bool { return v.SslBridging }).(pulumi.BoolOutput)
}

// Enables cookie-based session persistence.
func (o GetBackendsBackendOutput) StickySessions() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.StickySessions }).(pulumi.StringOutput)
}

// Cookie name for sticky sessions.
func (o GetBackendsBackendOutput) StickySessionsCookieName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.StickySessionsCookieName }).(pulumi.StringOutput)
}

// Maximum initial server connection establishment time.
func (o GetBackendsBackendOutput) TimeoutConnect() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.TimeoutConnect }).(pulumi.StringOutput)
}

// Maximum server connection inactivity time.
func (o GetBackendsBackendOutput) TimeoutServer() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.TimeoutServer }).(pulumi.StringOutput)
}

// Maximum tunnel inactivity time.
func (o GetBackendsBackendOutput) TimeoutTunnel() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.TimeoutTunnel }).(pulumi.StringOutput)
}

// The date at which the backend was last updated (RFC 3339 format).
func (o GetBackendsBackendOutput) UpdateAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackend) string { return v.UpdateAt }).(pulumi.StringOutput)
}

type GetBackendsBackendArrayOutput struct{ *pulumi.OutputState }

func (GetBackendsBackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendsBackend)(nil)).Elem()
}

func (o GetBackendsBackendArrayOutput) ToGetBackendsBackendArrayOutput() GetBackendsBackendArrayOutput {
	return o
}

func (o GetBackendsBackendArrayOutput) ToGetBackendsBackendArrayOutputWithContext(ctx context.Context) GetBackendsBackendArrayOutput {
	return o
}

func (o GetBackendsBackendArrayOutput) Index(i pulumi.IntInput) GetBackendsBackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackendsBackend {
		return vs[0].([]GetBackendsBackend)[vs[1].(int)]
	}).(GetBackendsBackendOutput)
}

type GetBackendsBackendHealthCheckHttp struct {
	// The expected HTTP status code.
	Code int `pulumi:"code"`
	// The HTTP host header to use for HC requests.
	HostHeader string `pulumi:"hostHeader"`
	// The HTTP method to use for HC requests.
	Method string `pulumi:"method"`
	// The SNI to use for HC requests over SSL.
	Sni string `pulumi:"sni"`
	// The HTTPS endpoint URL to call for HC requests.
	Uri string `pulumi:"uri"`
}

// GetBackendsBackendHealthCheckHttpInput is an input type that accepts GetBackendsBackendHealthCheckHttpArgs and GetBackendsBackendHealthCheckHttpOutput values.
// You can construct a concrete instance of `GetBackendsBackendHealthCheckHttpInput` via:
//
//	GetBackendsBackendHealthCheckHttpArgs{...}
type GetBackendsBackendHealthCheckHttpInput interface {
	pulumi.Input

	ToGetBackendsBackendHealthCheckHttpOutput() GetBackendsBackendHealthCheckHttpOutput
	ToGetBackendsBackendHealthCheckHttpOutputWithContext(context.Context) GetBackendsBackendHealthCheckHttpOutput
}

type GetBackendsBackendHealthCheckHttpArgs struct {
	// The expected HTTP status code.
	Code pulumi.IntInput `pulumi:"code"`
	// The HTTP host header to use for HC requests.
	HostHeader pulumi.StringInput `pulumi:"hostHeader"`
	// The HTTP method to use for HC requests.
	Method pulumi.StringInput `pulumi:"method"`
	// The SNI to use for HC requests over SSL.
	Sni pulumi.StringInput `pulumi:"sni"`
	// The HTTPS endpoint URL to call for HC requests.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (GetBackendsBackendHealthCheckHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendsBackendHealthCheckHttp)(nil)).Elem()
}

func (i GetBackendsBackendHealthCheckHttpArgs) ToGetBackendsBackendHealthCheckHttpOutput() GetBackendsBackendHealthCheckHttpOutput {
	return i.ToGetBackendsBackendHealthCheckHttpOutputWithContext(context.Background())
}

func (i GetBackendsBackendHealthCheckHttpArgs) ToGetBackendsBackendHealthCheckHttpOutputWithContext(ctx context.Context) GetBackendsBackendHealthCheckHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendsBackendHealthCheckHttpOutput)
}

// GetBackendsBackendHealthCheckHttpArrayInput is an input type that accepts GetBackendsBackendHealthCheckHttpArray and GetBackendsBackendHealthCheckHttpArrayOutput values.
// You can construct a concrete instance of `GetBackendsBackendHealthCheckHttpArrayInput` via:
//
//	GetBackendsBackendHealthCheckHttpArray{ GetBackendsBackendHealthCheckHttpArgs{...} }
type GetBackendsBackendHealthCheckHttpArrayInput interface {
	pulumi.Input

	ToGetBackendsBackendHealthCheckHttpArrayOutput() GetBackendsBackendHealthCheckHttpArrayOutput
	ToGetBackendsBackendHealthCheckHttpArrayOutputWithContext(context.Context) GetBackendsBackendHealthCheckHttpArrayOutput
}

type GetBackendsBackendHealthCheckHttpArray []GetBackendsBackendHealthCheckHttpInput

func (GetBackendsBackendHealthCheckHttpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendsBackendHealthCheckHttp)(nil)).Elem()
}

func (i GetBackendsBackendHealthCheckHttpArray) ToGetBackendsBackendHealthCheckHttpArrayOutput() GetBackendsBackendHealthCheckHttpArrayOutput {
	return i.ToGetBackendsBackendHealthCheckHttpArrayOutputWithContext(context.Background())
}

func (i GetBackendsBackendHealthCheckHttpArray) ToGetBackendsBackendHealthCheckHttpArrayOutputWithContext(ctx context.Context) GetBackendsBackendHealthCheckHttpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendsBackendHealthCheckHttpArrayOutput)
}

type GetBackendsBackendHealthCheckHttpOutput struct{ *pulumi.OutputState }

func (GetBackendsBackendHealthCheckHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendsBackendHealthCheckHttp)(nil)).Elem()
}

func (o GetBackendsBackendHealthCheckHttpOutput) ToGetBackendsBackendHealthCheckHttpOutput() GetBackendsBackendHealthCheckHttpOutput {
	return o
}

func (o GetBackendsBackendHealthCheckHttpOutput) ToGetBackendsBackendHealthCheckHttpOutputWithContext(ctx context.Context) GetBackendsBackendHealthCheckHttpOutput {
	return o
}

// The expected HTTP status code.
func (o GetBackendsBackendHealthCheckHttpOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackendsBackendHealthCheckHttp) int { return v.Code }).(pulumi.IntOutput)
}

// The HTTP host header to use for HC requests.
func (o GetBackendsBackendHealthCheckHttpOutput) HostHeader() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackendHealthCheckHttp) string { return v.HostHeader }).(pulumi.StringOutput)
}

// The HTTP method to use for HC requests.
func (o GetBackendsBackendHealthCheckHttpOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackendHealthCheckHttp) string { return v.Method }).(pulumi.StringOutput)
}

// The SNI to use for HC requests over SSL.
func (o GetBackendsBackendHealthCheckHttpOutput) Sni() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackendHealthCheckHttp) string { return v.Sni }).(pulumi.StringOutput)
}

// The HTTPS endpoint URL to call for HC requests.
func (o GetBackendsBackendHealthCheckHttpOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendsBackendHealthCheckHttp) string { return v.Uri }).(pulumi.StringOutput)
}

type GetBackendsBackendHealthCheckHttpArrayOutput struct{ *pulumi.OutputState }

func (GetBackendsBackendHealthCheckHttpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendsBackendHealthCheckHttp)(nil)).Elem()
}

func (o GetBackendsBackendHealthCheckHttpArrayOutput) ToGetBackendsBackendHealthCheckHttpArrayOutput() GetBackendsBackendHealthCheckHttpArrayOutput {
	return o
}

func (o GetBackendsBackendHealthCheckHttpArrayOutput) ToGetBackendsBackendHealthCheckHttpArrayOutputWithContext(ctx context.Context) GetBackendsBackendHealthCheckHttpArrayOutput {
	return o
}

func (o GetBackendsBackendHealthCheckHttpArrayOutput) Index(i pulumi.IntInput) GetBackendsBackendHealthCheckHttpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackendsBackendHealthCheckHttp {
		return vs[0].([]GetBackendsBackendHealthCheckHttp)[vs[1].(int)]
	}).(GetBackendsBackendHealthCheckHttpOutput)
}

type GetBackendsBackendHealthCheckTcp struct {
}

// GetBackendsBackendHealthCheckTcpInput is an input type that accepts GetBackendsBackendHealthCheckTcpArgs and GetBackendsBackendHealthCheckTcpOutput values.
// You can construct a concrete instance of `GetBackendsBackendHealthCheckTcpInput` via:
//
//	GetBackendsBackendHealthCheckTcpArgs{...}
type GetBackendsBackendHealthCheckTcpInput interface {
	pulumi.Input

	ToGetBackendsBackendHealthCheckTcpOutput() GetBackendsBackendHealthCheckTcpOutput
	ToGetBackendsBackendHealthCheckTcpOutputWithContext(context.Context) GetBackendsBackendHealthCheckTcpOutput
}

type GetBackendsBackendHealthCheckTcpArgs struct {
}

func (GetBackendsBackendHealthCheckTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendsBackendHealthCheckTcp)(nil)).Elem()
}

func (i GetBackendsBackendHealthCheckTcpArgs) ToGetBackendsBackendHealthCheckTcpOutput() GetBackendsBackendHealthCheckTcpOutput {
	return i.ToGetBackendsBackendHealthCheckTcpOutputWithContext(context.Background())
}

func (i GetBackendsBackendHealthCheckTcpArgs) ToGetBackendsBackendHealthCheckTcpOutputWithContext(ctx context.Context) GetBackendsBackendHealthCheckTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendsBackendHealthCheckTcpOutput)
}

// GetBackendsBackendHealthCheckTcpArrayInput is an input type that accepts GetBackendsBackendHealthCheckTcpArray and GetBackendsBackendHealthCheckTcpArrayOutput values.
// You can construct a concrete instance of `GetBackendsBackendHealthCheckTcpArrayInput` via:
//
//	GetBackendsBackendHealthCheckTcpArray{ GetBackendsBackendHealthCheckTcpArgs{...} }
type GetBackendsBackendHealthCheckTcpArrayInput interface {
	pulumi.Input

	ToGetBackendsBackendHealthCheckTcpArrayOutput() GetBackendsBackendHealthCheckTcpArrayOutput
	ToGetBackendsBackendHealthCheckTcpArrayOutputWithContext(context.Context) GetBackendsBackendHealthCheckTcpArrayOutput
}

type GetBackendsBackendHealthCheckTcpArray []GetBackendsBackendHealthCheckTcpInput

func (GetBackendsBackendHealthCheckTcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendsBackendHealthCheckTcp)(nil)).Elem()
}

func (i GetBackendsBackendHealthCheckTcpArray) ToGetBackendsBackendHealthCheckTcpArrayOutput() GetBackendsBackendHealthCheckTcpArrayOutput {
	return i.ToGetBackendsBackendHealthCheckTcpArrayOutputWithContext(context.Background())
}

func (i GetBackendsBackendHealthCheckTcpArray) ToGetBackendsBackendHealthCheckTcpArrayOutputWithContext(ctx context.Context) GetBackendsBackendHealthCheckTcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendsBackendHealthCheckTcpArrayOutput)
}

type GetBackendsBackendHealthCheckTcpOutput struct{ *pulumi.OutputState }

func (GetBackendsBackendHealthCheckTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendsBackendHealthCheckTcp)(nil)).Elem()
}

func (o GetBackendsBackendHealthCheckTcpOutput) ToGetBackendsBackendHealthCheckTcpOutput() GetBackendsBackendHealthCheckTcpOutput {
	return o
}

func (o GetBackendsBackendHealthCheckTcpOutput) ToGetBackendsBackendHealthCheckTcpOutputWithContext(ctx context.Context) GetBackendsBackendHealthCheckTcpOutput {
	return o
}

type GetBackendsBackendHealthCheckTcpArrayOutput struct{ *pulumi.OutputState }

func (GetBackendsBackendHealthCheckTcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendsBackendHealthCheckTcp)(nil)).Elem()
}

func (o GetBackendsBackendHealthCheckTcpArrayOutput) ToGetBackendsBackendHealthCheckTcpArrayOutput() GetBackendsBackendHealthCheckTcpArrayOutput {
	return o
}

func (o GetBackendsBackendHealthCheckTcpArrayOutput) ToGetBackendsBackendHealthCheckTcpArrayOutputWithContext(ctx context.Context) GetBackendsBackendHealthCheckTcpArrayOutput {
	return o
}

func (o GetBackendsBackendHealthCheckTcpArrayOutput) Index(i pulumi.IntInput) GetBackendsBackendHealthCheckTcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackendsBackendHealthCheckTcp {
		return vs[0].([]GetBackendsBackendHealthCheckTcp)[vs[1].(int)]
	}).(GetBackendsBackendHealthCheckTcpOutput)
}

type GetCertificateCustomCertificate struct {
	CertificateChain string `pulumi:"certificateChain"`
}

// GetCertificateCustomCertificateInput is an input type that accepts GetCertificateCustomCertificateArgs and GetCertificateCustomCertificateOutput values.
// You can construct a concrete instance of `GetCertificateCustomCertificateInput` via:
//
//	GetCertificateCustomCertificateArgs{...}
type GetCertificateCustomCertificateInput interface {
	pulumi.Input

	ToGetCertificateCustomCertificateOutput() GetCertificateCustomCertificateOutput
	ToGetCertificateCustomCertificateOutputWithContext(context.Context) GetCertificateCustomCertificateOutput
}

type GetCertificateCustomCertificateArgs struct {
	CertificateChain pulumi.StringInput `pulumi:"certificateChain"`
}

func (GetCertificateCustomCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateCustomCertificate)(nil)).Elem()
}

func (i GetCertificateCustomCertificateArgs) ToGetCertificateCustomCertificateOutput() GetCertificateCustomCertificateOutput {
	return i.ToGetCertificateCustomCertificateOutputWithContext(context.Background())
}

func (i GetCertificateCustomCertificateArgs) ToGetCertificateCustomCertificateOutputWithContext(ctx context.Context) GetCertificateCustomCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateCustomCertificateOutput)
}

// GetCertificateCustomCertificateArrayInput is an input type that accepts GetCertificateCustomCertificateArray and GetCertificateCustomCertificateArrayOutput values.
// You can construct a concrete instance of `GetCertificateCustomCertificateArrayInput` via:
//
//	GetCertificateCustomCertificateArray{ GetCertificateCustomCertificateArgs{...} }
type GetCertificateCustomCertificateArrayInput interface {
	pulumi.Input

	ToGetCertificateCustomCertificateArrayOutput() GetCertificateCustomCertificateArrayOutput
	ToGetCertificateCustomCertificateArrayOutputWithContext(context.Context) GetCertificateCustomCertificateArrayOutput
}

type GetCertificateCustomCertificateArray []GetCertificateCustomCertificateInput

func (GetCertificateCustomCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateCustomCertificate)(nil)).Elem()
}

func (i GetCertificateCustomCertificateArray) ToGetCertificateCustomCertificateArrayOutput() GetCertificateCustomCertificateArrayOutput {
	return i.ToGetCertificateCustomCertificateArrayOutputWithContext(context.Background())
}

func (i GetCertificateCustomCertificateArray) ToGetCertificateCustomCertificateArrayOutputWithContext(ctx context.Context) GetCertificateCustomCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateCustomCertificateArrayOutput)
}

type GetCertificateCustomCertificateOutput struct{ *pulumi.OutputState }

func (GetCertificateCustomCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateCustomCertificate)(nil)).Elem()
}

func (o GetCertificateCustomCertificateOutput) ToGetCertificateCustomCertificateOutput() GetCertificateCustomCertificateOutput {
	return o
}

func (o GetCertificateCustomCertificateOutput) ToGetCertificateCustomCertificateOutputWithContext(ctx context.Context) GetCertificateCustomCertificateOutput {
	return o
}

func (o GetCertificateCustomCertificateOutput) CertificateChain() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificateCustomCertificate) string { return v.CertificateChain }).(pulumi.StringOutput)
}

type GetCertificateCustomCertificateArrayOutput struct{ *pulumi.OutputState }

func (GetCertificateCustomCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateCustomCertificate)(nil)).Elem()
}

func (o GetCertificateCustomCertificateArrayOutput) ToGetCertificateCustomCertificateArrayOutput() GetCertificateCustomCertificateArrayOutput {
	return o
}

func (o GetCertificateCustomCertificateArrayOutput) ToGetCertificateCustomCertificateArrayOutputWithContext(ctx context.Context) GetCertificateCustomCertificateArrayOutput {
	return o
}

func (o GetCertificateCustomCertificateArrayOutput) Index(i pulumi.IntInput) GetCertificateCustomCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCertificateCustomCertificate {
		return vs[0].([]GetCertificateCustomCertificate)[vs[1].(int)]
	}).(GetCertificateCustomCertificateOutput)
}

type GetCertificateLetsencrypt struct {
	CommonName              string   `pulumi:"commonName"`
	SubjectAlternativeNames []string `pulumi:"subjectAlternativeNames"`
}

// GetCertificateLetsencryptInput is an input type that accepts GetCertificateLetsencryptArgs and GetCertificateLetsencryptOutput values.
// You can construct a concrete instance of `GetCertificateLetsencryptInput` via:
//
//	GetCertificateLetsencryptArgs{...}
type GetCertificateLetsencryptInput interface {
	pulumi.Input

	ToGetCertificateLetsencryptOutput() GetCertificateLetsencryptOutput
	ToGetCertificateLetsencryptOutputWithContext(context.Context) GetCertificateLetsencryptOutput
}

type GetCertificateLetsencryptArgs struct {
	CommonName              pulumi.StringInput      `pulumi:"commonName"`
	SubjectAlternativeNames pulumi.StringArrayInput `pulumi:"subjectAlternativeNames"`
}

func (GetCertificateLetsencryptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateLetsencrypt)(nil)).Elem()
}

func (i GetCertificateLetsencryptArgs) ToGetCertificateLetsencryptOutput() GetCertificateLetsencryptOutput {
	return i.ToGetCertificateLetsencryptOutputWithContext(context.Background())
}

func (i GetCertificateLetsencryptArgs) ToGetCertificateLetsencryptOutputWithContext(ctx context.Context) GetCertificateLetsencryptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateLetsencryptOutput)
}

// GetCertificateLetsencryptArrayInput is an input type that accepts GetCertificateLetsencryptArray and GetCertificateLetsencryptArrayOutput values.
// You can construct a concrete instance of `GetCertificateLetsencryptArrayInput` via:
//
//	GetCertificateLetsencryptArray{ GetCertificateLetsencryptArgs{...} }
type GetCertificateLetsencryptArrayInput interface {
	pulumi.Input

	ToGetCertificateLetsencryptArrayOutput() GetCertificateLetsencryptArrayOutput
	ToGetCertificateLetsencryptArrayOutputWithContext(context.Context) GetCertificateLetsencryptArrayOutput
}

type GetCertificateLetsencryptArray []GetCertificateLetsencryptInput

func (GetCertificateLetsencryptArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateLetsencrypt)(nil)).Elem()
}

func (i GetCertificateLetsencryptArray) ToGetCertificateLetsencryptArrayOutput() GetCertificateLetsencryptArrayOutput {
	return i.ToGetCertificateLetsencryptArrayOutputWithContext(context.Background())
}

func (i GetCertificateLetsencryptArray) ToGetCertificateLetsencryptArrayOutputWithContext(ctx context.Context) GetCertificateLetsencryptArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateLetsencryptArrayOutput)
}

type GetCertificateLetsencryptOutput struct{ *pulumi.OutputState }

func (GetCertificateLetsencryptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateLetsencrypt)(nil)).Elem()
}

func (o GetCertificateLetsencryptOutput) ToGetCertificateLetsencryptOutput() GetCertificateLetsencryptOutput {
	return o
}

func (o GetCertificateLetsencryptOutput) ToGetCertificateLetsencryptOutputWithContext(ctx context.Context) GetCertificateLetsencryptOutput {
	return o
}

func (o GetCertificateLetsencryptOutput) CommonName() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificateLetsencrypt) string { return v.CommonName }).(pulumi.StringOutput)
}

func (o GetCertificateLetsencryptOutput) SubjectAlternativeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCertificateLetsencrypt) []string { return v.SubjectAlternativeNames }).(pulumi.StringArrayOutput)
}

type GetCertificateLetsencryptArrayOutput struct{ *pulumi.OutputState }

func (GetCertificateLetsencryptArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateLetsencrypt)(nil)).Elem()
}

func (o GetCertificateLetsencryptArrayOutput) ToGetCertificateLetsencryptArrayOutput() GetCertificateLetsencryptArrayOutput {
	return o
}

func (o GetCertificateLetsencryptArrayOutput) ToGetCertificateLetsencryptArrayOutputWithContext(ctx context.Context) GetCertificateLetsencryptArrayOutput {
	return o
}

func (o GetCertificateLetsencryptArrayOutput) Index(i pulumi.IntInput) GetCertificateLetsencryptOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCertificateLetsencrypt {
		return vs[0].([]GetCertificateLetsencrypt)[vs[1].(int)]
	}).(GetCertificateLetsencryptOutput)
}

type GetFrontendAcl struct {
	Actions     []GetFrontendAclAction `pulumi:"actions"`
	CreatedAt   string                 `pulumi:"createdAt"`
	Description string                 `pulumi:"description"`
	Matches     []GetFrontendAclMatch  `pulumi:"matches"`
	// The name of the frontend.
	// - When using the `name` you should specify the `lb-id`
	Name      string `pulumi:"name"`
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetFrontendAclInput is an input type that accepts GetFrontendAclArgs and GetFrontendAclOutput values.
// You can construct a concrete instance of `GetFrontendAclInput` via:
//
//	GetFrontendAclArgs{...}
type GetFrontendAclInput interface {
	pulumi.Input

	ToGetFrontendAclOutput() GetFrontendAclOutput
	ToGetFrontendAclOutputWithContext(context.Context) GetFrontendAclOutput
}

type GetFrontendAclArgs struct {
	Actions     GetFrontendAclActionArrayInput `pulumi:"actions"`
	CreatedAt   pulumi.StringInput             `pulumi:"createdAt"`
	Description pulumi.StringInput             `pulumi:"description"`
	Matches     GetFrontendAclMatchArrayInput  `pulumi:"matches"`
	// The name of the frontend.
	// - When using the `name` you should specify the `lb-id`
	Name      pulumi.StringInput `pulumi:"name"`
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetFrontendAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrontendAcl)(nil)).Elem()
}

func (i GetFrontendAclArgs) ToGetFrontendAclOutput() GetFrontendAclOutput {
	return i.ToGetFrontendAclOutputWithContext(context.Background())
}

func (i GetFrontendAclArgs) ToGetFrontendAclOutputWithContext(ctx context.Context) GetFrontendAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrontendAclOutput)
}

// GetFrontendAclArrayInput is an input type that accepts GetFrontendAclArray and GetFrontendAclArrayOutput values.
// You can construct a concrete instance of `GetFrontendAclArrayInput` via:
//
//	GetFrontendAclArray{ GetFrontendAclArgs{...} }
type GetFrontendAclArrayInput interface {
	pulumi.Input

	ToGetFrontendAclArrayOutput() GetFrontendAclArrayOutput
	ToGetFrontendAclArrayOutputWithContext(context.Context) GetFrontendAclArrayOutput
}

type GetFrontendAclArray []GetFrontendAclInput

func (GetFrontendAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrontendAcl)(nil)).Elem()
}

func (i GetFrontendAclArray) ToGetFrontendAclArrayOutput() GetFrontendAclArrayOutput {
	return i.ToGetFrontendAclArrayOutputWithContext(context.Background())
}

func (i GetFrontendAclArray) ToGetFrontendAclArrayOutputWithContext(ctx context.Context) GetFrontendAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrontendAclArrayOutput)
}

type GetFrontendAclOutput struct{ *pulumi.OutputState }

func (GetFrontendAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrontendAcl)(nil)).Elem()
}

func (o GetFrontendAclOutput) ToGetFrontendAclOutput() GetFrontendAclOutput {
	return o
}

func (o GetFrontendAclOutput) ToGetFrontendAclOutputWithContext(ctx context.Context) GetFrontendAclOutput {
	return o
}

func (o GetFrontendAclOutput) Actions() GetFrontendAclActionArrayOutput {
	return o.ApplyT(func(v GetFrontendAcl) []GetFrontendAclAction { return v.Actions }).(GetFrontendAclActionArrayOutput)
}

func (o GetFrontendAclOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendAcl) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o GetFrontendAclOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendAcl) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetFrontendAclOutput) Matches() GetFrontendAclMatchArrayOutput {
	return o.ApplyT(func(v GetFrontendAcl) []GetFrontendAclMatch { return v.Matches }).(GetFrontendAclMatchArrayOutput)
}

// The name of the frontend.
// - When using the `name` you should specify the `lb-id`
func (o GetFrontendAclOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendAcl) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetFrontendAclOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendAcl) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetFrontendAclArrayOutput struct{ *pulumi.OutputState }

func (GetFrontendAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrontendAcl)(nil)).Elem()
}

func (o GetFrontendAclArrayOutput) ToGetFrontendAclArrayOutput() GetFrontendAclArrayOutput {
	return o
}

func (o GetFrontendAclArrayOutput) ToGetFrontendAclArrayOutputWithContext(ctx context.Context) GetFrontendAclArrayOutput {
	return o
}

func (o GetFrontendAclArrayOutput) Index(i pulumi.IntInput) GetFrontendAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFrontendAcl {
		return vs[0].([]GetFrontendAcl)[vs[1].(int)]
	}).(GetFrontendAclOutput)
}

type GetFrontendAclAction struct {
	Redirects []GetFrontendAclActionRedirect `pulumi:"redirects"`
	Type      string                         `pulumi:"type"`
}

// GetFrontendAclActionInput is an input type that accepts GetFrontendAclActionArgs and GetFrontendAclActionOutput values.
// You can construct a concrete instance of `GetFrontendAclActionInput` via:
//
//	GetFrontendAclActionArgs{...}
type GetFrontendAclActionInput interface {
	pulumi.Input

	ToGetFrontendAclActionOutput() GetFrontendAclActionOutput
	ToGetFrontendAclActionOutputWithContext(context.Context) GetFrontendAclActionOutput
}

type GetFrontendAclActionArgs struct {
	Redirects GetFrontendAclActionRedirectArrayInput `pulumi:"redirects"`
	Type      pulumi.StringInput                     `pulumi:"type"`
}

func (GetFrontendAclActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrontendAclAction)(nil)).Elem()
}

func (i GetFrontendAclActionArgs) ToGetFrontendAclActionOutput() GetFrontendAclActionOutput {
	return i.ToGetFrontendAclActionOutputWithContext(context.Background())
}

func (i GetFrontendAclActionArgs) ToGetFrontendAclActionOutputWithContext(ctx context.Context) GetFrontendAclActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrontendAclActionOutput)
}

// GetFrontendAclActionArrayInput is an input type that accepts GetFrontendAclActionArray and GetFrontendAclActionArrayOutput values.
// You can construct a concrete instance of `GetFrontendAclActionArrayInput` via:
//
//	GetFrontendAclActionArray{ GetFrontendAclActionArgs{...} }
type GetFrontendAclActionArrayInput interface {
	pulumi.Input

	ToGetFrontendAclActionArrayOutput() GetFrontendAclActionArrayOutput
	ToGetFrontendAclActionArrayOutputWithContext(context.Context) GetFrontendAclActionArrayOutput
}

type GetFrontendAclActionArray []GetFrontendAclActionInput

func (GetFrontendAclActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrontendAclAction)(nil)).Elem()
}

func (i GetFrontendAclActionArray) ToGetFrontendAclActionArrayOutput() GetFrontendAclActionArrayOutput {
	return i.ToGetFrontendAclActionArrayOutputWithContext(context.Background())
}

func (i GetFrontendAclActionArray) ToGetFrontendAclActionArrayOutputWithContext(ctx context.Context) GetFrontendAclActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrontendAclActionArrayOutput)
}

type GetFrontendAclActionOutput struct{ *pulumi.OutputState }

func (GetFrontendAclActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrontendAclAction)(nil)).Elem()
}

func (o GetFrontendAclActionOutput) ToGetFrontendAclActionOutput() GetFrontendAclActionOutput {
	return o
}

func (o GetFrontendAclActionOutput) ToGetFrontendAclActionOutputWithContext(ctx context.Context) GetFrontendAclActionOutput {
	return o
}

func (o GetFrontendAclActionOutput) Redirects() GetFrontendAclActionRedirectArrayOutput {
	return o.ApplyT(func(v GetFrontendAclAction) []GetFrontendAclActionRedirect { return v.Redirects }).(GetFrontendAclActionRedirectArrayOutput)
}

func (o GetFrontendAclActionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendAclAction) string { return v.Type }).(pulumi.StringOutput)
}

type GetFrontendAclActionArrayOutput struct{ *pulumi.OutputState }

func (GetFrontendAclActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrontendAclAction)(nil)).Elem()
}

func (o GetFrontendAclActionArrayOutput) ToGetFrontendAclActionArrayOutput() GetFrontendAclActionArrayOutput {
	return o
}

func (o GetFrontendAclActionArrayOutput) ToGetFrontendAclActionArrayOutputWithContext(ctx context.Context) GetFrontendAclActionArrayOutput {
	return o
}

func (o GetFrontendAclActionArrayOutput) Index(i pulumi.IntInput) GetFrontendAclActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFrontendAclAction {
		return vs[0].([]GetFrontendAclAction)[vs[1].(int)]
	}).(GetFrontendAclActionOutput)
}

type GetFrontendAclActionRedirect struct {
	Code   int    `pulumi:"code"`
	Target string `pulumi:"target"`
	Type   string `pulumi:"type"`
}

// GetFrontendAclActionRedirectInput is an input type that accepts GetFrontendAclActionRedirectArgs and GetFrontendAclActionRedirectOutput values.
// You can construct a concrete instance of `GetFrontendAclActionRedirectInput` via:
//
//	GetFrontendAclActionRedirectArgs{...}
type GetFrontendAclActionRedirectInput interface {
	pulumi.Input

	ToGetFrontendAclActionRedirectOutput() GetFrontendAclActionRedirectOutput
	ToGetFrontendAclActionRedirectOutputWithContext(context.Context) GetFrontendAclActionRedirectOutput
}

type GetFrontendAclActionRedirectArgs struct {
	Code   pulumi.IntInput    `pulumi:"code"`
	Target pulumi.StringInput `pulumi:"target"`
	Type   pulumi.StringInput `pulumi:"type"`
}

func (GetFrontendAclActionRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrontendAclActionRedirect)(nil)).Elem()
}

func (i GetFrontendAclActionRedirectArgs) ToGetFrontendAclActionRedirectOutput() GetFrontendAclActionRedirectOutput {
	return i.ToGetFrontendAclActionRedirectOutputWithContext(context.Background())
}

func (i GetFrontendAclActionRedirectArgs) ToGetFrontendAclActionRedirectOutputWithContext(ctx context.Context) GetFrontendAclActionRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrontendAclActionRedirectOutput)
}

// GetFrontendAclActionRedirectArrayInput is an input type that accepts GetFrontendAclActionRedirectArray and GetFrontendAclActionRedirectArrayOutput values.
// You can construct a concrete instance of `GetFrontendAclActionRedirectArrayInput` via:
//
//	GetFrontendAclActionRedirectArray{ GetFrontendAclActionRedirectArgs{...} }
type GetFrontendAclActionRedirectArrayInput interface {
	pulumi.Input

	ToGetFrontendAclActionRedirectArrayOutput() GetFrontendAclActionRedirectArrayOutput
	ToGetFrontendAclActionRedirectArrayOutputWithContext(context.Context) GetFrontendAclActionRedirectArrayOutput
}

type GetFrontendAclActionRedirectArray []GetFrontendAclActionRedirectInput

func (GetFrontendAclActionRedirectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrontendAclActionRedirect)(nil)).Elem()
}

func (i GetFrontendAclActionRedirectArray) ToGetFrontendAclActionRedirectArrayOutput() GetFrontendAclActionRedirectArrayOutput {
	return i.ToGetFrontendAclActionRedirectArrayOutputWithContext(context.Background())
}

func (i GetFrontendAclActionRedirectArray) ToGetFrontendAclActionRedirectArrayOutputWithContext(ctx context.Context) GetFrontendAclActionRedirectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrontendAclActionRedirectArrayOutput)
}

type GetFrontendAclActionRedirectOutput struct{ *pulumi.OutputState }

func (GetFrontendAclActionRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrontendAclActionRedirect)(nil)).Elem()
}

func (o GetFrontendAclActionRedirectOutput) ToGetFrontendAclActionRedirectOutput() GetFrontendAclActionRedirectOutput {
	return o
}

func (o GetFrontendAclActionRedirectOutput) ToGetFrontendAclActionRedirectOutputWithContext(ctx context.Context) GetFrontendAclActionRedirectOutput {
	return o
}

func (o GetFrontendAclActionRedirectOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v GetFrontendAclActionRedirect) int { return v.Code }).(pulumi.IntOutput)
}

func (o GetFrontendAclActionRedirectOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendAclActionRedirect) string { return v.Target }).(pulumi.StringOutput)
}

func (o GetFrontendAclActionRedirectOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendAclActionRedirect) string { return v.Type }).(pulumi.StringOutput)
}

type GetFrontendAclActionRedirectArrayOutput struct{ *pulumi.OutputState }

func (GetFrontendAclActionRedirectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrontendAclActionRedirect)(nil)).Elem()
}

func (o GetFrontendAclActionRedirectArrayOutput) ToGetFrontendAclActionRedirectArrayOutput() GetFrontendAclActionRedirectArrayOutput {
	return o
}

func (o GetFrontendAclActionRedirectArrayOutput) ToGetFrontendAclActionRedirectArrayOutputWithContext(ctx context.Context) GetFrontendAclActionRedirectArrayOutput {
	return o
}

func (o GetFrontendAclActionRedirectArrayOutput) Index(i pulumi.IntInput) GetFrontendAclActionRedirectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFrontendAclActionRedirect {
		return vs[0].([]GetFrontendAclActionRedirect)[vs[1].(int)]
	}).(GetFrontendAclActionRedirectOutput)
}

type GetFrontendAclMatch struct {
	HttpFilter       string   `pulumi:"httpFilter"`
	HttpFilterOption string   `pulumi:"httpFilterOption"`
	HttpFilterValues []string `pulumi:"httpFilterValues"`
	Invert           bool     `pulumi:"invert"`
	IpSubnets        []string `pulumi:"ipSubnets"`
}

// GetFrontendAclMatchInput is an input type that accepts GetFrontendAclMatchArgs and GetFrontendAclMatchOutput values.
// You can construct a concrete instance of `GetFrontendAclMatchInput` via:
//
//	GetFrontendAclMatchArgs{...}
type GetFrontendAclMatchInput interface {
	pulumi.Input

	ToGetFrontendAclMatchOutput() GetFrontendAclMatchOutput
	ToGetFrontendAclMatchOutputWithContext(context.Context) GetFrontendAclMatchOutput
}

type GetFrontendAclMatchArgs struct {
	HttpFilter       pulumi.StringInput      `pulumi:"httpFilter"`
	HttpFilterOption pulumi.StringInput      `pulumi:"httpFilterOption"`
	HttpFilterValues pulumi.StringArrayInput `pulumi:"httpFilterValues"`
	Invert           pulumi.BoolInput        `pulumi:"invert"`
	IpSubnets        pulumi.StringArrayInput `pulumi:"ipSubnets"`
}

func (GetFrontendAclMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrontendAclMatch)(nil)).Elem()
}

func (i GetFrontendAclMatchArgs) ToGetFrontendAclMatchOutput() GetFrontendAclMatchOutput {
	return i.ToGetFrontendAclMatchOutputWithContext(context.Background())
}

func (i GetFrontendAclMatchArgs) ToGetFrontendAclMatchOutputWithContext(ctx context.Context) GetFrontendAclMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrontendAclMatchOutput)
}

// GetFrontendAclMatchArrayInput is an input type that accepts GetFrontendAclMatchArray and GetFrontendAclMatchArrayOutput values.
// You can construct a concrete instance of `GetFrontendAclMatchArrayInput` via:
//
//	GetFrontendAclMatchArray{ GetFrontendAclMatchArgs{...} }
type GetFrontendAclMatchArrayInput interface {
	pulumi.Input

	ToGetFrontendAclMatchArrayOutput() GetFrontendAclMatchArrayOutput
	ToGetFrontendAclMatchArrayOutputWithContext(context.Context) GetFrontendAclMatchArrayOutput
}

type GetFrontendAclMatchArray []GetFrontendAclMatchInput

func (GetFrontendAclMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrontendAclMatch)(nil)).Elem()
}

func (i GetFrontendAclMatchArray) ToGetFrontendAclMatchArrayOutput() GetFrontendAclMatchArrayOutput {
	return i.ToGetFrontendAclMatchArrayOutputWithContext(context.Background())
}

func (i GetFrontendAclMatchArray) ToGetFrontendAclMatchArrayOutputWithContext(ctx context.Context) GetFrontendAclMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrontendAclMatchArrayOutput)
}

type GetFrontendAclMatchOutput struct{ *pulumi.OutputState }

func (GetFrontendAclMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrontendAclMatch)(nil)).Elem()
}

func (o GetFrontendAclMatchOutput) ToGetFrontendAclMatchOutput() GetFrontendAclMatchOutput {
	return o
}

func (o GetFrontendAclMatchOutput) ToGetFrontendAclMatchOutputWithContext(ctx context.Context) GetFrontendAclMatchOutput {
	return o
}

func (o GetFrontendAclMatchOutput) HttpFilter() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendAclMatch) string { return v.HttpFilter }).(pulumi.StringOutput)
}

func (o GetFrontendAclMatchOutput) HttpFilterOption() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendAclMatch) string { return v.HttpFilterOption }).(pulumi.StringOutput)
}

func (o GetFrontendAclMatchOutput) HttpFilterValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFrontendAclMatch) []string { return v.HttpFilterValues }).(pulumi.StringArrayOutput)
}

func (o GetFrontendAclMatchOutput) Invert() pulumi.BoolOutput {
	return o.ApplyT(func(v GetFrontendAclMatch) bool { return v.Invert }).(pulumi.BoolOutput)
}

func (o GetFrontendAclMatchOutput) IpSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFrontendAclMatch) []string { return v.IpSubnets }).(pulumi.StringArrayOutput)
}

type GetFrontendAclMatchArrayOutput struct{ *pulumi.OutputState }

func (GetFrontendAclMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrontendAclMatch)(nil)).Elem()
}

func (o GetFrontendAclMatchArrayOutput) ToGetFrontendAclMatchArrayOutput() GetFrontendAclMatchArrayOutput {
	return o
}

func (o GetFrontendAclMatchArrayOutput) ToGetFrontendAclMatchArrayOutputWithContext(ctx context.Context) GetFrontendAclMatchArrayOutput {
	return o
}

func (o GetFrontendAclMatchArrayOutput) Index(i pulumi.IntInput) GetFrontendAclMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFrontendAclMatch {
		return vs[0].([]GetFrontendAclMatch)[vs[1].(int)]
	}).(GetFrontendAclMatchOutput)
}

type GetFrontendsFrontend struct {
	// The load-balancer backend ID this frontend is attached to.
	// > **Important:** LB backends' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
	BackendId string `pulumi:"backendId"`
	// List of Certificate IDs that are used by the frontend.
	CertificateIds []string `pulumi:"certificateIds"`
	// The date at which the frontend was created (RFC 3339 format).
	CreatedAt string `pulumi:"createdAt"`
	// If HTTP/3 protocol is activated.
	EnableHttp3 bool `pulumi:"enableHttp3"`
	// The associated frontend ID.
	// > **Important:** LB frontends' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
	Id string `pulumi:"id"`
	// TCP port the frontend listen to.
	InboundPort int `pulumi:"inboundPort"`
	// The load-balancer ID this frontend is attached to. frontends with a LB ID like it are listed.
	LbId string `pulumi:"lbId"`
	// The frontend name used as filter. Frontends with a name like it are listed.
	Name string `pulumi:"name"`
	// Maximum inactivity time on the client side.
	TimeoutClient string `pulumi:"timeoutClient"`
	// The date at which the frontend was last updated (RFC 3339 format).
	UpdateAt string `pulumi:"updateAt"`
}

// GetFrontendsFrontendInput is an input type that accepts GetFrontendsFrontendArgs and GetFrontendsFrontendOutput values.
// You can construct a concrete instance of `GetFrontendsFrontendInput` via:
//
//	GetFrontendsFrontendArgs{...}
type GetFrontendsFrontendInput interface {
	pulumi.Input

	ToGetFrontendsFrontendOutput() GetFrontendsFrontendOutput
	ToGetFrontendsFrontendOutputWithContext(context.Context) GetFrontendsFrontendOutput
}

type GetFrontendsFrontendArgs struct {
	// The load-balancer backend ID this frontend is attached to.
	// > **Important:** LB backends' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
	BackendId pulumi.StringInput `pulumi:"backendId"`
	// List of Certificate IDs that are used by the frontend.
	CertificateIds pulumi.StringArrayInput `pulumi:"certificateIds"`
	// The date at which the frontend was created (RFC 3339 format).
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// If HTTP/3 protocol is activated.
	EnableHttp3 pulumi.BoolInput `pulumi:"enableHttp3"`
	// The associated frontend ID.
	// > **Important:** LB frontends' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
	Id pulumi.StringInput `pulumi:"id"`
	// TCP port the frontend listen to.
	InboundPort pulumi.IntInput `pulumi:"inboundPort"`
	// The load-balancer ID this frontend is attached to. frontends with a LB ID like it are listed.
	LbId pulumi.StringInput `pulumi:"lbId"`
	// The frontend name used as filter. Frontends with a name like it are listed.
	Name pulumi.StringInput `pulumi:"name"`
	// Maximum inactivity time on the client side.
	TimeoutClient pulumi.StringInput `pulumi:"timeoutClient"`
	// The date at which the frontend was last updated (RFC 3339 format).
	UpdateAt pulumi.StringInput `pulumi:"updateAt"`
}

func (GetFrontendsFrontendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrontendsFrontend)(nil)).Elem()
}

func (i GetFrontendsFrontendArgs) ToGetFrontendsFrontendOutput() GetFrontendsFrontendOutput {
	return i.ToGetFrontendsFrontendOutputWithContext(context.Background())
}

func (i GetFrontendsFrontendArgs) ToGetFrontendsFrontendOutputWithContext(ctx context.Context) GetFrontendsFrontendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrontendsFrontendOutput)
}

// GetFrontendsFrontendArrayInput is an input type that accepts GetFrontendsFrontendArray and GetFrontendsFrontendArrayOutput values.
// You can construct a concrete instance of `GetFrontendsFrontendArrayInput` via:
//
//	GetFrontendsFrontendArray{ GetFrontendsFrontendArgs{...} }
type GetFrontendsFrontendArrayInput interface {
	pulumi.Input

	ToGetFrontendsFrontendArrayOutput() GetFrontendsFrontendArrayOutput
	ToGetFrontendsFrontendArrayOutputWithContext(context.Context) GetFrontendsFrontendArrayOutput
}

type GetFrontendsFrontendArray []GetFrontendsFrontendInput

func (GetFrontendsFrontendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrontendsFrontend)(nil)).Elem()
}

func (i GetFrontendsFrontendArray) ToGetFrontendsFrontendArrayOutput() GetFrontendsFrontendArrayOutput {
	return i.ToGetFrontendsFrontendArrayOutputWithContext(context.Background())
}

func (i GetFrontendsFrontendArray) ToGetFrontendsFrontendArrayOutputWithContext(ctx context.Context) GetFrontendsFrontendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFrontendsFrontendArrayOutput)
}

type GetFrontendsFrontendOutput struct{ *pulumi.OutputState }

func (GetFrontendsFrontendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFrontendsFrontend)(nil)).Elem()
}

func (o GetFrontendsFrontendOutput) ToGetFrontendsFrontendOutput() GetFrontendsFrontendOutput {
	return o
}

func (o GetFrontendsFrontendOutput) ToGetFrontendsFrontendOutputWithContext(ctx context.Context) GetFrontendsFrontendOutput {
	return o
}

// The load-balancer backend ID this frontend is attached to.
// > **Important:** LB backends' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
func (o GetFrontendsFrontendOutput) BackendId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendsFrontend) string { return v.BackendId }).(pulumi.StringOutput)
}

// List of Certificate IDs that are used by the frontend.
func (o GetFrontendsFrontendOutput) CertificateIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFrontendsFrontend) []string { return v.CertificateIds }).(pulumi.StringArrayOutput)
}

// The date at which the frontend was created (RFC 3339 format).
func (o GetFrontendsFrontendOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendsFrontend) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// If HTTP/3 protocol is activated.
func (o GetFrontendsFrontendOutput) EnableHttp3() pulumi.BoolOutput {
	return o.ApplyT(func(v GetFrontendsFrontend) bool { return v.EnableHttp3 }).(pulumi.BoolOutput)
}

// The associated frontend ID.
// > **Important:** LB frontends' IDs are zoned, which means they are of the form `{zone}/{id}`, e.g. `fr-par-1/11111111-1111-1111-1111-111111111111`
func (o GetFrontendsFrontendOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendsFrontend) string { return v.Id }).(pulumi.StringOutput)
}

// TCP port the frontend listen to.
func (o GetFrontendsFrontendOutput) InboundPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetFrontendsFrontend) int { return v.InboundPort }).(pulumi.IntOutput)
}

// The load-balancer ID this frontend is attached to. frontends with a LB ID like it are listed.
func (o GetFrontendsFrontendOutput) LbId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendsFrontend) string { return v.LbId }).(pulumi.StringOutput)
}

// The frontend name used as filter. Frontends with a name like it are listed.
func (o GetFrontendsFrontendOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendsFrontend) string { return v.Name }).(pulumi.StringOutput)
}

// Maximum inactivity time on the client side.
func (o GetFrontendsFrontendOutput) TimeoutClient() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendsFrontend) string { return v.TimeoutClient }).(pulumi.StringOutput)
}

// The date at which the frontend was last updated (RFC 3339 format).
func (o GetFrontendsFrontendOutput) UpdateAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetFrontendsFrontend) string { return v.UpdateAt }).(pulumi.StringOutput)
}

type GetFrontendsFrontendArrayOutput struct{ *pulumi.OutputState }

func (GetFrontendsFrontendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFrontendsFrontend)(nil)).Elem()
}

func (o GetFrontendsFrontendArrayOutput) ToGetFrontendsFrontendArrayOutput() GetFrontendsFrontendArrayOutput {
	return o
}

func (o GetFrontendsFrontendArrayOutput) ToGetFrontendsFrontendArrayOutputWithContext(ctx context.Context) GetFrontendsFrontendArrayOutput {
	return o
}

func (o GetFrontendsFrontendArrayOutput) Index(i pulumi.IntInput) GetFrontendsFrontendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFrontendsFrontend {
		return vs[0].([]GetFrontendsFrontend)[vs[1].(int)]
	}).(GetFrontendsFrontendOutput)
}

type GetIPsIp struct {
	// The associated IP ID.
	Id string `pulumi:"id"`
	// The IP Address
	IpAddress string `pulumi:"ipAddress"`
	// The associated load-balancer ID if any
	LbId string `pulumi:"lbId"`
	// The organization ID the load-balancer is associated with.
	OrganizationId string `pulumi:"organizationId"`
	// The ID of the project the load-balancer is associated with.
	ProjectId string `pulumi:"projectId"`
	// The reverse domain associated with this IP.
	Reverse string `pulumi:"reverse"`
	// `zone`) The zone in which IPs exist.
	Zone string `pulumi:"zone"`
}

// GetIPsIpInput is an input type that accepts GetIPsIpArgs and GetIPsIpOutput values.
// You can construct a concrete instance of `GetIPsIpInput` via:
//
//	GetIPsIpArgs{...}
type GetIPsIpInput interface {
	pulumi.Input

	ToGetIPsIpOutput() GetIPsIpOutput
	ToGetIPsIpOutputWithContext(context.Context) GetIPsIpOutput
}

type GetIPsIpArgs struct {
	// The associated IP ID.
	Id pulumi.StringInput `pulumi:"id"`
	// The IP Address
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The associated load-balancer ID if any
	LbId pulumi.StringInput `pulumi:"lbId"`
	// The organization ID the load-balancer is associated with.
	OrganizationId pulumi.StringInput `pulumi:"organizationId"`
	// The ID of the project the load-balancer is associated with.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The reverse domain associated with this IP.
	Reverse pulumi.StringInput `pulumi:"reverse"`
	// `zone`) The zone in which IPs exist.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetIPsIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIPsIp)(nil)).Elem()
}

func (i GetIPsIpArgs) ToGetIPsIpOutput() GetIPsIpOutput {
	return i.ToGetIPsIpOutputWithContext(context.Background())
}

func (i GetIPsIpArgs) ToGetIPsIpOutputWithContext(ctx context.Context) GetIPsIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIPsIpOutput)
}

// GetIPsIpArrayInput is an input type that accepts GetIPsIpArray and GetIPsIpArrayOutput values.
// You can construct a concrete instance of `GetIPsIpArrayInput` via:
//
//	GetIPsIpArray{ GetIPsIpArgs{...} }
type GetIPsIpArrayInput interface {
	pulumi.Input

	ToGetIPsIpArrayOutput() GetIPsIpArrayOutput
	ToGetIPsIpArrayOutputWithContext(context.Context) GetIPsIpArrayOutput
}

type GetIPsIpArray []GetIPsIpInput

func (GetIPsIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIPsIp)(nil)).Elem()
}

func (i GetIPsIpArray) ToGetIPsIpArrayOutput() GetIPsIpArrayOutput {
	return i.ToGetIPsIpArrayOutputWithContext(context.Background())
}

func (i GetIPsIpArray) ToGetIPsIpArrayOutputWithContext(ctx context.Context) GetIPsIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIPsIpArrayOutput)
}

type GetIPsIpOutput struct{ *pulumi.OutputState }

func (GetIPsIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIPsIp)(nil)).Elem()
}

func (o GetIPsIpOutput) ToGetIPsIpOutput() GetIPsIpOutput {
	return o
}

func (o GetIPsIpOutput) ToGetIPsIpOutputWithContext(ctx context.Context) GetIPsIpOutput {
	return o
}

// The associated IP ID.
func (o GetIPsIpOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIPsIp) string { return v.Id }).(pulumi.StringOutput)
}

// The IP Address
func (o GetIPsIpOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetIPsIp) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The associated load-balancer ID if any
func (o GetIPsIpOutput) LbId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIPsIp) string { return v.LbId }).(pulumi.StringOutput)
}

// The organization ID the load-balancer is associated with.
func (o GetIPsIpOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIPsIp) string { return v.OrganizationId }).(pulumi.StringOutput)
}

// The ID of the project the load-balancer is associated with.
func (o GetIPsIpOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIPsIp) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The reverse domain associated with this IP.
func (o GetIPsIpOutput) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v GetIPsIp) string { return v.Reverse }).(pulumi.StringOutput)
}

// `zone`) The zone in which IPs exist.
func (o GetIPsIpOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetIPsIp) string { return v.Zone }).(pulumi.StringOutput)
}

type GetIPsIpArrayOutput struct{ *pulumi.OutputState }

func (GetIPsIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIPsIp)(nil)).Elem()
}

func (o GetIPsIpArrayOutput) ToGetIPsIpArrayOutput() GetIPsIpArrayOutput {
	return o
}

func (o GetIPsIpArrayOutput) ToGetIPsIpArrayOutputWithContext(ctx context.Context) GetIPsIpArrayOutput {
	return o
}

func (o GetIPsIpArrayOutput) Index(i pulumi.IntInput) GetIPsIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIPsIp {
		return vs[0].([]GetIPsIp)[vs[1].(int)]
	}).(GetIPsIpOutput)
}

type GetLoadBalancerPrivateNetwork struct {
	DhcpConfig       bool     `pulumi:"dhcpConfig"`
	PrivateNetworkId string   `pulumi:"privateNetworkId"`
	StaticConfigs    []string `pulumi:"staticConfigs"`
	Status           string   `pulumi:"status"`
	// (Defaults to provider `zone`) The zone in which the LB exists.
	Zone string `pulumi:"zone"`
}

// GetLoadBalancerPrivateNetworkInput is an input type that accepts GetLoadBalancerPrivateNetworkArgs and GetLoadBalancerPrivateNetworkOutput values.
// You can construct a concrete instance of `GetLoadBalancerPrivateNetworkInput` via:
//
//	GetLoadBalancerPrivateNetworkArgs{...}
type GetLoadBalancerPrivateNetworkInput interface {
	pulumi.Input

	ToGetLoadBalancerPrivateNetworkOutput() GetLoadBalancerPrivateNetworkOutput
	ToGetLoadBalancerPrivateNetworkOutputWithContext(context.Context) GetLoadBalancerPrivateNetworkOutput
}

type GetLoadBalancerPrivateNetworkArgs struct {
	DhcpConfig       pulumi.BoolInput        `pulumi:"dhcpConfig"`
	PrivateNetworkId pulumi.StringInput      `pulumi:"privateNetworkId"`
	StaticConfigs    pulumi.StringArrayInput `pulumi:"staticConfigs"`
	Status           pulumi.StringInput      `pulumi:"status"`
	// (Defaults to provider `zone`) The zone in which the LB exists.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetLoadBalancerPrivateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerPrivateNetwork)(nil)).Elem()
}

func (i GetLoadBalancerPrivateNetworkArgs) ToGetLoadBalancerPrivateNetworkOutput() GetLoadBalancerPrivateNetworkOutput {
	return i.ToGetLoadBalancerPrivateNetworkOutputWithContext(context.Background())
}

func (i GetLoadBalancerPrivateNetworkArgs) ToGetLoadBalancerPrivateNetworkOutputWithContext(ctx context.Context) GetLoadBalancerPrivateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerPrivateNetworkOutput)
}

// GetLoadBalancerPrivateNetworkArrayInput is an input type that accepts GetLoadBalancerPrivateNetworkArray and GetLoadBalancerPrivateNetworkArrayOutput values.
// You can construct a concrete instance of `GetLoadBalancerPrivateNetworkArrayInput` via:
//
//	GetLoadBalancerPrivateNetworkArray{ GetLoadBalancerPrivateNetworkArgs{...} }
type GetLoadBalancerPrivateNetworkArrayInput interface {
	pulumi.Input

	ToGetLoadBalancerPrivateNetworkArrayOutput() GetLoadBalancerPrivateNetworkArrayOutput
	ToGetLoadBalancerPrivateNetworkArrayOutputWithContext(context.Context) GetLoadBalancerPrivateNetworkArrayOutput
}

type GetLoadBalancerPrivateNetworkArray []GetLoadBalancerPrivateNetworkInput

func (GetLoadBalancerPrivateNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancerPrivateNetwork)(nil)).Elem()
}

func (i GetLoadBalancerPrivateNetworkArray) ToGetLoadBalancerPrivateNetworkArrayOutput() GetLoadBalancerPrivateNetworkArrayOutput {
	return i.ToGetLoadBalancerPrivateNetworkArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancerPrivateNetworkArray) ToGetLoadBalancerPrivateNetworkArrayOutputWithContext(ctx context.Context) GetLoadBalancerPrivateNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerPrivateNetworkArrayOutput)
}

type GetLoadBalancerPrivateNetworkOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerPrivateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerPrivateNetwork)(nil)).Elem()
}

func (o GetLoadBalancerPrivateNetworkOutput) ToGetLoadBalancerPrivateNetworkOutput() GetLoadBalancerPrivateNetworkOutput {
	return o
}

func (o GetLoadBalancerPrivateNetworkOutput) ToGetLoadBalancerPrivateNetworkOutputWithContext(ctx context.Context) GetLoadBalancerPrivateNetworkOutput {
	return o
}

func (o GetLoadBalancerPrivateNetworkOutput) DhcpConfig() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLoadBalancerPrivateNetwork) bool { return v.DhcpConfig }).(pulumi.BoolOutput)
}

func (o GetLoadBalancerPrivateNetworkOutput) PrivateNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerPrivateNetwork) string { return v.PrivateNetworkId }).(pulumi.StringOutput)
}

func (o GetLoadBalancerPrivateNetworkOutput) StaticConfigs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLoadBalancerPrivateNetwork) []string { return v.StaticConfigs }).(pulumi.StringArrayOutput)
}

func (o GetLoadBalancerPrivateNetworkOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerPrivateNetwork) string { return v.Status }).(pulumi.StringOutput)
}

// (Defaults to provider `zone`) The zone in which the LB exists.
func (o GetLoadBalancerPrivateNetworkOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerPrivateNetwork) string { return v.Zone }).(pulumi.StringOutput)
}

type GetLoadBalancerPrivateNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerPrivateNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancerPrivateNetwork)(nil)).Elem()
}

func (o GetLoadBalancerPrivateNetworkArrayOutput) ToGetLoadBalancerPrivateNetworkArrayOutput() GetLoadBalancerPrivateNetworkArrayOutput {
	return o
}

func (o GetLoadBalancerPrivateNetworkArrayOutput) ToGetLoadBalancerPrivateNetworkArrayOutputWithContext(ctx context.Context) GetLoadBalancerPrivateNetworkArrayOutput {
	return o
}

func (o GetLoadBalancerPrivateNetworkArrayOutput) Index(i pulumi.IntInput) GetLoadBalancerPrivateNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancerPrivateNetwork {
		return vs[0].([]GetLoadBalancerPrivateNetwork)[vs[1].(int)]
	}).(GetLoadBalancerPrivateNetworkOutput)
}

type GetLoadBalancersLb struct {
	// Number of backends the Load balancer has.
	BackendCount int `pulumi:"backendCount"`
	// Date at which the Load balancer was created.
	CreatedAt string `pulumi:"createdAt"`
	// The description of the load-balancer.
	Description string `pulumi:"description"`
	// Number of frontends the Load balancer has.
	FrontendCount int `pulumi:"frontendCount"`
	// The ID of the load-balancer.
	Id string `pulumi:"id"`
	// List of underlying instances.
	Instances []GetLoadBalancersLbInstance `pulumi:"instances"`
	// List of IPs attached to the Load balancer.
	Ips []GetLoadBalancersLbIp `pulumi:"ips"`
	// The load balancer name used as a filter. LBs with a name like it are listed.
	Name string `pulumi:"name"`
	// The organization ID the load-balancer is associated with.
	OrganizationId string `pulumi:"organizationId"`
	// Number of private networks attached to the Load balancer.
	PrivateNetworkCount int `pulumi:"privateNetworkCount"`
	// The ID of the project the load-balancer is associated with.
	ProjectId string `pulumi:"projectId"`
	// Number of routes the Load balancer has.
	RouteCount int `pulumi:"routeCount"`
	// Determines the minimal SSL version which needs to be supported on client side.
	SslCompatibilityLevel string `pulumi:"sslCompatibilityLevel"`
	// The state of the LB's instance. Possible values are: `unknown`, `ready`, `pending`, `stopped`, `error`, `locked` and `migrating`.
	Status string `pulumi:"status"`
	// The subscriber information.
	Subscriber string `pulumi:"subscriber"`
	// The tags associated with the load-balancer.
	Tags []string `pulumi:"tags"`
	// The offer type of the load-balancer.
	Type string `pulumi:"type"`
	// Date at which the Load balancer was updated.
	UpdatedAt string `pulumi:"updatedAt"`
	// `zone`) The zone in which LBs exist.
	Zone string `pulumi:"zone"`
}

// GetLoadBalancersLbInput is an input type that accepts GetLoadBalancersLbArgs and GetLoadBalancersLbOutput values.
// You can construct a concrete instance of `GetLoadBalancersLbInput` via:
//
//	GetLoadBalancersLbArgs{...}
type GetLoadBalancersLbInput interface {
	pulumi.Input

	ToGetLoadBalancersLbOutput() GetLoadBalancersLbOutput
	ToGetLoadBalancersLbOutputWithContext(context.Context) GetLoadBalancersLbOutput
}

type GetLoadBalancersLbArgs struct {
	// Number of backends the Load balancer has.
	BackendCount pulumi.IntInput `pulumi:"backendCount"`
	// Date at which the Load balancer was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of the load-balancer.
	Description pulumi.StringInput `pulumi:"description"`
	// Number of frontends the Load balancer has.
	FrontendCount pulumi.IntInput `pulumi:"frontendCount"`
	// The ID of the load-balancer.
	Id pulumi.StringInput `pulumi:"id"`
	// List of underlying instances.
	Instances GetLoadBalancersLbInstanceArrayInput `pulumi:"instances"`
	// List of IPs attached to the Load balancer.
	Ips GetLoadBalancersLbIpArrayInput `pulumi:"ips"`
	// The load balancer name used as a filter. LBs with a name like it are listed.
	Name pulumi.StringInput `pulumi:"name"`
	// The organization ID the load-balancer is associated with.
	OrganizationId pulumi.StringInput `pulumi:"organizationId"`
	// Number of private networks attached to the Load balancer.
	PrivateNetworkCount pulumi.IntInput `pulumi:"privateNetworkCount"`
	// The ID of the project the load-balancer is associated with.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// Number of routes the Load balancer has.
	RouteCount pulumi.IntInput `pulumi:"routeCount"`
	// Determines the minimal SSL version which needs to be supported on client side.
	SslCompatibilityLevel pulumi.StringInput `pulumi:"sslCompatibilityLevel"`
	// The state of the LB's instance. Possible values are: `unknown`, `ready`, `pending`, `stopped`, `error`, `locked` and `migrating`.
	Status pulumi.StringInput `pulumi:"status"`
	// The subscriber information.
	Subscriber pulumi.StringInput `pulumi:"subscriber"`
	// The tags associated with the load-balancer.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// The offer type of the load-balancer.
	Type pulumi.StringInput `pulumi:"type"`
	// Date at which the Load balancer was updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// `zone`) The zone in which LBs exist.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetLoadBalancersLbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersLb)(nil)).Elem()
}

func (i GetLoadBalancersLbArgs) ToGetLoadBalancersLbOutput() GetLoadBalancersLbOutput {
	return i.ToGetLoadBalancersLbOutputWithContext(context.Background())
}

func (i GetLoadBalancersLbArgs) ToGetLoadBalancersLbOutputWithContext(ctx context.Context) GetLoadBalancersLbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersLbOutput)
}

// GetLoadBalancersLbArrayInput is an input type that accepts GetLoadBalancersLbArray and GetLoadBalancersLbArrayOutput values.
// You can construct a concrete instance of `GetLoadBalancersLbArrayInput` via:
//
//	GetLoadBalancersLbArray{ GetLoadBalancersLbArgs{...} }
type GetLoadBalancersLbArrayInput interface {
	pulumi.Input

	ToGetLoadBalancersLbArrayOutput() GetLoadBalancersLbArrayOutput
	ToGetLoadBalancersLbArrayOutputWithContext(context.Context) GetLoadBalancersLbArrayOutput
}

type GetLoadBalancersLbArray []GetLoadBalancersLbInput

func (GetLoadBalancersLbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersLb)(nil)).Elem()
}

func (i GetLoadBalancersLbArray) ToGetLoadBalancersLbArrayOutput() GetLoadBalancersLbArrayOutput {
	return i.ToGetLoadBalancersLbArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancersLbArray) ToGetLoadBalancersLbArrayOutputWithContext(ctx context.Context) GetLoadBalancersLbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersLbArrayOutput)
}

type GetLoadBalancersLbOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersLbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersLb)(nil)).Elem()
}

func (o GetLoadBalancersLbOutput) ToGetLoadBalancersLbOutput() GetLoadBalancersLbOutput {
	return o
}

func (o GetLoadBalancersLbOutput) ToGetLoadBalancersLbOutputWithContext(ctx context.Context) GetLoadBalancersLbOutput {
	return o
}

// Number of backends the Load balancer has.
func (o GetLoadBalancersLbOutput) BackendCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) int { return v.BackendCount }).(pulumi.IntOutput)
}

// Date at which the Load balancer was created.
func (o GetLoadBalancersLbOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the load-balancer.
func (o GetLoadBalancersLbOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) string { return v.Description }).(pulumi.StringOutput)
}

// Number of frontends the Load balancer has.
func (o GetLoadBalancersLbOutput) FrontendCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) int { return v.FrontendCount }).(pulumi.IntOutput)
}

// The ID of the load-balancer.
func (o GetLoadBalancersLbOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) string { return v.Id }).(pulumi.StringOutput)
}

// List of underlying instances.
func (o GetLoadBalancersLbOutput) Instances() GetLoadBalancersLbInstanceArrayOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) []GetLoadBalancersLbInstance { return v.Instances }).(GetLoadBalancersLbInstanceArrayOutput)
}

// List of IPs attached to the Load balancer.
func (o GetLoadBalancersLbOutput) Ips() GetLoadBalancersLbIpArrayOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) []GetLoadBalancersLbIp { return v.Ips }).(GetLoadBalancersLbIpArrayOutput)
}

// The load balancer name used as a filter. LBs with a name like it are listed.
func (o GetLoadBalancersLbOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) string { return v.Name }).(pulumi.StringOutput)
}

// The organization ID the load-balancer is associated with.
func (o GetLoadBalancersLbOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) string { return v.OrganizationId }).(pulumi.StringOutput)
}

// Number of private networks attached to the Load balancer.
func (o GetLoadBalancersLbOutput) PrivateNetworkCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) int { return v.PrivateNetworkCount }).(pulumi.IntOutput)
}

// The ID of the project the load-balancer is associated with.
func (o GetLoadBalancersLbOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Number of routes the Load balancer has.
func (o GetLoadBalancersLbOutput) RouteCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) int { return v.RouteCount }).(pulumi.IntOutput)
}

// Determines the minimal SSL version which needs to be supported on client side.
func (o GetLoadBalancersLbOutput) SslCompatibilityLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) string { return v.SslCompatibilityLevel }).(pulumi.StringOutput)
}

// The state of the LB's instance. Possible values are: `unknown`, `ready`, `pending`, `stopped`, `error`, `locked` and `migrating`.
func (o GetLoadBalancersLbOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) string { return v.Status }).(pulumi.StringOutput)
}

// The subscriber information.
func (o GetLoadBalancersLbOutput) Subscriber() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) string { return v.Subscriber }).(pulumi.StringOutput)
}

// The tags associated with the load-balancer.
func (o GetLoadBalancersLbOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The offer type of the load-balancer.
func (o GetLoadBalancersLbOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) string { return v.Type }).(pulumi.StringOutput)
}

// Date at which the Load balancer was updated.
func (o GetLoadBalancersLbOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// `zone`) The zone in which LBs exist.
func (o GetLoadBalancersLbOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLb) string { return v.Zone }).(pulumi.StringOutput)
}

type GetLoadBalancersLbArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersLbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersLb)(nil)).Elem()
}

func (o GetLoadBalancersLbArrayOutput) ToGetLoadBalancersLbArrayOutput() GetLoadBalancersLbArrayOutput {
	return o
}

func (o GetLoadBalancersLbArrayOutput) ToGetLoadBalancersLbArrayOutputWithContext(ctx context.Context) GetLoadBalancersLbArrayOutput {
	return o
}

func (o GetLoadBalancersLbArrayOutput) Index(i pulumi.IntInput) GetLoadBalancersLbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancersLb {
		return vs[0].([]GetLoadBalancersLb)[vs[1].(int)]
	}).(GetLoadBalancersLbOutput)
}

type GetLoadBalancersLbInstance struct {
	// Date at which the Load balancer was created.
	CreatedAt string `pulumi:"createdAt"`
	// The ID of the load-balancer.
	Id        string `pulumi:"id"`
	IpAddress string `pulumi:"ipAddress"`
	// The state of the LB's instance. Possible values are: `unknown`, `ready`, `pending`, `stopped`, `error`, `locked` and `migrating`.
	Status string `pulumi:"status"`
	// Date at which the Load balancer was updated.
	UpdatedAt string `pulumi:"updatedAt"`
	// `zone`) The zone in which LBs exist.
	Zone string `pulumi:"zone"`
}

// GetLoadBalancersLbInstanceInput is an input type that accepts GetLoadBalancersLbInstanceArgs and GetLoadBalancersLbInstanceOutput values.
// You can construct a concrete instance of `GetLoadBalancersLbInstanceInput` via:
//
//	GetLoadBalancersLbInstanceArgs{...}
type GetLoadBalancersLbInstanceInput interface {
	pulumi.Input

	ToGetLoadBalancersLbInstanceOutput() GetLoadBalancersLbInstanceOutput
	ToGetLoadBalancersLbInstanceOutputWithContext(context.Context) GetLoadBalancersLbInstanceOutput
}

type GetLoadBalancersLbInstanceArgs struct {
	// Date at which the Load balancer was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The ID of the load-balancer.
	Id        pulumi.StringInput `pulumi:"id"`
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The state of the LB's instance. Possible values are: `unknown`, `ready`, `pending`, `stopped`, `error`, `locked` and `migrating`.
	Status pulumi.StringInput `pulumi:"status"`
	// Date at which the Load balancer was updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// `zone`) The zone in which LBs exist.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetLoadBalancersLbInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersLbInstance)(nil)).Elem()
}

func (i GetLoadBalancersLbInstanceArgs) ToGetLoadBalancersLbInstanceOutput() GetLoadBalancersLbInstanceOutput {
	return i.ToGetLoadBalancersLbInstanceOutputWithContext(context.Background())
}

func (i GetLoadBalancersLbInstanceArgs) ToGetLoadBalancersLbInstanceOutputWithContext(ctx context.Context) GetLoadBalancersLbInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersLbInstanceOutput)
}

// GetLoadBalancersLbInstanceArrayInput is an input type that accepts GetLoadBalancersLbInstanceArray and GetLoadBalancersLbInstanceArrayOutput values.
// You can construct a concrete instance of `GetLoadBalancersLbInstanceArrayInput` via:
//
//	GetLoadBalancersLbInstanceArray{ GetLoadBalancersLbInstanceArgs{...} }
type GetLoadBalancersLbInstanceArrayInput interface {
	pulumi.Input

	ToGetLoadBalancersLbInstanceArrayOutput() GetLoadBalancersLbInstanceArrayOutput
	ToGetLoadBalancersLbInstanceArrayOutputWithContext(context.Context) GetLoadBalancersLbInstanceArrayOutput
}

type GetLoadBalancersLbInstanceArray []GetLoadBalancersLbInstanceInput

func (GetLoadBalancersLbInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersLbInstance)(nil)).Elem()
}

func (i GetLoadBalancersLbInstanceArray) ToGetLoadBalancersLbInstanceArrayOutput() GetLoadBalancersLbInstanceArrayOutput {
	return i.ToGetLoadBalancersLbInstanceArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancersLbInstanceArray) ToGetLoadBalancersLbInstanceArrayOutputWithContext(ctx context.Context) GetLoadBalancersLbInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersLbInstanceArrayOutput)
}

type GetLoadBalancersLbInstanceOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersLbInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersLbInstance)(nil)).Elem()
}

func (o GetLoadBalancersLbInstanceOutput) ToGetLoadBalancersLbInstanceOutput() GetLoadBalancersLbInstanceOutput {
	return o
}

func (o GetLoadBalancersLbInstanceOutput) ToGetLoadBalancersLbInstanceOutputWithContext(ctx context.Context) GetLoadBalancersLbInstanceOutput {
	return o
}

// Date at which the Load balancer was created.
func (o GetLoadBalancersLbInstanceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLbInstance) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ID of the load-balancer.
func (o GetLoadBalancersLbInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLbInstance) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetLoadBalancersLbInstanceOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLbInstance) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The state of the LB's instance. Possible values are: `unknown`, `ready`, `pending`, `stopped`, `error`, `locked` and `migrating`.
func (o GetLoadBalancersLbInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLbInstance) string { return v.Status }).(pulumi.StringOutput)
}

// Date at which the Load balancer was updated.
func (o GetLoadBalancersLbInstanceOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLbInstance) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// `zone`) The zone in which LBs exist.
func (o GetLoadBalancersLbInstanceOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLbInstance) string { return v.Zone }).(pulumi.StringOutput)
}

type GetLoadBalancersLbInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersLbInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersLbInstance)(nil)).Elem()
}

func (o GetLoadBalancersLbInstanceArrayOutput) ToGetLoadBalancersLbInstanceArrayOutput() GetLoadBalancersLbInstanceArrayOutput {
	return o
}

func (o GetLoadBalancersLbInstanceArrayOutput) ToGetLoadBalancersLbInstanceArrayOutputWithContext(ctx context.Context) GetLoadBalancersLbInstanceArrayOutput {
	return o
}

func (o GetLoadBalancersLbInstanceArrayOutput) Index(i pulumi.IntInput) GetLoadBalancersLbInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancersLbInstance {
		return vs[0].([]GetLoadBalancersLbInstance)[vs[1].(int)]
	}).(GetLoadBalancersLbInstanceOutput)
}

type GetLoadBalancersLbIp struct {
	// The ID of the load-balancer.
	Id        string `pulumi:"id"`
	IpAddress string `pulumi:"ipAddress"`
	LbId      string `pulumi:"lbId"`
	// The organization ID the load-balancer is associated with.
	OrganizationId string `pulumi:"organizationId"`
	// The ID of the project the load-balancer is associated with.
	ProjectId string `pulumi:"projectId"`
	Reverse   string `pulumi:"reverse"`
	// `zone`) The zone in which LBs exist.
	Zone string `pulumi:"zone"`
}

// GetLoadBalancersLbIpInput is an input type that accepts GetLoadBalancersLbIpArgs and GetLoadBalancersLbIpOutput values.
// You can construct a concrete instance of `GetLoadBalancersLbIpInput` via:
//
//	GetLoadBalancersLbIpArgs{...}
type GetLoadBalancersLbIpInput interface {
	pulumi.Input

	ToGetLoadBalancersLbIpOutput() GetLoadBalancersLbIpOutput
	ToGetLoadBalancersLbIpOutputWithContext(context.Context) GetLoadBalancersLbIpOutput
}

type GetLoadBalancersLbIpArgs struct {
	// The ID of the load-balancer.
	Id        pulumi.StringInput `pulumi:"id"`
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	LbId      pulumi.StringInput `pulumi:"lbId"`
	// The organization ID the load-balancer is associated with.
	OrganizationId pulumi.StringInput `pulumi:"organizationId"`
	// The ID of the project the load-balancer is associated with.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	Reverse   pulumi.StringInput `pulumi:"reverse"`
	// `zone`) The zone in which LBs exist.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetLoadBalancersLbIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersLbIp)(nil)).Elem()
}

func (i GetLoadBalancersLbIpArgs) ToGetLoadBalancersLbIpOutput() GetLoadBalancersLbIpOutput {
	return i.ToGetLoadBalancersLbIpOutputWithContext(context.Background())
}

func (i GetLoadBalancersLbIpArgs) ToGetLoadBalancersLbIpOutputWithContext(ctx context.Context) GetLoadBalancersLbIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersLbIpOutput)
}

// GetLoadBalancersLbIpArrayInput is an input type that accepts GetLoadBalancersLbIpArray and GetLoadBalancersLbIpArrayOutput values.
// You can construct a concrete instance of `GetLoadBalancersLbIpArrayInput` via:
//
//	GetLoadBalancersLbIpArray{ GetLoadBalancersLbIpArgs{...} }
type GetLoadBalancersLbIpArrayInput interface {
	pulumi.Input

	ToGetLoadBalancersLbIpArrayOutput() GetLoadBalancersLbIpArrayOutput
	ToGetLoadBalancersLbIpArrayOutputWithContext(context.Context) GetLoadBalancersLbIpArrayOutput
}

type GetLoadBalancersLbIpArray []GetLoadBalancersLbIpInput

func (GetLoadBalancersLbIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersLbIp)(nil)).Elem()
}

func (i GetLoadBalancersLbIpArray) ToGetLoadBalancersLbIpArrayOutput() GetLoadBalancersLbIpArrayOutput {
	return i.ToGetLoadBalancersLbIpArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancersLbIpArray) ToGetLoadBalancersLbIpArrayOutputWithContext(ctx context.Context) GetLoadBalancersLbIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersLbIpArrayOutput)
}

type GetLoadBalancersLbIpOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersLbIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersLbIp)(nil)).Elem()
}

func (o GetLoadBalancersLbIpOutput) ToGetLoadBalancersLbIpOutput() GetLoadBalancersLbIpOutput {
	return o
}

func (o GetLoadBalancersLbIpOutput) ToGetLoadBalancersLbIpOutputWithContext(ctx context.Context) GetLoadBalancersLbIpOutput {
	return o
}

// The ID of the load-balancer.
func (o GetLoadBalancersLbIpOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLbIp) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetLoadBalancersLbIpOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLbIp) string { return v.IpAddress }).(pulumi.StringOutput)
}

func (o GetLoadBalancersLbIpOutput) LbId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLbIp) string { return v.LbId }).(pulumi.StringOutput)
}

// The organization ID the load-balancer is associated with.
func (o GetLoadBalancersLbIpOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLbIp) string { return v.OrganizationId }).(pulumi.StringOutput)
}

// The ID of the project the load-balancer is associated with.
func (o GetLoadBalancersLbIpOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLbIp) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o GetLoadBalancersLbIpOutput) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLbIp) string { return v.Reverse }).(pulumi.StringOutput)
}

// `zone`) The zone in which LBs exist.
func (o GetLoadBalancersLbIpOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLbIp) string { return v.Zone }).(pulumi.StringOutput)
}

type GetLoadBalancersLbIpArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersLbIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersLbIp)(nil)).Elem()
}

func (o GetLoadBalancersLbIpArrayOutput) ToGetLoadBalancersLbIpArrayOutput() GetLoadBalancersLbIpArrayOutput {
	return o
}

func (o GetLoadBalancersLbIpArrayOutput) ToGetLoadBalancersLbIpArrayOutputWithContext(ctx context.Context) GetLoadBalancersLbIpArrayOutput {
	return o
}

func (o GetLoadBalancersLbIpArrayOutput) Index(i pulumi.IntInput) GetLoadBalancersLbIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancersLbIp {
		return vs[0].([]GetLoadBalancersLbIp)[vs[1].(int)]
	}).(GetLoadBalancersLbIpOutput)
}

type GetRoutesRoute struct {
	// The backend ID destination of redirection
	BackendId string `pulumi:"backendId"`
	// The date at which the route was created (RFC 3339 format).
	CreatedAt string `pulumi:"createdAt"`
	// The frontend ID origin of redirection used as a filter. routes with a frontend ID like it are listed.
	FrontendId string `pulumi:"frontendId"`
	// The associated route ID.
	Id string `pulumi:"id"`
	// Specifies the host of the server to which the request is being sent.
	MatchHostHeader string `pulumi:"matchHostHeader"`
	// Server Name Indication TLS extension field from an incoming connection made via an SSL/TLS transport layer.
	MatchSni string `pulumi:"matchSni"`
	// The date at which the route was last updated (RFC 3339 format).
	UpdateAt string `pulumi:"updateAt"`
}

// GetRoutesRouteInput is an input type that accepts GetRoutesRouteArgs and GetRoutesRouteOutput values.
// You can construct a concrete instance of `GetRoutesRouteInput` via:
//
//	GetRoutesRouteArgs{...}
type GetRoutesRouteInput interface {
	pulumi.Input

	ToGetRoutesRouteOutput() GetRoutesRouteOutput
	ToGetRoutesRouteOutputWithContext(context.Context) GetRoutesRouteOutput
}

type GetRoutesRouteArgs struct {
	// The backend ID destination of redirection
	BackendId pulumi.StringInput `pulumi:"backendId"`
	// The date at which the route was created (RFC 3339 format).
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The frontend ID origin of redirection used as a filter. routes with a frontend ID like it are listed.
	FrontendId pulumi.StringInput `pulumi:"frontendId"`
	// The associated route ID.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies the host of the server to which the request is being sent.
	MatchHostHeader pulumi.StringInput `pulumi:"matchHostHeader"`
	// Server Name Indication TLS extension field from an incoming connection made via an SSL/TLS transport layer.
	MatchSni pulumi.StringInput `pulumi:"matchSni"`
	// The date at which the route was last updated (RFC 3339 format).
	UpdateAt pulumi.StringInput `pulumi:"updateAt"`
}

func (GetRoutesRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRoutesRoute)(nil)).Elem()
}

func (i GetRoutesRouteArgs) ToGetRoutesRouteOutput() GetRoutesRouteOutput {
	return i.ToGetRoutesRouteOutputWithContext(context.Background())
}

func (i GetRoutesRouteArgs) ToGetRoutesRouteOutputWithContext(ctx context.Context) GetRoutesRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRoutesRouteOutput)
}

// GetRoutesRouteArrayInput is an input type that accepts GetRoutesRouteArray and GetRoutesRouteArrayOutput values.
// You can construct a concrete instance of `GetRoutesRouteArrayInput` via:
//
//	GetRoutesRouteArray{ GetRoutesRouteArgs{...} }
type GetRoutesRouteArrayInput interface {
	pulumi.Input

	ToGetRoutesRouteArrayOutput() GetRoutesRouteArrayOutput
	ToGetRoutesRouteArrayOutputWithContext(context.Context) GetRoutesRouteArrayOutput
}

type GetRoutesRouteArray []GetRoutesRouteInput

func (GetRoutesRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRoutesRoute)(nil)).Elem()
}

func (i GetRoutesRouteArray) ToGetRoutesRouteArrayOutput() GetRoutesRouteArrayOutput {
	return i.ToGetRoutesRouteArrayOutputWithContext(context.Background())
}

func (i GetRoutesRouteArray) ToGetRoutesRouteArrayOutputWithContext(ctx context.Context) GetRoutesRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRoutesRouteArrayOutput)
}

type GetRoutesRouteOutput struct{ *pulumi.OutputState }

func (GetRoutesRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRoutesRoute)(nil)).Elem()
}

func (o GetRoutesRouteOutput) ToGetRoutesRouteOutput() GetRoutesRouteOutput {
	return o
}

func (o GetRoutesRouteOutput) ToGetRoutesRouteOutputWithContext(ctx context.Context) GetRoutesRouteOutput {
	return o
}

// The backend ID destination of redirection
func (o GetRoutesRouteOutput) BackendId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutesRoute) string { return v.BackendId }).(pulumi.StringOutput)
}

// The date at which the route was created (RFC 3339 format).
func (o GetRoutesRouteOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutesRoute) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The frontend ID origin of redirection used as a filter. routes with a frontend ID like it are listed.
func (o GetRoutesRouteOutput) FrontendId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutesRoute) string { return v.FrontendId }).(pulumi.StringOutput)
}

// The associated route ID.
func (o GetRoutesRouteOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutesRoute) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies the host of the server to which the request is being sent.
func (o GetRoutesRouteOutput) MatchHostHeader() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutesRoute) string { return v.MatchHostHeader }).(pulumi.StringOutput)
}

// Server Name Indication TLS extension field from an incoming connection made via an SSL/TLS transport layer.
func (o GetRoutesRouteOutput) MatchSni() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutesRoute) string { return v.MatchSni }).(pulumi.StringOutput)
}

// The date at which the route was last updated (RFC 3339 format).
func (o GetRoutesRouteOutput) UpdateAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoutesRoute) string { return v.UpdateAt }).(pulumi.StringOutput)
}

type GetRoutesRouteArrayOutput struct{ *pulumi.OutputState }

func (GetRoutesRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRoutesRoute)(nil)).Elem()
}

func (o GetRoutesRouteArrayOutput) ToGetRoutesRouteArrayOutput() GetRoutesRouteArrayOutput {
	return o
}

func (o GetRoutesRouteArrayOutput) ToGetRoutesRouteArrayOutputWithContext(ctx context.Context) GetRoutesRouteArrayOutput {
	return o
}

func (o GetRoutesRouteArrayOutput) Index(i pulumi.IntInput) GetRoutesRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRoutesRoute {
		return vs[0].([]GetRoutesRoute)[vs[1].(int)]
	}).(GetRoutesRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ACLActionInput)(nil)).Elem(), ACLActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACLActionPtrInput)(nil)).Elem(), ACLActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACLActionRedirectInput)(nil)).Elem(), ACLActionRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACLActionRedirectArrayInput)(nil)).Elem(), ACLActionRedirectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACLMatchInput)(nil)).Elem(), ACLMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACLMatchPtrInput)(nil)).Elem(), ACLMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendHealthCheckHttpInput)(nil)).Elem(), BackendHealthCheckHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendHealthCheckHttpPtrInput)(nil)).Elem(), BackendHealthCheckHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendHealthCheckHttpsInput)(nil)).Elem(), BackendHealthCheckHttpsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendHealthCheckHttpsPtrInput)(nil)).Elem(), BackendHealthCheckHttpsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendHealthCheckTcpInput)(nil)).Elem(), BackendHealthCheckTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendHealthCheckTcpPtrInput)(nil)).Elem(), BackendHealthCheckTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertficateCustomCertificateInput)(nil)).Elem(), CertficateCustomCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertficateCustomCertificatePtrInput)(nil)).Elem(), CertficateCustomCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertficateLetsencryptInput)(nil)).Elem(), CertficateLetsencryptArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertficateLetsencryptPtrInput)(nil)).Elem(), CertficateLetsencryptArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontendAclInput)(nil)).Elem(), FrontendAclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontendAclArrayInput)(nil)).Elem(), FrontendAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontendAclActionInput)(nil)).Elem(), FrontendAclActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontendAclActionRedirectInput)(nil)).Elem(), FrontendAclActionRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontendAclActionRedirectArrayInput)(nil)).Elem(), FrontendAclActionRedirectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontendAclMatchInput)(nil)).Elem(), FrontendAclMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerPrivateNetworkInput)(nil)).Elem(), LoadBalancerPrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerPrivateNetworkArrayInput)(nil)).Elem(), LoadBalancerPrivateNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetACLsAclInput)(nil)).Elem(), GetACLsAclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetACLsAclArrayInput)(nil)).Elem(), GetACLsAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetACLsAclActionInput)(nil)).Elem(), GetACLsAclActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetACLsAclActionArrayInput)(nil)).Elem(), GetACLsAclActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetACLsAclActionRedirectInput)(nil)).Elem(), GetACLsAclActionRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetACLsAclActionRedirectArrayInput)(nil)).Elem(), GetACLsAclActionRedirectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetACLsAclMatchInput)(nil)).Elem(), GetACLsAclMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetACLsAclMatchArrayInput)(nil)).Elem(), GetACLsAclMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackendHealthCheckHttpInput)(nil)).Elem(), GetBackendHealthCheckHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackendHealthCheckHttpArrayInput)(nil)).Elem(), GetBackendHealthCheckHttpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackendHealthCheckTcpInput)(nil)).Elem(), GetBackendHealthCheckTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackendHealthCheckTcpArrayInput)(nil)).Elem(), GetBackendHealthCheckTcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackendsBackendInput)(nil)).Elem(), GetBackendsBackendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackendsBackendArrayInput)(nil)).Elem(), GetBackendsBackendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackendsBackendHealthCheckHttpInput)(nil)).Elem(), GetBackendsBackendHealthCheckHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackendsBackendHealthCheckHttpArrayInput)(nil)).Elem(), GetBackendsBackendHealthCheckHttpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackendsBackendHealthCheckTcpInput)(nil)).Elem(), GetBackendsBackendHealthCheckTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackendsBackendHealthCheckTcpArrayInput)(nil)).Elem(), GetBackendsBackendHealthCheckTcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateCustomCertificateInput)(nil)).Elem(), GetCertificateCustomCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateCustomCertificateArrayInput)(nil)).Elem(), GetCertificateCustomCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateLetsencryptInput)(nil)).Elem(), GetCertificateLetsencryptArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateLetsencryptArrayInput)(nil)).Elem(), GetCertificateLetsencryptArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrontendAclInput)(nil)).Elem(), GetFrontendAclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrontendAclArrayInput)(nil)).Elem(), GetFrontendAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrontendAclActionInput)(nil)).Elem(), GetFrontendAclActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrontendAclActionArrayInput)(nil)).Elem(), GetFrontendAclActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrontendAclActionRedirectInput)(nil)).Elem(), GetFrontendAclActionRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrontendAclActionRedirectArrayInput)(nil)).Elem(), GetFrontendAclActionRedirectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrontendAclMatchInput)(nil)).Elem(), GetFrontendAclMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrontendAclMatchArrayInput)(nil)).Elem(), GetFrontendAclMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrontendsFrontendInput)(nil)).Elem(), GetFrontendsFrontendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFrontendsFrontendArrayInput)(nil)).Elem(), GetFrontendsFrontendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIPsIpInput)(nil)).Elem(), GetIPsIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIPsIpArrayInput)(nil)).Elem(), GetIPsIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancerPrivateNetworkInput)(nil)).Elem(), GetLoadBalancerPrivateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancerPrivateNetworkArrayInput)(nil)).Elem(), GetLoadBalancerPrivateNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersLbInput)(nil)).Elem(), GetLoadBalancersLbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersLbArrayInput)(nil)).Elem(), GetLoadBalancersLbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersLbInstanceInput)(nil)).Elem(), GetLoadBalancersLbInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersLbInstanceArrayInput)(nil)).Elem(), GetLoadBalancersLbInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersLbIpInput)(nil)).Elem(), GetLoadBalancersLbIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersLbIpArrayInput)(nil)).Elem(), GetLoadBalancersLbIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRoutesRouteInput)(nil)).Elem(), GetRoutesRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRoutesRouteArrayInput)(nil)).Elem(), GetRoutesRouteArray{})
	pulumi.RegisterOutputType(ACLActionOutput{})
	pulumi.RegisterOutputType(ACLActionPtrOutput{})
	pulumi.RegisterOutputType(ACLActionRedirectOutput{})
	pulumi.RegisterOutputType(ACLActionRedirectArrayOutput{})
	pulumi.RegisterOutputType(ACLMatchOutput{})
	pulumi.RegisterOutputType(ACLMatchPtrOutput{})
	pulumi.RegisterOutputType(BackendHealthCheckHttpOutput{})
	pulumi.RegisterOutputType(BackendHealthCheckHttpPtrOutput{})
	pulumi.RegisterOutputType(BackendHealthCheckHttpsOutput{})
	pulumi.RegisterOutputType(BackendHealthCheckHttpsPtrOutput{})
	pulumi.RegisterOutputType(BackendHealthCheckTcpOutput{})
	pulumi.RegisterOutputType(BackendHealthCheckTcpPtrOutput{})
	pulumi.RegisterOutputType(CertficateCustomCertificateOutput{})
	pulumi.RegisterOutputType(CertficateCustomCertificatePtrOutput{})
	pulumi.RegisterOutputType(CertficateLetsencryptOutput{})
	pulumi.RegisterOutputType(CertficateLetsencryptPtrOutput{})
	pulumi.RegisterOutputType(FrontendAclOutput{})
	pulumi.RegisterOutputType(FrontendAclArrayOutput{})
	pulumi.RegisterOutputType(FrontendAclActionOutput{})
	pulumi.RegisterOutputType(FrontendAclActionRedirectOutput{})
	pulumi.RegisterOutputType(FrontendAclActionRedirectArrayOutput{})
	pulumi.RegisterOutputType(FrontendAclMatchOutput{})
	pulumi.RegisterOutputType(LoadBalancerPrivateNetworkOutput{})
	pulumi.RegisterOutputType(LoadBalancerPrivateNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetACLsAclOutput{})
	pulumi.RegisterOutputType(GetACLsAclArrayOutput{})
	pulumi.RegisterOutputType(GetACLsAclActionOutput{})
	pulumi.RegisterOutputType(GetACLsAclActionArrayOutput{})
	pulumi.RegisterOutputType(GetACLsAclActionRedirectOutput{})
	pulumi.RegisterOutputType(GetACLsAclActionRedirectArrayOutput{})
	pulumi.RegisterOutputType(GetACLsAclMatchOutput{})
	pulumi.RegisterOutputType(GetACLsAclMatchArrayOutput{})
	pulumi.RegisterOutputType(GetBackendHealthCheckHttpOutput{})
	pulumi.RegisterOutputType(GetBackendHealthCheckHttpArrayOutput{})
	pulumi.RegisterOutputType(GetBackendHealthCheckTcpOutput{})
	pulumi.RegisterOutputType(GetBackendHealthCheckTcpArrayOutput{})
	pulumi.RegisterOutputType(GetBackendsBackendOutput{})
	pulumi.RegisterOutputType(GetBackendsBackendArrayOutput{})
	pulumi.RegisterOutputType(GetBackendsBackendHealthCheckHttpOutput{})
	pulumi.RegisterOutputType(GetBackendsBackendHealthCheckHttpArrayOutput{})
	pulumi.RegisterOutputType(GetBackendsBackendHealthCheckTcpOutput{})
	pulumi.RegisterOutputType(GetBackendsBackendHealthCheckTcpArrayOutput{})
	pulumi.RegisterOutputType(GetCertificateCustomCertificateOutput{})
	pulumi.RegisterOutputType(GetCertificateCustomCertificateArrayOutput{})
	pulumi.RegisterOutputType(GetCertificateLetsencryptOutput{})
	pulumi.RegisterOutputType(GetCertificateLetsencryptArrayOutput{})
	pulumi.RegisterOutputType(GetFrontendAclOutput{})
	pulumi.RegisterOutputType(GetFrontendAclArrayOutput{})
	pulumi.RegisterOutputType(GetFrontendAclActionOutput{})
	pulumi.RegisterOutputType(GetFrontendAclActionArrayOutput{})
	pulumi.RegisterOutputType(GetFrontendAclActionRedirectOutput{})
	pulumi.RegisterOutputType(GetFrontendAclActionRedirectArrayOutput{})
	pulumi.RegisterOutputType(GetFrontendAclMatchOutput{})
	pulumi.RegisterOutputType(GetFrontendAclMatchArrayOutput{})
	pulumi.RegisterOutputType(GetFrontendsFrontendOutput{})
	pulumi.RegisterOutputType(GetFrontendsFrontendArrayOutput{})
	pulumi.RegisterOutputType(GetIPsIpOutput{})
	pulumi.RegisterOutputType(GetIPsIpArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerPrivateNetworkOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerPrivateNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersLbOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersLbArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersLbInstanceOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersLbInstanceArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersLbIpOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersLbIpArrayOutput{})
	pulumi.RegisterOutputType(GetRoutesRouteOutput{})
	pulumi.RegisterOutputType(GetRoutesRouteArrayOutput{})
}
