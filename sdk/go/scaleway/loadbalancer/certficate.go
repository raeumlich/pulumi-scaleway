// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package loadbalancer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

type Certficate struct {
	pulumi.CustomResourceState

	// Main domain of the certificate. A new certificate will be created if this field is changed.
	CommonName pulumi.StringOutput `pulumi:"commonName"`
	// Configuration block for custom certificate chain. Only one of `letsencrypt` and `customCertificate` should be specified.
	CustomCertificate CertficateCustomCertificatePtrOutput `pulumi:"customCertificate"`
	// The identifier (SHA-1) of the certificate
	Fingerprint pulumi.StringOutput `pulumi:"fingerprint"`
	// The load-balancer ID this certificate is attached to.
	//
	// > **Important:** Updates to `lbId` will recreate the load-balancer certificate.
	LbId pulumi.StringOutput `pulumi:"lbId"`
	// Configuration block for Let's Encrypt configuration. Only one of `letsencrypt` and `customCertificate` should be specified.
	Letsencrypt CertficateLetsencryptPtrOutput `pulumi:"letsencrypt"`
	// The name of the certificate backend.
	Name pulumi.StringOutput `pulumi:"name"`
	// The not valid after validity bound timestamp
	NotValidAfter pulumi.StringOutput `pulumi:"notValidAfter"`
	// The not valid before validity bound timestamp
	NotValidBefore pulumi.StringOutput `pulumi:"notValidBefore"`
	// Certificate status
	Status pulumi.StringOutput `pulumi:"status"`
	// Array of alternative domain names.  A new certificate will be created if this field is changed.
	//
	// > **Important:** Updates to `letsencrypt` will recreate the load-balancer certificate.
	SubjectAlternativeNames pulumi.StringArrayOutput `pulumi:"subjectAlternativeNames"`
}

// NewCertficate registers a new resource with the given unique name, arguments, and options.
func NewCertficate(ctx *pulumi.Context,
	name string, args *CertficateArgs, opts ...pulumi.ResourceOption) (*Certficate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LbId == nil {
		return nil, errors.New("invalid value for required argument 'LbId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Certficate
	err := ctx.RegisterResource("scaleway:loadbalancer/certficate:Certficate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertficate gets an existing Certficate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertficate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertficateState, opts ...pulumi.ResourceOption) (*Certficate, error) {
	var resource Certficate
	err := ctx.ReadResource("scaleway:loadbalancer/certficate:Certficate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certficate resources.
type certficateState struct {
	// Main domain of the certificate. A new certificate will be created if this field is changed.
	CommonName *string `pulumi:"commonName"`
	// Configuration block for custom certificate chain. Only one of `letsencrypt` and `customCertificate` should be specified.
	CustomCertificate *CertficateCustomCertificate `pulumi:"customCertificate"`
	// The identifier (SHA-1) of the certificate
	Fingerprint *string `pulumi:"fingerprint"`
	// The load-balancer ID this certificate is attached to.
	//
	// > **Important:** Updates to `lbId` will recreate the load-balancer certificate.
	LbId *string `pulumi:"lbId"`
	// Configuration block for Let's Encrypt configuration. Only one of `letsencrypt` and `customCertificate` should be specified.
	Letsencrypt *CertficateLetsencrypt `pulumi:"letsencrypt"`
	// The name of the certificate backend.
	Name *string `pulumi:"name"`
	// The not valid after validity bound timestamp
	NotValidAfter *string `pulumi:"notValidAfter"`
	// The not valid before validity bound timestamp
	NotValidBefore *string `pulumi:"notValidBefore"`
	// Certificate status
	Status *string `pulumi:"status"`
	// Array of alternative domain names.  A new certificate will be created if this field is changed.
	//
	// > **Important:** Updates to `letsencrypt` will recreate the load-balancer certificate.
	SubjectAlternativeNames []string `pulumi:"subjectAlternativeNames"`
}

type CertficateState struct {
	// Main domain of the certificate. A new certificate will be created if this field is changed.
	CommonName pulumi.StringPtrInput
	// Configuration block for custom certificate chain. Only one of `letsencrypt` and `customCertificate` should be specified.
	CustomCertificate CertficateCustomCertificatePtrInput
	// The identifier (SHA-1) of the certificate
	Fingerprint pulumi.StringPtrInput
	// The load-balancer ID this certificate is attached to.
	//
	// > **Important:** Updates to `lbId` will recreate the load-balancer certificate.
	LbId pulumi.StringPtrInput
	// Configuration block for Let's Encrypt configuration. Only one of `letsencrypt` and `customCertificate` should be specified.
	Letsencrypt CertficateLetsencryptPtrInput
	// The name of the certificate backend.
	Name pulumi.StringPtrInput
	// The not valid after validity bound timestamp
	NotValidAfter pulumi.StringPtrInput
	// The not valid before validity bound timestamp
	NotValidBefore pulumi.StringPtrInput
	// Certificate status
	Status pulumi.StringPtrInput
	// Array of alternative domain names.  A new certificate will be created if this field is changed.
	//
	// > **Important:** Updates to `letsencrypt` will recreate the load-balancer certificate.
	SubjectAlternativeNames pulumi.StringArrayInput
}

func (CertficateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certficateState)(nil)).Elem()
}

type certficateArgs struct {
	// Configuration block for custom certificate chain. Only one of `letsencrypt` and `customCertificate` should be specified.
	CustomCertificate *CertficateCustomCertificate `pulumi:"customCertificate"`
	// The load-balancer ID this certificate is attached to.
	//
	// > **Important:** Updates to `lbId` will recreate the load-balancer certificate.
	LbId string `pulumi:"lbId"`
	// Configuration block for Let's Encrypt configuration. Only one of `letsencrypt` and `customCertificate` should be specified.
	Letsencrypt *CertficateLetsencrypt `pulumi:"letsencrypt"`
	// The name of the certificate backend.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Certficate resource.
type CertficateArgs struct {
	// Configuration block for custom certificate chain. Only one of `letsencrypt` and `customCertificate` should be specified.
	CustomCertificate CertficateCustomCertificatePtrInput
	// The load-balancer ID this certificate is attached to.
	//
	// > **Important:** Updates to `lbId` will recreate the load-balancer certificate.
	LbId pulumi.StringInput
	// Configuration block for Let's Encrypt configuration. Only one of `letsencrypt` and `customCertificate` should be specified.
	Letsencrypt CertficateLetsencryptPtrInput
	// The name of the certificate backend.
	Name pulumi.StringPtrInput
}

func (CertficateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certficateArgs)(nil)).Elem()
}

type CertficateInput interface {
	pulumi.Input

	ToCertficateOutput() CertficateOutput
	ToCertficateOutputWithContext(ctx context.Context) CertficateOutput
}

func (*Certficate) ElementType() reflect.Type {
	return reflect.TypeOf((**Certficate)(nil)).Elem()
}

func (i *Certficate) ToCertficateOutput() CertficateOutput {
	return i.ToCertficateOutputWithContext(context.Background())
}

func (i *Certficate) ToCertficateOutputWithContext(ctx context.Context) CertficateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertficateOutput)
}

// CertficateArrayInput is an input type that accepts CertficateArray and CertficateArrayOutput values.
// You can construct a concrete instance of `CertficateArrayInput` via:
//
//	CertficateArray{ CertficateArgs{...} }
type CertficateArrayInput interface {
	pulumi.Input

	ToCertficateArrayOutput() CertficateArrayOutput
	ToCertficateArrayOutputWithContext(context.Context) CertficateArrayOutput
}

type CertficateArray []CertficateInput

func (CertficateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Certficate)(nil)).Elem()
}

func (i CertficateArray) ToCertficateArrayOutput() CertficateArrayOutput {
	return i.ToCertficateArrayOutputWithContext(context.Background())
}

func (i CertficateArray) ToCertficateArrayOutputWithContext(ctx context.Context) CertficateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertficateArrayOutput)
}

// CertficateMapInput is an input type that accepts CertficateMap and CertficateMapOutput values.
// You can construct a concrete instance of `CertficateMapInput` via:
//
//	CertficateMap{ "key": CertficateArgs{...} }
type CertficateMapInput interface {
	pulumi.Input

	ToCertficateMapOutput() CertficateMapOutput
	ToCertficateMapOutputWithContext(context.Context) CertficateMapOutput
}

type CertficateMap map[string]CertficateInput

func (CertficateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Certficate)(nil)).Elem()
}

func (i CertficateMap) ToCertficateMapOutput() CertficateMapOutput {
	return i.ToCertficateMapOutputWithContext(context.Background())
}

func (i CertficateMap) ToCertficateMapOutputWithContext(ctx context.Context) CertficateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertficateMapOutput)
}

type CertficateOutput struct{ *pulumi.OutputState }

func (CertficateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Certficate)(nil)).Elem()
}

func (o CertficateOutput) ToCertficateOutput() CertficateOutput {
	return o
}

func (o CertficateOutput) ToCertficateOutputWithContext(ctx context.Context) CertficateOutput {
	return o
}

// Main domain of the certificate. A new certificate will be created if this field is changed.
func (o CertficateOutput) CommonName() pulumi.StringOutput {
	return o.ApplyT(func(v *Certficate) pulumi.StringOutput { return v.CommonName }).(pulumi.StringOutput)
}

// Configuration block for custom certificate chain. Only one of `letsencrypt` and `customCertificate` should be specified.
func (o CertficateOutput) CustomCertificate() CertficateCustomCertificatePtrOutput {
	return o.ApplyT(func(v *Certficate) CertficateCustomCertificatePtrOutput { return v.CustomCertificate }).(CertficateCustomCertificatePtrOutput)
}

// The identifier (SHA-1) of the certificate
func (o CertficateOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *Certficate) pulumi.StringOutput { return v.Fingerprint }).(pulumi.StringOutput)
}

// The load-balancer ID this certificate is attached to.
//
// > **Important:** Updates to `lbId` will recreate the load-balancer certificate.
func (o CertficateOutput) LbId() pulumi.StringOutput {
	return o.ApplyT(func(v *Certficate) pulumi.StringOutput { return v.LbId }).(pulumi.StringOutput)
}

// Configuration block for Let's Encrypt configuration. Only one of `letsencrypt` and `customCertificate` should be specified.
func (o CertficateOutput) Letsencrypt() CertficateLetsencryptPtrOutput {
	return o.ApplyT(func(v *Certficate) CertficateLetsencryptPtrOutput { return v.Letsencrypt }).(CertficateLetsencryptPtrOutput)
}

// The name of the certificate backend.
func (o CertficateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Certficate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The not valid after validity bound timestamp
func (o CertficateOutput) NotValidAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *Certficate) pulumi.StringOutput { return v.NotValidAfter }).(pulumi.StringOutput)
}

// The not valid before validity bound timestamp
func (o CertficateOutput) NotValidBefore() pulumi.StringOutput {
	return o.ApplyT(func(v *Certficate) pulumi.StringOutput { return v.NotValidBefore }).(pulumi.StringOutput)
}

// Certificate status
func (o CertficateOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Certficate) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Array of alternative domain names.  A new certificate will be created if this field is changed.
//
// > **Important:** Updates to `letsencrypt` will recreate the load-balancer certificate.
func (o CertficateOutput) SubjectAlternativeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Certficate) pulumi.StringArrayOutput { return v.SubjectAlternativeNames }).(pulumi.StringArrayOutput)
}

type CertficateArrayOutput struct{ *pulumi.OutputState }

func (CertficateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Certficate)(nil)).Elem()
}

func (o CertficateArrayOutput) ToCertficateArrayOutput() CertficateArrayOutput {
	return o
}

func (o CertficateArrayOutput) ToCertficateArrayOutputWithContext(ctx context.Context) CertficateArrayOutput {
	return o
}

func (o CertficateArrayOutput) Index(i pulumi.IntInput) CertficateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Certficate {
		return vs[0].([]*Certficate)[vs[1].(int)]
	}).(CertficateOutput)
}

type CertficateMapOutput struct{ *pulumi.OutputState }

func (CertficateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Certficate)(nil)).Elem()
}

func (o CertficateMapOutput) ToCertficateMapOutput() CertficateMapOutput {
	return o
}

func (o CertficateMapOutput) ToCertficateMapOutputWithContext(ctx context.Context) CertficateMapOutput {
	return o
}

func (o CertficateMapOutput) MapIndex(k pulumi.StringInput) CertficateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Certficate {
		return vs[0].(map[string]*Certficate)[vs[1].(string)]
	}).(CertficateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertficateInput)(nil)).Elem(), &Certficate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertficateArrayInput)(nil)).Elem(), CertficateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertficateMapInput)(nil)).Elem(), CertficateMap{})
	pulumi.RegisterOutputType(CertficateOutput{})
	pulumi.RegisterOutputType(CertficateArrayOutput{})
	pulumi.RegisterOutputType(CertficateMapOutput{})
}
