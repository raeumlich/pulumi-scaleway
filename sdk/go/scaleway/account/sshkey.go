// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package account

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/internal"
)

// Manages user SSH keys to access servers provisioned on Scaleway.
//
// > **Important:**  The resource `account.SSHKey` has been deprecated and will no longer be supported. Instead, use `iam.SSHKey`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/raeumlich/pulumi-scaleway/sdk/go/scaleway/account"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := account.NewSSHKey(ctx, "main", &account.SSHKeyArgs{
//				PublicKey: pulumi.String("<YOUR-PUBLIC-SSH-KEY>"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SSH keys can be imported using the `id`, e.g. bash
//
// ```sh
//
//	$ pulumi import scaleway:account/sSHKey:SSHKey main 11111111-1111-1111-1111-111111111111
//
// ```
type SSHKey struct {
	pulumi.CustomResourceState

	// The date and time of the creation of the iam SSH Key
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The SSH key status
	Disabled pulumi.BoolPtrOutput `pulumi:"disabled"`
	// The fingerprint of the iam SSH key
	Fingerprint pulumi.StringOutput `pulumi:"fingerprint"`
	// The name of the SSH key.
	Name pulumi.StringOutput `pulumi:"name"`
	// The organization ID the SSH key is associated with.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// `projectId`) The ID of the project the SSH key is associated with.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The public SSH key to be added.
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
	// The date and time of the last update of the iam SSH Key
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewSSHKey registers a new resource with the given unique name, arguments, and options.
func NewSSHKey(ctx *pulumi.Context,
	name string, args *SSHKeyArgs, opts ...pulumi.ResourceOption) (*SSHKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PublicKey == nil {
		return nil, errors.New("invalid value for required argument 'PublicKey'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SSHKey
	err := ctx.RegisterResource("scaleway:account/sSHKey:SSHKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSSHKey gets an existing SSHKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSSHKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SSHKeyState, opts ...pulumi.ResourceOption) (*SSHKey, error) {
	var resource SSHKey
	err := ctx.ReadResource("scaleway:account/sSHKey:SSHKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SSHKey resources.
type sshkeyState struct {
	// The date and time of the creation of the iam SSH Key
	CreatedAt *string `pulumi:"createdAt"`
	// The SSH key status
	Disabled *bool `pulumi:"disabled"`
	// The fingerprint of the iam SSH key
	Fingerprint *string `pulumi:"fingerprint"`
	// The name of the SSH key.
	Name *string `pulumi:"name"`
	// The organization ID the SSH key is associated with.
	OrganizationId *string `pulumi:"organizationId"`
	// `projectId`) The ID of the project the SSH key is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The public SSH key to be added.
	PublicKey *string `pulumi:"publicKey"`
	// The date and time of the last update of the iam SSH Key
	UpdatedAt *string `pulumi:"updatedAt"`
}

type SSHKeyState struct {
	// The date and time of the creation of the iam SSH Key
	CreatedAt pulumi.StringPtrInput
	// The SSH key status
	Disabled pulumi.BoolPtrInput
	// The fingerprint of the iam SSH key
	Fingerprint pulumi.StringPtrInput
	// The name of the SSH key.
	Name pulumi.StringPtrInput
	// The organization ID the SSH key is associated with.
	OrganizationId pulumi.StringPtrInput
	// `projectId`) The ID of the project the SSH key is associated with.
	ProjectId pulumi.StringPtrInput
	// The public SSH key to be added.
	PublicKey pulumi.StringPtrInput
	// The date and time of the last update of the iam SSH Key
	UpdatedAt pulumi.StringPtrInput
}

func (SSHKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*sshkeyState)(nil)).Elem()
}

type sshkeyArgs struct {
	// The SSH key status
	Disabled *bool `pulumi:"disabled"`
	// The name of the SSH key.
	Name *string `pulumi:"name"`
	// `projectId`) The ID of the project the SSH key is associated with.
	ProjectId *string `pulumi:"projectId"`
	// The public SSH key to be added.
	PublicKey string `pulumi:"publicKey"`
}

// The set of arguments for constructing a SSHKey resource.
type SSHKeyArgs struct {
	// The SSH key status
	Disabled pulumi.BoolPtrInput
	// The name of the SSH key.
	Name pulumi.StringPtrInput
	// `projectId`) The ID of the project the SSH key is associated with.
	ProjectId pulumi.StringPtrInput
	// The public SSH key to be added.
	PublicKey pulumi.StringInput
}

func (SSHKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sshkeyArgs)(nil)).Elem()
}

type SSHKeyInput interface {
	pulumi.Input

	ToSSHKeyOutput() SSHKeyOutput
	ToSSHKeyOutputWithContext(ctx context.Context) SSHKeyOutput
}

func (*SSHKey) ElementType() reflect.Type {
	return reflect.TypeOf((**SSHKey)(nil)).Elem()
}

func (i *SSHKey) ToSSHKeyOutput() SSHKeyOutput {
	return i.ToSSHKeyOutputWithContext(context.Background())
}

func (i *SSHKey) ToSSHKeyOutputWithContext(ctx context.Context) SSHKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSHKeyOutput)
}

// SSHKeyArrayInput is an input type that accepts SSHKeyArray and SSHKeyArrayOutput values.
// You can construct a concrete instance of `SSHKeyArrayInput` via:
//
//	SSHKeyArray{ SSHKeyArgs{...} }
type SSHKeyArrayInput interface {
	pulumi.Input

	ToSSHKeyArrayOutput() SSHKeyArrayOutput
	ToSSHKeyArrayOutputWithContext(context.Context) SSHKeyArrayOutput
}

type SSHKeyArray []SSHKeyInput

func (SSHKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SSHKey)(nil)).Elem()
}

func (i SSHKeyArray) ToSSHKeyArrayOutput() SSHKeyArrayOutput {
	return i.ToSSHKeyArrayOutputWithContext(context.Background())
}

func (i SSHKeyArray) ToSSHKeyArrayOutputWithContext(ctx context.Context) SSHKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSHKeyArrayOutput)
}

// SSHKeyMapInput is an input type that accepts SSHKeyMap and SSHKeyMapOutput values.
// You can construct a concrete instance of `SSHKeyMapInput` via:
//
//	SSHKeyMap{ "key": SSHKeyArgs{...} }
type SSHKeyMapInput interface {
	pulumi.Input

	ToSSHKeyMapOutput() SSHKeyMapOutput
	ToSSHKeyMapOutputWithContext(context.Context) SSHKeyMapOutput
}

type SSHKeyMap map[string]SSHKeyInput

func (SSHKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SSHKey)(nil)).Elem()
}

func (i SSHKeyMap) ToSSHKeyMapOutput() SSHKeyMapOutput {
	return i.ToSSHKeyMapOutputWithContext(context.Background())
}

func (i SSHKeyMap) ToSSHKeyMapOutputWithContext(ctx context.Context) SSHKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSHKeyMapOutput)
}

type SSHKeyOutput struct{ *pulumi.OutputState }

func (SSHKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SSHKey)(nil)).Elem()
}

func (o SSHKeyOutput) ToSSHKeyOutput() SSHKeyOutput {
	return o
}

func (o SSHKeyOutput) ToSSHKeyOutputWithContext(ctx context.Context) SSHKeyOutput {
	return o
}

// The date and time of the creation of the iam SSH Key
func (o SSHKeyOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SSHKey) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The SSH key status
func (o SSHKeyOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SSHKey) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The fingerprint of the iam SSH key
func (o SSHKeyOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *SSHKey) pulumi.StringOutput { return v.Fingerprint }).(pulumi.StringOutput)
}

// The name of the SSH key.
func (o SSHKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SSHKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The organization ID the SSH key is associated with.
func (o SSHKeyOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *SSHKey) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// `projectId`) The ID of the project the SSH key is associated with.
func (o SSHKeyOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SSHKey) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The public SSH key to be added.
func (o SSHKeyOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SSHKey) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

// The date and time of the last update of the iam SSH Key
func (o SSHKeyOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SSHKey) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type SSHKeyArrayOutput struct{ *pulumi.OutputState }

func (SSHKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SSHKey)(nil)).Elem()
}

func (o SSHKeyArrayOutput) ToSSHKeyArrayOutput() SSHKeyArrayOutput {
	return o
}

func (o SSHKeyArrayOutput) ToSSHKeyArrayOutputWithContext(ctx context.Context) SSHKeyArrayOutput {
	return o
}

func (o SSHKeyArrayOutput) Index(i pulumi.IntInput) SSHKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SSHKey {
		return vs[0].([]*SSHKey)[vs[1].(int)]
	}).(SSHKeyOutput)
}

type SSHKeyMapOutput struct{ *pulumi.OutputState }

func (SSHKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SSHKey)(nil)).Elem()
}

func (o SSHKeyMapOutput) ToSSHKeyMapOutput() SSHKeyMapOutput {
	return o
}

func (o SSHKeyMapOutput) ToSSHKeyMapOutputWithContext(ctx context.Context) SSHKeyMapOutput {
	return o
}

func (o SSHKeyMapOutput) MapIndex(k pulumi.StringInput) SSHKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SSHKey {
		return vs[0].(map[string]*SSHKey)[vs[1].(string)]
	}).(SSHKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SSHKeyInput)(nil)).Elem(), &SSHKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*SSHKeyArrayInput)(nil)).Elem(), SSHKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SSHKeyMapInput)(nil)).Elem(), SSHKeyMap{})
	pulumi.RegisterOutputType(SSHKeyOutput{})
	pulumi.RegisterOutputType(SSHKeyArrayOutput{})
	pulumi.RegisterOutputType(SSHKeyMapOutput{})
}
