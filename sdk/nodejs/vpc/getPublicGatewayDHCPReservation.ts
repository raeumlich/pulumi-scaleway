// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Gets information about a dhcp entries. For further information please check the
 * API [documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1/#dhcp-entries-e40fb6)
 *
 * ## Example Dynamic
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumi/scaleway";
 *
 * const mainPrivateNetwork = new scaleway.vpc.PrivateNetwork("mainPrivateNetwork", {});
 * const mainServer = new scaleway.instance.Server("mainServer", {
 *     image: "ubuntu_jammy",
 *     type: "DEV1-S",
 *     zone: "fr-par-1",
 * });
 * const mainPrivateNIC = new scaleway.instance.PrivateNIC("mainPrivateNIC", {
 *     serverId: mainServer.id,
 *     privateNetworkId: mainPrivateNetwork.id,
 * });
 * const mainPublicGatewayIP = new scaleway.vpc.PublicGatewayIP("mainPublicGatewayIP", {});
 * const mainPublicGatewayDHCP = new scaleway.vpc.PublicGatewayDHCP("mainPublicGatewayDHCP", {subnet: "192.168.1.0/24"});
 * const mainPublicGateway = new scaleway.vpc.PublicGateway("mainPublicGateway", {
 *     type: "VPC-GW-S",
 *     ipId: mainPublicGatewayIP.id,
 * });
 * const mainGatewayNetwork = new scaleway.vpc.GatewayNetwork("mainGatewayNetwork", {
 *     gatewayId: mainPublicGateway.id,
 *     privateNetworkId: mainPrivateNetwork.id,
 *     dhcpId: mainPublicGatewayDHCP.id,
 *     cleanupDhcp: true,
 *     enableMasquerade: true,
 * });
 * //# Retrieve the dynamic entries generated by mac address & gateway network
 * const byMacAddressAndGwNetwork = scaleway.vpc.getPublicGatewayDHCPReservationOutput({
 *     macAddress: mainPrivateNIC.macAddress,
 *     gatewayNetworkId: mainGatewayNetwork.id,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Example Static and PAT rule
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumi/scaleway";
 *
 * const mainPrivateNetwork = new scaleway.vpc.PrivateNetwork("mainPrivateNetwork", {});
 * const mainSecurityGroup = new scaleway.instance.SecurityGroup("mainSecurityGroup", {
 *     inboundDefaultPolicy: "drop",
 *     outboundDefaultPolicy: "accept",
 *     inboundRules: [{
 *         action: "accept",
 *         port: 22,
 *     }],
 * });
 * const mainServer = new scaleway.instance.Server("mainServer", {
 *     image: "ubuntu_jammy",
 *     type: "DEV1-S",
 *     zone: "fr-par-1",
 *     securityGroupId: mainSecurityGroup.id,
 * });
 * const mainPrivateNIC = new scaleway.instance.PrivateNIC("mainPrivateNIC", {
 *     serverId: mainServer.id,
 *     privateNetworkId: mainPrivateNetwork.id,
 * });
 * const mainPublicGatewayIP = new scaleway.vpc.PublicGatewayIP("mainPublicGatewayIP", {});
 * const mainPublicGatewayDHCP = new scaleway.vpc.PublicGatewayDHCP("mainPublicGatewayDHCP", {subnet: "192.168.1.0/24"});
 * const mainPublicGateway = new scaleway.vpc.PublicGateway("mainPublicGateway", {
 *     type: "VPC-GW-S",
 *     ipId: mainPublicGatewayIP.id,
 * });
 * const mainGatewayNetwork = new scaleway.vpc.GatewayNetwork("mainGatewayNetwork", {
 *     gatewayId: mainPublicGateway.id,
 *     privateNetworkId: mainPrivateNetwork.id,
 *     dhcpId: mainPublicGatewayDHCP.id,
 *     cleanupDhcp: true,
 *     enableMasquerade: true,
 * });
 * const mainPublicGatewayDHCPReservation = new scaleway.vpc.PublicGatewayDHCPReservation("mainPublicGatewayDHCPReservation", {
 *     gatewayNetworkId: mainGatewayNetwork.id,
 *     macAddress: mainPrivateNIC.macAddress,
 *     ipAddress: "192.168.1.4",
 * });
 * //## VPC PAT RULE
 * const mainPublicGatewayPATRule = new scaleway.vpc.PublicGatewayPATRule("mainPublicGatewayPATRule", {
 *     gatewayId: mainPublicGateway.id,
 *     privateIp: mainPublicGatewayDHCPReservation.ipAddress,
 *     privatePort: 22,
 *     publicPort: 2222,
 *     protocol: "tcp",
 * });
 * const byId = scaleway.vpc.getPublicGatewayDHCPReservationOutput({
 *     reservationId: mainPublicGatewayDHCPReservation.id,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getPublicGatewayDHCPReservation(args?: GetPublicGatewayDHCPReservationArgs, opts?: pulumi.InvokeOptions): Promise<GetPublicGatewayDHCPReservationResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("scaleway:vpc/getPublicGatewayDHCPReservation:getPublicGatewayDHCPReservation", {
        "gatewayNetworkId": args.gatewayNetworkId,
        "macAddress": args.macAddress,
        "reservationId": args.reservationId,
        "waitForDhcp": args.waitForDhcp,
        "zone": args.zone,
    }, opts);
}

/**
 * A collection of arguments for invoking getPublicGatewayDHCPReservation.
 */
export interface GetPublicGatewayDHCPReservationArgs {
    /**
     * The ID of the owning GatewayNetwork.
     *
     * > Only one of `reservationId` or `macAddress` with `gatewayNetworkId` should be specified.
     */
    gatewayNetworkId?: string;
    /**
     * The MAC address of the reservation to retrieve.
     */
    macAddress?: string;
    /**
     * The ID of the Reservation to retrieve.
     */
    reservationId?: string;
    /**
     * Boolean to wait for macAddress to exist in dhcp.
     */
    waitForDhcp?: boolean;
    /**
     * `zone`) The zone in which the image exists.
     */
    zone?: string;
}

/**
 * A collection of values returned by getPublicGatewayDHCPReservation.
 */
export interface GetPublicGatewayDHCPReservationResult {
    readonly createdAt: string;
    readonly gatewayNetworkId?: string;
    readonly hostname: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ipAddress: string;
    readonly macAddress?: string;
    readonly reservationId?: string;
    readonly type: string;
    readonly updatedAt: string;
    readonly waitForDhcp?: boolean;
    readonly zone?: string;
}
/**
 * Gets information about a dhcp entries. For further information please check the
 * API [documentation](https://developers.scaleway.com/en/products/vpc-gw/api/v1/#dhcp-entries-e40fb6)
 *
 * ## Example Dynamic
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumi/scaleway";
 *
 * const mainPrivateNetwork = new scaleway.vpc.PrivateNetwork("mainPrivateNetwork", {});
 * const mainServer = new scaleway.instance.Server("mainServer", {
 *     image: "ubuntu_jammy",
 *     type: "DEV1-S",
 *     zone: "fr-par-1",
 * });
 * const mainPrivateNIC = new scaleway.instance.PrivateNIC("mainPrivateNIC", {
 *     serverId: mainServer.id,
 *     privateNetworkId: mainPrivateNetwork.id,
 * });
 * const mainPublicGatewayIP = new scaleway.vpc.PublicGatewayIP("mainPublicGatewayIP", {});
 * const mainPublicGatewayDHCP = new scaleway.vpc.PublicGatewayDHCP("mainPublicGatewayDHCP", {subnet: "192.168.1.0/24"});
 * const mainPublicGateway = new scaleway.vpc.PublicGateway("mainPublicGateway", {
 *     type: "VPC-GW-S",
 *     ipId: mainPublicGatewayIP.id,
 * });
 * const mainGatewayNetwork = new scaleway.vpc.GatewayNetwork("mainGatewayNetwork", {
 *     gatewayId: mainPublicGateway.id,
 *     privateNetworkId: mainPrivateNetwork.id,
 *     dhcpId: mainPublicGatewayDHCP.id,
 *     cleanupDhcp: true,
 *     enableMasquerade: true,
 * });
 * //# Retrieve the dynamic entries generated by mac address & gateway network
 * const byMacAddressAndGwNetwork = scaleway.vpc.getPublicGatewayDHCPReservationOutput({
 *     macAddress: mainPrivateNIC.macAddress,
 *     gatewayNetworkId: mainGatewayNetwork.id,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Example Static and PAT rule
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumi/scaleway";
 *
 * const mainPrivateNetwork = new scaleway.vpc.PrivateNetwork("mainPrivateNetwork", {});
 * const mainSecurityGroup = new scaleway.instance.SecurityGroup("mainSecurityGroup", {
 *     inboundDefaultPolicy: "drop",
 *     outboundDefaultPolicy: "accept",
 *     inboundRules: [{
 *         action: "accept",
 *         port: 22,
 *     }],
 * });
 * const mainServer = new scaleway.instance.Server("mainServer", {
 *     image: "ubuntu_jammy",
 *     type: "DEV1-S",
 *     zone: "fr-par-1",
 *     securityGroupId: mainSecurityGroup.id,
 * });
 * const mainPrivateNIC = new scaleway.instance.PrivateNIC("mainPrivateNIC", {
 *     serverId: mainServer.id,
 *     privateNetworkId: mainPrivateNetwork.id,
 * });
 * const mainPublicGatewayIP = new scaleway.vpc.PublicGatewayIP("mainPublicGatewayIP", {});
 * const mainPublicGatewayDHCP = new scaleway.vpc.PublicGatewayDHCP("mainPublicGatewayDHCP", {subnet: "192.168.1.0/24"});
 * const mainPublicGateway = new scaleway.vpc.PublicGateway("mainPublicGateway", {
 *     type: "VPC-GW-S",
 *     ipId: mainPublicGatewayIP.id,
 * });
 * const mainGatewayNetwork = new scaleway.vpc.GatewayNetwork("mainGatewayNetwork", {
 *     gatewayId: mainPublicGateway.id,
 *     privateNetworkId: mainPrivateNetwork.id,
 *     dhcpId: mainPublicGatewayDHCP.id,
 *     cleanupDhcp: true,
 *     enableMasquerade: true,
 * });
 * const mainPublicGatewayDHCPReservation = new scaleway.vpc.PublicGatewayDHCPReservation("mainPublicGatewayDHCPReservation", {
 *     gatewayNetworkId: mainGatewayNetwork.id,
 *     macAddress: mainPrivateNIC.macAddress,
 *     ipAddress: "192.168.1.4",
 * });
 * //## VPC PAT RULE
 * const mainPublicGatewayPATRule = new scaleway.vpc.PublicGatewayPATRule("mainPublicGatewayPATRule", {
 *     gatewayId: mainPublicGateway.id,
 *     privateIp: mainPublicGatewayDHCPReservation.ipAddress,
 *     privatePort: 22,
 *     publicPort: 2222,
 *     protocol: "tcp",
 * });
 * const byId = scaleway.vpc.getPublicGatewayDHCPReservationOutput({
 *     reservationId: mainPublicGatewayDHCPReservation.id,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getPublicGatewayDHCPReservationOutput(args?: GetPublicGatewayDHCPReservationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPublicGatewayDHCPReservationResult> {
    return pulumi.output(args).apply((a: any) => getPublicGatewayDHCPReservation(a, opts))
}

/**
 * A collection of arguments for invoking getPublicGatewayDHCPReservation.
 */
export interface GetPublicGatewayDHCPReservationOutputArgs {
    /**
     * The ID of the owning GatewayNetwork.
     *
     * > Only one of `reservationId` or `macAddress` with `gatewayNetworkId` should be specified.
     */
    gatewayNetworkId?: pulumi.Input<string>;
    /**
     * The MAC address of the reservation to retrieve.
     */
    macAddress?: pulumi.Input<string>;
    /**
     * The ID of the Reservation to retrieve.
     */
    reservationId?: pulumi.Input<string>;
    /**
     * Boolean to wait for macAddress to exist in dhcp.
     */
    waitForDhcp?: pulumi.Input<boolean>;
    /**
     * `zone`) The zone in which the image exists.
     */
    zone?: pulumi.Input<string>;
}
