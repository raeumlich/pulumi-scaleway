// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GatewayNetworkArgs, GatewayNetworkState } from "./gatewayNetwork";
export type GatewayNetwork = import("./gatewayNetwork").GatewayNetwork;
export const GatewayNetwork: typeof import("./gatewayNetwork").GatewayNetwork = null as any;
utilities.lazyLoad(exports, ["GatewayNetwork"], () => require("./gatewayNetwork"));

export { GetGatewayNetworkArgs, GetGatewayNetworkResult, GetGatewayNetworkOutputArgs } from "./getGatewayNetwork";
export const getGatewayNetwork: typeof import("./getGatewayNetwork").getGatewayNetwork = null as any;
export const getGatewayNetworkOutput: typeof import("./getGatewayNetwork").getGatewayNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getGatewayNetwork","getGatewayNetworkOutput"], () => require("./getGatewayNetwork"));

export { GetPrivateNetworkArgs, GetPrivateNetworkResult, GetPrivateNetworkOutputArgs } from "./getPrivateNetwork";
export const getPrivateNetwork: typeof import("./getPrivateNetwork").getPrivateNetwork = null as any;
export const getPrivateNetworkOutput: typeof import("./getPrivateNetwork").getPrivateNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateNetwork","getPrivateNetworkOutput"], () => require("./getPrivateNetwork"));

export { GetPublicGatewayArgs, GetPublicGatewayResult, GetPublicGatewayOutputArgs } from "./getPublicGateway";
export const getPublicGateway: typeof import("./getPublicGateway").getPublicGateway = null as any;
export const getPublicGatewayOutput: typeof import("./getPublicGateway").getPublicGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getPublicGateway","getPublicGatewayOutput"], () => require("./getPublicGateway"));

export { GetPublicGatewayDHCPArgs, GetPublicGatewayDHCPResult, GetPublicGatewayDHCPOutputArgs } from "./getPublicGatewayDHCP";
export const getPublicGatewayDHCP: typeof import("./getPublicGatewayDHCP").getPublicGatewayDHCP = null as any;
export const getPublicGatewayDHCPOutput: typeof import("./getPublicGatewayDHCP").getPublicGatewayDHCPOutput = null as any;
utilities.lazyLoad(exports, ["getPublicGatewayDHCP","getPublicGatewayDHCPOutput"], () => require("./getPublicGatewayDHCP"));

export { GetPublicGatewayDHCPReservationArgs, GetPublicGatewayDHCPReservationResult, GetPublicGatewayDHCPReservationOutputArgs } from "./getPublicGatewayDHCPReservation";
export const getPublicGatewayDHCPReservation: typeof import("./getPublicGatewayDHCPReservation").getPublicGatewayDHCPReservation = null as any;
export const getPublicGatewayDHCPReservationOutput: typeof import("./getPublicGatewayDHCPReservation").getPublicGatewayDHCPReservationOutput = null as any;
utilities.lazyLoad(exports, ["getPublicGatewayDHCPReservation","getPublicGatewayDHCPReservationOutput"], () => require("./getPublicGatewayDHCPReservation"));

export { GetPublicGatewayIPArgs, GetPublicGatewayIPResult, GetPublicGatewayIPOutputArgs } from "./getPublicGatewayIP";
export const getPublicGatewayIP: typeof import("./getPublicGatewayIP").getPublicGatewayIP = null as any;
export const getPublicGatewayIPOutput: typeof import("./getPublicGatewayIP").getPublicGatewayIPOutput = null as any;
utilities.lazyLoad(exports, ["getPublicGatewayIP","getPublicGatewayIPOutput"], () => require("./getPublicGatewayIP"));

export { GetPublicGatewayPATRuleArgs, GetPublicGatewayPATRuleResult, GetPublicGatewayPATRuleOutputArgs } from "./getPublicGatewayPATRule";
export const getPublicGatewayPATRule: typeof import("./getPublicGatewayPATRule").getPublicGatewayPATRule = null as any;
export const getPublicGatewayPATRuleOutput: typeof import("./getPublicGatewayPATRule").getPublicGatewayPATRuleOutput = null as any;
utilities.lazyLoad(exports, ["getPublicGatewayPATRule","getPublicGatewayPATRuleOutput"], () => require("./getPublicGatewayPATRule"));

export { GetVPCArgs, GetVPCResult, GetVPCOutputArgs } from "./getVPC";
export const getVPC: typeof import("./getVPC").getVPC = null as any;
export const getVPCOutput: typeof import("./getVPC").getVPCOutput = null as any;
utilities.lazyLoad(exports, ["getVPC","getVPCOutput"], () => require("./getVPC"));

export { GetVPCsArgs, GetVPCsResult, GetVPCsOutputArgs } from "./getVPCs";
export const getVPCs: typeof import("./getVPCs").getVPCs = null as any;
export const getVPCsOutput: typeof import("./getVPCs").getVPCsOutput = null as any;
utilities.lazyLoad(exports, ["getVPCs","getVPCsOutput"], () => require("./getVPCs"));

export { PrivateNetworkArgs, PrivateNetworkState } from "./privateNetwork";
export type PrivateNetwork = import("./privateNetwork").PrivateNetwork;
export const PrivateNetwork: typeof import("./privateNetwork").PrivateNetwork = null as any;
utilities.lazyLoad(exports, ["PrivateNetwork"], () => require("./privateNetwork"));

export { PublicGatewayArgs, PublicGatewayState } from "./publicGateway";
export type PublicGateway = import("./publicGateway").PublicGateway;
export const PublicGateway: typeof import("./publicGateway").PublicGateway = null as any;
utilities.lazyLoad(exports, ["PublicGateway"], () => require("./publicGateway"));

export { PublicGatewayDHCPArgs, PublicGatewayDHCPState } from "./publicGatewayDHCP";
export type PublicGatewayDHCP = import("./publicGatewayDHCP").PublicGatewayDHCP;
export const PublicGatewayDHCP: typeof import("./publicGatewayDHCP").PublicGatewayDHCP = null as any;
utilities.lazyLoad(exports, ["PublicGatewayDHCP"], () => require("./publicGatewayDHCP"));

export { PublicGatewayDHCPReservationArgs, PublicGatewayDHCPReservationState } from "./publicGatewayDHCPReservation";
export type PublicGatewayDHCPReservation = import("./publicGatewayDHCPReservation").PublicGatewayDHCPReservation;
export const PublicGatewayDHCPReservation: typeof import("./publicGatewayDHCPReservation").PublicGatewayDHCPReservation = null as any;
utilities.lazyLoad(exports, ["PublicGatewayDHCPReservation"], () => require("./publicGatewayDHCPReservation"));

export { PublicGatewayIPArgs, PublicGatewayIPState } from "./publicGatewayIP";
export type PublicGatewayIP = import("./publicGatewayIP").PublicGatewayIP;
export const PublicGatewayIP: typeof import("./publicGatewayIP").PublicGatewayIP = null as any;
utilities.lazyLoad(exports, ["PublicGatewayIP"], () => require("./publicGatewayIP"));

export { PublicGatewayIPReverseDNSArgs, PublicGatewayIPReverseDNSState } from "./publicGatewayIPReverseDNS";
export type PublicGatewayIPReverseDNS = import("./publicGatewayIPReverseDNS").PublicGatewayIPReverseDNS;
export const PublicGatewayIPReverseDNS: typeof import("./publicGatewayIPReverseDNS").PublicGatewayIPReverseDNS = null as any;
utilities.lazyLoad(exports, ["PublicGatewayIPReverseDNS"], () => require("./publicGatewayIPReverseDNS"));

export { PublicGatewayPATRuleArgs, PublicGatewayPATRuleState } from "./publicGatewayPATRule";
export type PublicGatewayPATRule = import("./publicGatewayPATRule").PublicGatewayPATRule;
export const PublicGatewayPATRule: typeof import("./publicGatewayPATRule").PublicGatewayPATRule = null as any;
utilities.lazyLoad(exports, ["PublicGatewayPATRule"], () => require("./publicGatewayPATRule"));

export { VPCArgs, VPCState } from "./vpc";
export type VPC = import("./vpc").VPC;
export const VPC: typeof import("./vpc").VPC = null as any;
utilities.lazyLoad(exports, ["VPC"], () => require("./vpc"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "scaleway:vpc/gatewayNetwork:GatewayNetwork":
                return new GatewayNetwork(name, <any>undefined, { urn })
            case "scaleway:vpc/privateNetwork:PrivateNetwork":
                return new PrivateNetwork(name, <any>undefined, { urn })
            case "scaleway:vpc/publicGateway:PublicGateway":
                return new PublicGateway(name, <any>undefined, { urn })
            case "scaleway:vpc/publicGatewayDHCP:PublicGatewayDHCP":
                return new PublicGatewayDHCP(name, <any>undefined, { urn })
            case "scaleway:vpc/publicGatewayDHCPReservation:PublicGatewayDHCPReservation":
                return new PublicGatewayDHCPReservation(name, <any>undefined, { urn })
            case "scaleway:vpc/publicGatewayIP:PublicGatewayIP":
                return new PublicGatewayIP(name, <any>undefined, { urn })
            case "scaleway:vpc/publicGatewayIPReverseDNS:PublicGatewayIPReverseDNS":
                return new PublicGatewayIPReverseDNS(name, <any>undefined, { urn })
            case "scaleway:vpc/publicGatewayPATRule:PublicGatewayPATRule":
                return new PublicGatewayPATRule(name, <any>undefined, { urn })
            case "scaleway:vpc/vPC:VPC":
                return new VPC(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("scaleway", "vpc/gatewayNetwork", _module)
pulumi.runtime.registerResourceModule("scaleway", "vpc/privateNetwork", _module)
pulumi.runtime.registerResourceModule("scaleway", "vpc/publicGateway", _module)
pulumi.runtime.registerResourceModule("scaleway", "vpc/publicGatewayDHCP", _module)
pulumi.runtime.registerResourceModule("scaleway", "vpc/publicGatewayDHCPReservation", _module)
pulumi.runtime.registerResourceModule("scaleway", "vpc/publicGatewayIP", _module)
pulumi.runtime.registerResourceModule("scaleway", "vpc/publicGatewayIPReverseDNS", _module)
pulumi.runtime.registerResourceModule("scaleway", "vpc/publicGatewayPATRule", _module)
pulumi.runtime.registerResourceModule("scaleway", "vpc/vPC", _module)
