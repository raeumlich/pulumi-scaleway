// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DatabaseArgs, DatabaseState } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));

export { GetDatabaseArgs, GetDatabaseResult, GetDatabaseOutputArgs } from "./getDatabase";
export const getDatabase: typeof import("./getDatabase").getDatabase = null as any;
export const getDatabaseOutput: typeof import("./getDatabase").getDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDatabase","getDatabaseOutput"], () => require("./getDatabase"));

export { GetInstanceArgs, GetInstanceResult, GetInstanceOutputArgs } from "./getInstance";
export const getInstance: typeof import("./getInstance").getInstance = null as any;
export const getInstanceOutput: typeof import("./getInstance").getInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getInstance","getInstanceOutput"], () => require("./getInstance"));

export { GetLoadBalancerEndpointArgs, GetLoadBalancerEndpointResult, GetLoadBalancerEndpointOutputArgs } from "./getLoadBalancerEndpoint";
export const getLoadBalancerEndpoint: typeof import("./getLoadBalancerEndpoint").getLoadBalancerEndpoint = null as any;
export const getLoadBalancerEndpointOutput: typeof import("./getLoadBalancerEndpoint").getLoadBalancerEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerEndpoint","getLoadBalancerEndpointOutput"], () => require("./getLoadBalancerEndpoint"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { PrivateNetworkEndpointArgs, PrivateNetworkEndpointState } from "./privateNetworkEndpoint";
export type PrivateNetworkEndpoint = import("./privateNetworkEndpoint").PrivateNetworkEndpoint;
export const PrivateNetworkEndpoint: typeof import("./privateNetworkEndpoint").PrivateNetworkEndpoint = null as any;
utilities.lazyLoad(exports, ["PrivateNetworkEndpoint"], () => require("./privateNetworkEndpoint"));

export { PrivilegeArgs, PrivilegeState } from "./privilege";
export type Privilege = import("./privilege").Privilege;
export const Privilege: typeof import("./privilege").Privilege = null as any;
utilities.lazyLoad(exports, ["Privilege"], () => require("./privilege"));

export { ReadReplicaArgs, ReadReplicaState } from "./readReplica";
export type ReadReplica = import("./readReplica").ReadReplica;
export const ReadReplica: typeof import("./readReplica").ReadReplica = null as any;
utilities.lazyLoad(exports, ["ReadReplica"], () => require("./readReplica"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "scaleway:documentdb/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "scaleway:documentdb/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "scaleway:documentdb/privateNetworkEndpoint:PrivateNetworkEndpoint":
                return new PrivateNetworkEndpoint(name, <any>undefined, { urn })
            case "scaleway:documentdb/privilege:Privilege":
                return new Privilege(name, <any>undefined, { urn })
            case "scaleway:documentdb/readReplica:ReadReplica":
                return new ReadReplica(name, <any>undefined, { urn })
            case "scaleway:documentdb/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("scaleway", "documentdb/database", _module)
pulumi.runtime.registerResourceModule("scaleway", "documentdb/instance", _module)
pulumi.runtime.registerResourceModule("scaleway", "documentdb/privateNetworkEndpoint", _module)
pulumi.runtime.registerResourceModule("scaleway", "documentdb/privilege", _module)
pulumi.runtime.registerResourceModule("scaleway", "documentdb/readReplica", _module)
pulumi.runtime.registerResourceModule("scaleway", "documentdb/user", _module)
