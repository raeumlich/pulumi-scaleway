// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Gets information about multiple Load Balancers.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumi/scaleway";
 *
 * const myKey = scaleway.loadbalancer.getLoadBalancers({
 *     name: "foobar",
 *     zone: "fr-par-2",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getLoadBalancers(args?: GetLoadBalancersArgs, opts?: pulumi.InvokeOptions): Promise<GetLoadBalancersResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("scaleway:loadbalancer/getLoadBalancers:getLoadBalancers", {
        "name": args.name,
        "projectId": args.projectId,
        "zone": args.zone,
    }, opts);
}

/**
 * A collection of arguments for invoking getLoadBalancers.
 */
export interface GetLoadBalancersArgs {
    /**
     * The load balancer name used as a filter. LBs with a name like it are listed.
     */
    name?: string;
    /**
     * The ID of the project the load-balancer is associated with.
     */
    projectId?: string;
    /**
     * `zone`) The zone in which LBs exist.
     */
    zone?: string;
}

/**
 * A collection of values returned by getLoadBalancers.
 */
export interface GetLoadBalancersResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * List of found LBs
     */
    readonly lbs: outputs.loadbalancer.GetLoadBalancersLb[];
    /**
     * The name of the load-balancer.
     */
    readonly name?: string;
    /**
     * The organization ID the load-balancer is associated with.
     */
    readonly organizationId: string;
    /**
     * The ID of the project the load-balancer is associated with.
     */
    readonly projectId: string;
    /**
     * The zone in which the load-balancer is.
     */
    readonly zone: string;
}
/**
 * Gets information about multiple Load Balancers.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumi/scaleway";
 *
 * const myKey = scaleway.loadbalancer.getLoadBalancers({
 *     name: "foobar",
 *     zone: "fr-par-2",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getLoadBalancersOutput(args?: GetLoadBalancersOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLoadBalancersResult> {
    return pulumi.output(args).apply((a: any) => getLoadBalancers(a, opts))
}

/**
 * A collection of arguments for invoking getLoadBalancers.
 */
export interface GetLoadBalancersOutputArgs {
    /**
     * The load balancer name used as a filter. LBs with a name like it are listed.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project the load-balancer is associated with.
     */
    projectId?: pulumi.Input<string>;
    /**
     * `zone`) The zone in which LBs exist.
     */
    zone?: pulumi.Input<string>;
}
