// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Get information about Scaleway Load-Balancer Backends.
 * For more information, see [the documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-backends).
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumi/scaleway";
 *
 * const mainIP = new scaleway.loadbalancer.IP("mainIP", {});
 * const mainLoadBalancer = new scaleway.loadbalancer.LoadBalancer("mainLoadBalancer", {
 *     ipId: mainIP.id,
 *     type: "LB-S",
 * });
 * const mainBackend = new scaleway.loadbalancer.Backend("mainBackend", {
 *     lbId: mainLoadBalancer.id,
 *     forwardProtocol: "http",
 *     forwardPort: 80,
 * });
 * const byID = scaleway.loadbalancer.getBackendOutput({
 *     backendId: mainBackend.id,
 * });
 * const byName = scaleway.loadbalancer.getBackendOutput({
 *     name: mainBackend.name,
 *     lbId: mainLoadBalancer.id,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getBackend(args?: GetBackendArgs, opts?: pulumi.InvokeOptions): Promise<GetBackendResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("scaleway:loadbalancer/getBackend:getBackend", {
        "backendId": args.backendId,
        "lbId": args.lbId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getBackend.
 */
export interface GetBackendArgs {
    /**
     * The backend id.
     * - Only one of `name` and `backendId` should be specified.
     */
    backendId?: string;
    /**
     * The load-balancer ID this backend is attached to.
     */
    lbId?: string;
    /**
     * The name of the backend.
     * - When using the `name` you should specify the `lb-id`
     */
    name?: string;
}

/**
 * A collection of values returned by getBackend.
 */
export interface GetBackendResult {
    readonly backendId?: string;
    readonly failoverHost: string;
    readonly forwardPort: number;
    readonly forwardPortAlgorithm: string;
    readonly forwardProtocol: string;
    readonly healthCheckDelay: string;
    readonly healthCheckHttp: outputs.loadbalancer.GetBackendHealthCheckHttp[];
    readonly healthCheckHttps: outputs.loadbalancer.GetBackendHealthCheckHttp[];
    readonly healthCheckMaxRetries: number;
    readonly healthCheckPort: number;
    readonly healthCheckSendProxy: boolean;
    readonly healthCheckTcps: outputs.loadbalancer.GetBackendHealthCheckTcp[];
    readonly healthCheckTimeout: string;
    readonly healthCheckTransientDelay: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ignoreSslServerVerify: boolean;
    readonly lbId?: string;
    readonly maxConnections: number;
    readonly maxRetries: number;
    readonly name?: string;
    readonly onMarkedDownAction: string;
    readonly proxyProtocol: string;
    readonly redispatchAttemptCount: number;
    readonly sendProxyV2: boolean;
    readonly serverIps: string[];
    readonly sslBridging: boolean;
    readonly stickySessions: string;
    readonly stickySessionsCookieName: string;
    readonly timeoutConnect: string;
    readonly timeoutQueue: string;
    readonly timeoutServer: string;
    readonly timeoutTunnel: string;
}
/**
 * Get information about Scaleway Load-Balancer Backends.
 * For more information, see [the documentation](https://www.scaleway.com/en/developers/api/load-balancer/zoned-api/#path-backends).
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumi/scaleway";
 *
 * const mainIP = new scaleway.loadbalancer.IP("mainIP", {});
 * const mainLoadBalancer = new scaleway.loadbalancer.LoadBalancer("mainLoadBalancer", {
 *     ipId: mainIP.id,
 *     type: "LB-S",
 * });
 * const mainBackend = new scaleway.loadbalancer.Backend("mainBackend", {
 *     lbId: mainLoadBalancer.id,
 *     forwardProtocol: "http",
 *     forwardPort: 80,
 * });
 * const byID = scaleway.loadbalancer.getBackendOutput({
 *     backendId: mainBackend.id,
 * });
 * const byName = scaleway.loadbalancer.getBackendOutput({
 *     name: mainBackend.name,
 *     lbId: mainLoadBalancer.id,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getBackendOutput(args?: GetBackendOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBackendResult> {
    return pulumi.output(args).apply((a: any) => getBackend(a, opts))
}

/**
 * A collection of arguments for invoking getBackend.
 */
export interface GetBackendOutputArgs {
    /**
     * The backend id.
     * - Only one of `name` and `backendId` should be specified.
     */
    backendId?: pulumi.Input<string>;
    /**
     * The load-balancer ID this backend is attached to.
     */
    lbId?: pulumi.Input<string>;
    /**
     * The name of the backend.
     * - When using the `name` you should specify the `lb-id`
     */
    name?: pulumi.Input<string>;
}
