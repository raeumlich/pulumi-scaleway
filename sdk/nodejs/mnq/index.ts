// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetSQSArgs, GetSQSResult, GetSQSOutputArgs } from "./getSQS";
export const getSQS: typeof import("./getSQS").getSQS = null as any;
export const getSQSOutput: typeof import("./getSQS").getSQSOutput = null as any;
utilities.lazyLoad(exports, ["getSQS","getSQSOutput"], () => require("./getSQS"));

export { NATSAccountArgs, NATSAccountState } from "./natsaccount";
export type NATSAccount = import("./natsaccount").NATSAccount;
export const NATSAccount: typeof import("./natsaccount").NATSAccount = null as any;
utilities.lazyLoad(exports, ["NATSAccount"], () => require("./natsaccount"));

export { NATSCredentialsArgs, NATSCredentialsState } from "./natscredentials";
export type NATSCredentials = import("./natscredentials").NATSCredentials;
export const NATSCredentials: typeof import("./natscredentials").NATSCredentials = null as any;
utilities.lazyLoad(exports, ["NATSCredentials"], () => require("./natscredentials"));

export { SNSArgs, SNSState } from "./sns";
export type SNS = import("./sns").SNS;
export const SNS: typeof import("./sns").SNS = null as any;
utilities.lazyLoad(exports, ["SNS"], () => require("./sns"));

export { SNSCredentialsArgs, SNSCredentialsState } from "./snscredentials";
export type SNSCredentials = import("./snscredentials").SNSCredentials;
export const SNSCredentials: typeof import("./snscredentials").SNSCredentials = null as any;
utilities.lazyLoad(exports, ["SNSCredentials"], () => require("./snscredentials"));

export { SNSTopicArgs, SNSTopicState } from "./snstopic";
export type SNSTopic = import("./snstopic").SNSTopic;
export const SNSTopic: typeof import("./snstopic").SNSTopic = null as any;
utilities.lazyLoad(exports, ["SNSTopic"], () => require("./snstopic"));

export { SNSTopicSubscriptionArgs, SNSTopicSubscriptionState } from "./snstopicSubscription";
export type SNSTopicSubscription = import("./snstopicSubscription").SNSTopicSubscription;
export const SNSTopicSubscription: typeof import("./snstopicSubscription").SNSTopicSubscription = null as any;
utilities.lazyLoad(exports, ["SNSTopicSubscription"], () => require("./snstopicSubscription"));

export { SQSArgs, SQSState } from "./sqs";
export type SQS = import("./sqs").SQS;
export const SQS: typeof import("./sqs").SQS = null as any;
utilities.lazyLoad(exports, ["SQS"], () => require("./sqs"));

export { SQSCredentialsArgs, SQSCredentialsState } from "./sqscredentials";
export type SQSCredentials = import("./sqscredentials").SQSCredentials;
export const SQSCredentials: typeof import("./sqscredentials").SQSCredentials = null as any;
utilities.lazyLoad(exports, ["SQSCredentials"], () => require("./sqscredentials"));

export { SQSQueueArgs, SQSQueueState } from "./sqsqueue";
export type SQSQueue = import("./sqsqueue").SQSQueue;
export const SQSQueue: typeof import("./sqsqueue").SQSQueue = null as any;
utilities.lazyLoad(exports, ["SQSQueue"], () => require("./sqsqueue"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "scaleway:mnq/nATSAccount:NATSAccount":
                return new NATSAccount(name, <any>undefined, { urn })
            case "scaleway:mnq/nATSCredentials:NATSCredentials":
                return new NATSCredentials(name, <any>undefined, { urn })
            case "scaleway:mnq/sNS:SNS":
                return new SNS(name, <any>undefined, { urn })
            case "scaleway:mnq/sNSCredentials:SNSCredentials":
                return new SNSCredentials(name, <any>undefined, { urn })
            case "scaleway:mnq/sNSTopic:SNSTopic":
                return new SNSTopic(name, <any>undefined, { urn })
            case "scaleway:mnq/sNSTopicSubscription:SNSTopicSubscription":
                return new SNSTopicSubscription(name, <any>undefined, { urn })
            case "scaleway:mnq/sQS:SQS":
                return new SQS(name, <any>undefined, { urn })
            case "scaleway:mnq/sQSCredentials:SQSCredentials":
                return new SQSCredentials(name, <any>undefined, { urn })
            case "scaleway:mnq/sQSQueue:SQSQueue":
                return new SQSQueue(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("scaleway", "mnq/nATSAccount", _module)
pulumi.runtime.registerResourceModule("scaleway", "mnq/nATSCredentials", _module)
pulumi.runtime.registerResourceModule("scaleway", "mnq/sNS", _module)
pulumi.runtime.registerResourceModule("scaleway", "mnq/sNSCredentials", _module)
pulumi.runtime.registerResourceModule("scaleway", "mnq/sNSTopic", _module)
pulumi.runtime.registerResourceModule("scaleway", "mnq/sNSTopicSubscription", _module)
pulumi.runtime.registerResourceModule("scaleway", "mnq/sQS", _module)
pulumi.runtime.registerResourceModule("scaleway", "mnq/sQSCredentials", _module)
pulumi.runtime.registerResourceModule("scaleway", "mnq/sQSQueue", _module)
