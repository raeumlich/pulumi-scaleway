// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Activate Scaleway Messaging and queuing SQS for a project.
 * For further information please check
 * our [documentation](https://www.scaleway.com/en/docs/serverless/messaging/reference-content/sqs-overview/)
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * Activate SQS for default project
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumi/scaleway";
 *
 * const main = new scaleway.mnq.SQS("main", {});
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * Activate SQS for a specific project
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scaleway from "@pulumi/scaleway";
 *
 * const project = scaleway.account.getProject({
 *     name: "default",
 * });
 * const forProject = new scaleway.mnq.SQS("forProject", {projectId: project.then(project => project.id)});
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * SQS status can be imported using the `{region}/{project_id}`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import scaleway:mnq/sQS:SQS main fr-par/11111111111111111111111111111111
 * ```
 */
export class SQS extends pulumi.CustomResource {
    /**
     * Get an existing SQS resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SQSState, opts?: pulumi.CustomResourceOptions): SQS {
        return new SQS(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:mnq/sQS:SQS';

    /**
     * Returns true if the given object is an instance of SQS.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SQS {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SQS.__pulumiType;
    }

    /**
     * The endpoint of the SQS service for this project.
     */
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    /**
     * `projectId`) The ID of the project the sqs will be enabled for.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * `region`). The region
     * in which sqs will be enabled.
     */
    public readonly region!: pulumi.Output<string>;

    /**
     * Create a SQS resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SQSArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SQSArgs | SQSState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SQSState | undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as SQSArgs | undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["endpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SQS.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SQS resources.
 */
export interface SQSState {
    /**
     * The endpoint of the SQS service for this project.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * `projectId`) The ID of the project the sqs will be enabled for.
     */
    projectId?: pulumi.Input<string>;
    /**
     * `region`). The region
     * in which sqs will be enabled.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SQS resource.
 */
export interface SQSArgs {
    /**
     * `projectId`) The ID of the project the sqs will be enabled for.
     */
    projectId?: pulumi.Input<string>;
    /**
     * `region`). The region
     * in which sqs will be enabled.
     */
    region?: pulumi.Input<string>;
}
