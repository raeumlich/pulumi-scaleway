// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CockpitArgs, CockpitState } from "./cockpit";
export type Cockpit = import("./cockpit").Cockpit;
export const Cockpit: typeof import("./cockpit").Cockpit = null as any;
utilities.lazyLoad(exports, ["Cockpit"], () => require("./cockpit"));

export { GetCockpitArgs, GetCockpitResult, GetCockpitOutputArgs } from "./getCockpit";
export const getCockpit: typeof import("./getCockpit").getCockpit = null as any;
export const getCockpitOutput: typeof import("./getCockpit").getCockpitOutput = null as any;
utilities.lazyLoad(exports, ["getCockpit","getCockpitOutput"], () => require("./getCockpit"));

export { GetPlanArgs, GetPlanResult, GetPlanOutputArgs } from "./getPlan";
export const getPlan: typeof import("./getPlan").getPlan = null as any;
export const getPlanOutput: typeof import("./getPlan").getPlanOutput = null as any;
utilities.lazyLoad(exports, ["getPlan","getPlanOutput"], () => require("./getPlan"));

export { GrafanaUserArgs, GrafanaUserState } from "./grafanaUser";
export type GrafanaUser = import("./grafanaUser").GrafanaUser;
export const GrafanaUser: typeof import("./grafanaUser").GrafanaUser = null as any;
utilities.lazyLoad(exports, ["GrafanaUser"], () => require("./grafanaUser"));

export { TokenArgs, TokenState } from "./token";
export type Token = import("./token").Token;
export const Token: typeof import("./token").Token = null as any;
utilities.lazyLoad(exports, ["Token"], () => require("./token"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "scaleway:cockpit/cockpit:Cockpit":
                return new Cockpit(name, <any>undefined, { urn })
            case "scaleway:cockpit/grafanaUser:GrafanaUser":
                return new GrafanaUser(name, <any>undefined, { urn })
            case "scaleway:cockpit/token:Token":
                return new Token(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("scaleway", "cockpit/cockpit", _module)
pulumi.runtime.registerResourceModule("scaleway", "cockpit/grafanaUser", _module)
pulumi.runtime.registerResourceModule("scaleway", "cockpit/token", _module)
