// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetAvailabilityZonesArgs, GetAvailabilityZonesResult, GetAvailabilityZonesOutputArgs } from "./getAvailabilityZones";
export const getAvailabilityZones: typeof import("./getAvailabilityZones").getAvailabilityZones = null as any;
export const getAvailabilityZonesOutput: typeof import("./getAvailabilityZones").getAvailabilityZonesOutput = null as any;
utilities.lazyLoad(exports, ["getAvailabilityZones","getAvailabilityZonesOutput"], () => require("./getAvailabilityZones"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetSSHKeyArgs, GetSSHKeyResult, GetSSHKeyOutputArgs } from "./getSSHKey";
export const getSSHKey: typeof import("./getSSHKey").getSSHKey = null as any;
export const getSSHKeyOutput: typeof import("./getSSHKey").getSSHKeyOutput = null as any;
utilities.lazyLoad(exports, ["getSSHKey","getSSHKeyOutput"], () => require("./getSSHKey"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { SSHKeyArgs, SSHKeyState } from "./sshkey";
export type SSHKey = import("./sshkey").SSHKey;
export const SSHKey: typeof import("./sshkey").SSHKey = null as any;
utilities.lazyLoad(exports, ["SSHKey"], () => require("./sshkey"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "scaleway:account/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "scaleway:account/sSHKey:SSHKey":
                return new SSHKey(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("scaleway", "account/project", _module)
pulumi.runtime.registerResourceModule("scaleway", "account/sSHKey", _module)
