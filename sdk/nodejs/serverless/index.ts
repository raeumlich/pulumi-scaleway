// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ContainerArgs, ContainerState } from "./container";
export type Container = import("./container").Container;
export const Container: typeof import("./container").Container = null as any;
utilities.lazyLoad(exports, ["Container"], () => require("./container"));

export { ContainerCronArgs, ContainerCronState } from "./containerCron";
export type ContainerCron = import("./containerCron").ContainerCron;
export const ContainerCron: typeof import("./containerCron").ContainerCron = null as any;
utilities.lazyLoad(exports, ["ContainerCron"], () => require("./containerCron"));

export { ContainerDomainArgs, ContainerDomainState } from "./containerDomain";
export type ContainerDomain = import("./containerDomain").ContainerDomain;
export const ContainerDomain: typeof import("./containerDomain").ContainerDomain = null as any;
utilities.lazyLoad(exports, ["ContainerDomain"], () => require("./containerDomain"));

export { ContainerNamespaceArgs, ContainerNamespaceState } from "./containerNamespace";
export type ContainerNamespace = import("./containerNamespace").ContainerNamespace;
export const ContainerNamespace: typeof import("./containerNamespace").ContainerNamespace = null as any;
utilities.lazyLoad(exports, ["ContainerNamespace"], () => require("./containerNamespace"));

export { ContainerTokenArgs, ContainerTokenState } from "./containerToken";
export type ContainerToken = import("./containerToken").ContainerToken;
export const ContainerToken: typeof import("./containerToken").ContainerToken = null as any;
utilities.lazyLoad(exports, ["ContainerToken"], () => require("./containerToken"));

export { ContainerTriggerArgs, ContainerTriggerState } from "./containerTrigger";
export type ContainerTrigger = import("./containerTrigger").ContainerTrigger;
export const ContainerTrigger: typeof import("./containerTrigger").ContainerTrigger = null as any;
utilities.lazyLoad(exports, ["ContainerTrigger"], () => require("./containerTrigger"));

export { FunctionArgs, FunctionState } from "./function";
export type Function = import("./function").Function;
export const Function: typeof import("./function").Function = null as any;
utilities.lazyLoad(exports, ["Function"], () => require("./function"));

export { FunctionCronArgs, FunctionCronState } from "./functionCron";
export type FunctionCron = import("./functionCron").FunctionCron;
export const FunctionCron: typeof import("./functionCron").FunctionCron = null as any;
utilities.lazyLoad(exports, ["FunctionCron"], () => require("./functionCron"));

export { FunctionDomainArgs, FunctionDomainState } from "./functionDomain";
export type FunctionDomain = import("./functionDomain").FunctionDomain;
export const FunctionDomain: typeof import("./functionDomain").FunctionDomain = null as any;
utilities.lazyLoad(exports, ["FunctionDomain"], () => require("./functionDomain"));

export { FunctionNamespaceArgs, FunctionNamespaceState } from "./functionNamespace";
export type FunctionNamespace = import("./functionNamespace").FunctionNamespace;
export const FunctionNamespace: typeof import("./functionNamespace").FunctionNamespace = null as any;
utilities.lazyLoad(exports, ["FunctionNamespace"], () => require("./functionNamespace"));

export { FunctionTokenArgs, FunctionTokenState } from "./functionToken";
export type FunctionToken = import("./functionToken").FunctionToken;
export const FunctionToken: typeof import("./functionToken").FunctionToken = null as any;
utilities.lazyLoad(exports, ["FunctionToken"], () => require("./functionToken"));

export { FunctionTriggerArgs, FunctionTriggerState } from "./functionTrigger";
export type FunctionTrigger = import("./functionTrigger").FunctionTrigger;
export const FunctionTrigger: typeof import("./functionTrigger").FunctionTrigger = null as any;
utilities.lazyLoad(exports, ["FunctionTrigger"], () => require("./functionTrigger"));

export { GetContainerArgs, GetContainerResult, GetContainerOutputArgs } from "./getContainer";
export const getContainer: typeof import("./getContainer").getContainer = null as any;
export const getContainerOutput: typeof import("./getContainer").getContainerOutput = null as any;
utilities.lazyLoad(exports, ["getContainer","getContainerOutput"], () => require("./getContainer"));

export { GetContainerNamespaceArgs, GetContainerNamespaceResult, GetContainerNamespaceOutputArgs } from "./getContainerNamespace";
export const getContainerNamespace: typeof import("./getContainerNamespace").getContainerNamespace = null as any;
export const getContainerNamespaceOutput: typeof import("./getContainerNamespace").getContainerNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getContainerNamespace","getContainerNamespaceOutput"], () => require("./getContainerNamespace"));

export { GetFunctionArgs, GetFunctionResult, GetFunctionOutputArgs } from "./getFunction";
export const getFunction: typeof import("./getFunction").getFunction = null as any;
export const getFunctionOutput: typeof import("./getFunction").getFunctionOutput = null as any;
utilities.lazyLoad(exports, ["getFunction","getFunctionOutput"], () => require("./getFunction"));

export { GetFunctionNamespaceArgs, GetFunctionNamespaceResult, GetFunctionNamespaceOutputArgs } from "./getFunctionNamespace";
export const getFunctionNamespace: typeof import("./getFunctionNamespace").getFunctionNamespace = null as any;
export const getFunctionNamespaceOutput: typeof import("./getFunctionNamespace").getFunctionNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getFunctionNamespace","getFunctionNamespaceOutput"], () => require("./getFunctionNamespace"));

export { JobDefinitionArgs, JobDefinitionState } from "./jobDefinition";
export type JobDefinition = import("./jobDefinition").JobDefinition;
export const JobDefinition: typeof import("./jobDefinition").JobDefinition = null as any;
utilities.lazyLoad(exports, ["JobDefinition"], () => require("./jobDefinition"));

export { SDBDatabaseArgs, SDBDatabaseState } from "./sdbdatabase";
export type SDBDatabase = import("./sdbdatabase").SDBDatabase;
export const SDBDatabase: typeof import("./sdbdatabase").SDBDatabase = null as any;
utilities.lazyLoad(exports, ["SDBDatabase"], () => require("./sdbdatabase"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "scaleway:serverless/container:Container":
                return new Container(name, <any>undefined, { urn })
            case "scaleway:serverless/containerCron:ContainerCron":
                return new ContainerCron(name, <any>undefined, { urn })
            case "scaleway:serverless/containerDomain:ContainerDomain":
                return new ContainerDomain(name, <any>undefined, { urn })
            case "scaleway:serverless/containerNamespace:ContainerNamespace":
                return new ContainerNamespace(name, <any>undefined, { urn })
            case "scaleway:serverless/containerToken:ContainerToken":
                return new ContainerToken(name, <any>undefined, { urn })
            case "scaleway:serverless/containerTrigger:ContainerTrigger":
                return new ContainerTrigger(name, <any>undefined, { urn })
            case "scaleway:serverless/function:Function":
                return new Function(name, <any>undefined, { urn })
            case "scaleway:serverless/functionCron:FunctionCron":
                return new FunctionCron(name, <any>undefined, { urn })
            case "scaleway:serverless/functionDomain:FunctionDomain":
                return new FunctionDomain(name, <any>undefined, { urn })
            case "scaleway:serverless/functionNamespace:FunctionNamespace":
                return new FunctionNamespace(name, <any>undefined, { urn })
            case "scaleway:serverless/functionToken:FunctionToken":
                return new FunctionToken(name, <any>undefined, { urn })
            case "scaleway:serverless/functionTrigger:FunctionTrigger":
                return new FunctionTrigger(name, <any>undefined, { urn })
            case "scaleway:serverless/jobDefinition:JobDefinition":
                return new JobDefinition(name, <any>undefined, { urn })
            case "scaleway:serverless/sDBDatabase:SDBDatabase":
                return new SDBDatabase(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("scaleway", "serverless/container", _module)
pulumi.runtime.registerResourceModule("scaleway", "serverless/containerCron", _module)
pulumi.runtime.registerResourceModule("scaleway", "serverless/containerDomain", _module)
pulumi.runtime.registerResourceModule("scaleway", "serverless/containerNamespace", _module)
pulumi.runtime.registerResourceModule("scaleway", "serverless/containerToken", _module)
pulumi.runtime.registerResourceModule("scaleway", "serverless/containerTrigger", _module)
pulumi.runtime.registerResourceModule("scaleway", "serverless/function", _module)
pulumi.runtime.registerResourceModule("scaleway", "serverless/functionCron", _module)
pulumi.runtime.registerResourceModule("scaleway", "serverless/functionDomain", _module)
pulumi.runtime.registerResourceModule("scaleway", "serverless/functionNamespace", _module)
pulumi.runtime.registerResourceModule("scaleway", "serverless/functionToken", _module)
pulumi.runtime.registerResourceModule("scaleway", "serverless/functionTrigger", _module)
pulumi.runtime.registerResourceModule("scaleway", "serverless/jobDefinition", _module)
pulumi.runtime.registerResourceModule("scaleway", "serverless/sDBDatabase", _module)
